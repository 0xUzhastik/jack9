This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.bolt/
  config.json
  ignore
  prompt
app/
  globals.css
  layout.tsx
  page.tsx
components/
  layouts/
    DesktopLayout.tsx
    MobileLayout.tsx
  svg/
    purplebackground.svg
    PurpleBackground.tsx
  tokenSelector/
    DesktopTokenSelector.tsx
    MobileTokenRow.tsx
    TokenRowEditor.tsx
    TokenSelector.tsx
    TokenSelectorModeWrapper.tsx
  ui/
    accordion.tsx
    alert-dialog.tsx
    alert.tsx
    aspect-ratio.tsx
    avatar.tsx
    badge.tsx
    breadcrumb.tsx
    button.tsx
    calendar.tsx
    card.tsx
    carousel.tsx
    chart.tsx
    checkbox.tsx
    collapsible.tsx
    command.tsx
    context-menu.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    form.tsx
    hover-card.tsx
    input-otp.tsx
    input.tsx
    label.tsx
    menubar.tsx
    navigation-menu.tsx
    pagination.tsx
    popover.tsx
    progress.tsx
    radio-group.tsx
    resizable.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    skeleton.tsx
    slider.tsx
    sliding-number.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
    toggle-group.tsx
    toggle.tsx
    tooltip.tsx
  BottomChip.tsx
  CenterColumn.tsx
  ChatSection.tsx
  ChipStack.tsx
  ClientPageContent.tsx
  CurrentDeposits.tsx
  CustomTooltip.tsx
  DebugModal.tsx
  DepositBar.tsx
  EmojiPicker.tsx
  EnterRound.tsx
  FloatingTokens.tsx
  Header.tsx
  JackpotDonutChart.tsx
  LeftColumn.tsx
  LogoutButton.tsx
  PastDraws.tsx
  PastWinners.tsx
  Providers.tsx
  RightColumn.tsx
  RoundStateDisplay.tsx
  SpinningWheel.tsx
  SunburstBackground.tsx
  TokenControls.tsx
  TokenPortfolioView.tsx
  TokenPortfolioWrapper.tsx
  TokenSelector.tsx
  TopChip.tsx
  UnifiedAudioControl.tsx
  WalletConnect.tsx
constants/
  denominations.ts
hooks/
  use-audio.ts
  use-toast.ts
  useSolPriceUSD.ts
  useTokenBalances.ts
  useTokenData.ts
  useTokenPriceSol.ts
  useViewportHeight.ts
lib/
  confetti.ts
  constants.ts
  emoji-map.ts
  inputHandlers.ts
  mock-data.ts
  priceCalculations.ts
  tokenSelectorConstants.ts
  tokenSelectorHandlers.ts
  tokenSelectorUtils.ts
  tokenUtils.ts
  transaction-builder.ts
  types.ts
  utils.ts
  wheel-utils.ts
stores/
  audioStore.ts
  chatStore.ts
  debugStore.ts
  gameStore.ts
  settingsStore.ts
  tokenStore.ts
  uiStore.ts
styles/
  slider.css
types/
  react-curved-text.d.ts
  shared.ts
  token.ts
utils/
  tokenManagement.ts
  tokenUtils.ts
.eslintrc.json
.gitignore
components.json
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".bolt/config.json">
{
  "template": "nextjs-shadcn"
}
</file>

<file path=".bolt/ignore">
components/ui/*
hooks/use-toast.ts
</file>

<file path=".bolt/prompt">
For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

When using client-side hooks (useState and useEffect) in a component that's being treated as a Server Component by Next.js, always add the "use client" directive at the top of the file.

Do not write code that will trigger this error: "Warning: Extra attributes from the server: %s%s""class,style"

By default, this template supports JSX syntax with Tailwind CSS classes, the shadcn/ui library, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Visby Round Font Face Declarations */
@font-face {
  font-family: 'Visby Round CF';
  font-style: normal;
  font-weight: 200;
  font-display: swap;
  src: url('/fonts/VisbyRoundCF-ExtraLight.woff2') format('woff2'),
       url('/fonts/VisbyRoundCF-ExtraLight.woff') format('woff');
}

@font-face {
  font-family: 'Visby Round CF';
  font-style: normal;
  font-weight: 300;
  font-display: swap;
  src: url('/fonts/VisbyRoundCF-Light.woff2') format('woff2'),
       url('/fonts/VisbyRoundCF-Light.woff') format('woff');
}

@font-face {
  font-family: 'Visby Round CF';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url('/fonts/VisbyRoundCF-Regular.woff2') format('woff2'),
       url('/fonts/VisbyRoundCF-Regular.woff') format('woff');
}

@font-face {
  font-family: 'Visby Round CF';
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url('/fonts/VisbyRoundCF-Medium.woff2') format('woff2'),
       url('/fonts/VisbyRoundCF-Medium.woff') format('woff');
}

@font-face {
  font-family: 'Visby Round CF';
  font-style: normal;
  font-weight: 600;
  font-display: swap;
  src: url('/fonts/VisbyRoundCF-DemiBold.woff2') format('woff2'),
       url('/fonts/VisbyRoundCF-DemiBold.woff') format('woff');
}

@font-face {
  font-family: 'Visby Round CF';
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: url('/fonts/VisbyRoundCF-Bold.woff2') format('woff2'),
       url('/fonts/VisbyRoundCF-Bold.woff') format('woff');
}

@font-face {
  font-family: 'Visby Round CF';
  font-style: normal;
  font-weight: 800;
  font-display: swap;
  src: url('/fonts/VisbyRoundCF-ExtraBold.woff2') format('woff2'),
       url('/fonts/VisbyRoundCF-ExtraBold.woff') format('woff');
}

@font-face {
  font-family: 'Visby Round CF';
  font-style: normal;
  font-weight: 900;
  font-display: swap;
  src: url('/fonts/VisbyRoundCF-Heavy.woff2') format('woff2'),
       url('/fonts/VisbyRoundCF-Heavy.woff') format('woff');
}

:root {
  /* Casino/Slot Machine color palette */
  --casino-gold: #FFD700;
  --casino-yellow: #FFFF00;
  --casino-orange: #FF8C00;
  --casino-red: #D50000;
  --casino-purple: #4A0E4E;
  --casino-dark-purple: #2D0A30;
  --casino-pink: #FF1493;
  --casino-green: #00A651;
  --casino-blue: #0066CC;
  --casino-black: #000000;
  --casino-white: #FFFFFF;
  
  /* Legacy colors for compatibility */
  --ticket-yellow: #FFD700;
  --ticket-red: #D50000;
  --ticket-blue: #0066CC;
  --ticket-black: #000000;
  --ticket-orange: #FF6B00;
  --ticket-green: #00A651;
  --ticket-purple: #8A2BE2;
  --ticket-beige: #F5E9C9;
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    font-family: "Visby Round CF", "SF Pro Display", "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
    letter-spacing: 0.3px;
    overflow-x: hidden;
    background-color: var(--casino-dark-purple);
    color: var(--casino-gold);
    font-weight: 400;
  }
}

html, body {
  min-height: 100%;
  height: 100%;
  overflow-y: auto;
}

/* Grid Background */
.grid-background {
  background-color: var(--casino-dark-purple);
  background-image: 
    linear-gradient(rgba(255, 215, 0, 0.1) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 215, 0, 0.1) 1px, transparent 1px);
  background-size: 40px 40px;
  background-position: center center;
}

/* Casino Box Styles */
.casino-box {
  border-radius: 12px;
  position: relative;
  overflow: hidden;
  background: linear-gradient(145deg, var(--casino-purple), var(--casino-dark-purple));
  border: 3px solid var(--casino-gold);
  box-shadow: 
    0 0 20px rgba(255, 215, 0, 0.5),
    inset 0 2px 0 rgba(255, 215, 0, 0.3),
    inset 0 -2px 0 rgba(0, 0, 0, 0.3);
}

.casino-box-gold {
  border: 3px solid var(--casino-gold);
  box-shadow: 
    0 0 20px rgba(255, 215, 0, 0.6),
    inset 0 2px 0 rgba(255, 215, 0, 0.4),
    inset 0 -2px 0 rgba(0, 0, 0, 0.4);
}

.casino-box-red {
  border: 3px solid var(--casino-red);
  box-shadow: 
    0 0 20px rgba(213, 0, 0, 0.6),
    inset 0 2px 0 rgba(213, 0, 0, 0.4),
    inset 0 -2px 0 rgba(0, 0, 0, 0.4);
}

.casino-box-pink {
  border: 3px solid var(--casino-pink);
  box-shadow: 
    0 0 20px rgba(255, 20, 147, 0.6),
    inset 0 2px 0 rgba(255, 20, 147, 0.4),
    inset 0 -2px 0 rgba(0, 0, 0, 0.4);
}

.casino-title {
  font-family: "Visby Round CF", "SF Pro Display", sans-serif;
  font-weight: 800;
  text-transform: uppercase;
  color: var(--casino-gold);
  text-shadow: 
    2px 2px 0 var(--casino-black),
    -1px -1px 0 var(--casino-black),
    1px -1px 0 var(--casino-black),
    -1px 1px 0 var(--casino-black),
    0 0 10px var(--casino-gold);
  letter-spacing: 2px;
}

.casino-text-gold {
  color: var(--casino-gold);
  text-shadow: 
    1px 1px 0 var(--casino-black),
    0 0 5px var(--casino-gold);
}

.casino-text-yellow {
  color: var(--casino-yellow);
  text-shadow: 
    1px 1px 0 var(--casino-black),
    0 0 5px var(--casino-yellow);
}

.casino-text-pink {
  color: var(--casino-pink);
  text-shadow: 
    1px 1px 0 var(--casino-black),
    0 0 5px var(--casino-pink);
}

.casino-text-white {
  color: var(--casino-white);
  text-shadow: 
    1px 1px 0 var(--casino-black);
}

.casino-text-green-400 {
  color: #4ade80;
  text-shadow: 
    1px 1px 0 var(--casino-black),
    0 0 5px #4ade80;
}

.casino-button {
  background: linear-gradient(145deg, var(--casino-gold), #DAA520);
  color: var(--casino-black);
  border: 2px solid var(--casino-yellow);
  border-radius: 8px;
  padding: 12px 24px;
  font-family: "Visby Round CF", "SF Pro Display", sans-serif;
  font-weight: 700;
  text-transform: uppercase;
  text-shadow: none;
  box-shadow: 
    0 4px 0 #B8860B,
    0 6px 10px rgba(0, 0, 0, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.3);
  transition: all 0.1s ease;
  letter-spacing: 1px;
}

.casino-button:hover {
  background: linear-gradient(145deg, var(--casino-yellow), var(--casino-gold));
  transform: translateY(2px);
  box-shadow: 
    0 2px 0 #B8860B,
    0 4px 8px rgba(0, 0, 0, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.3);
}

.casino-button:active {
  transform: translateY(4px);
  box-shadow: 
    0 0 0 #B8860B,
    0 2px 4px rgba(0, 0, 0, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.3);
}

/* Star decorations */
.casino-star {
  color: var(--casino-gold);
  filter: drop-shadow(0 0 3px var(--casino-gold));
  animation: twinkle 2s infinite alternate;
}

@keyframes twinkle {
  0% { opacity: 0.7; transform: scale(1); }
  100% { opacity: 1; transform: scale(1.1); }
}

/* Table Styles */
.casino-table thead tr {
  background: linear-gradient(145deg, var(--casino-gold), #DAA520);
  border-bottom: 2px solid var(--casino-yellow);
}

.casino-table th {
  color: var(--casino-black);
  font-family: "Visby Round CF", "SF Pro Display", sans-serif;
  font-weight: 700;
  text-transform: uppercase;
  padding: 12px 16px;
  text-shadow: none;
  letter-spacing: 1px;
}

.casino-table tbody tr {
  background: rgba(74, 14, 78, 0.7);
  border-bottom: 1px solid rgba(255, 215, 0, 0.3);
  transition: background-color 0.3s;
}

.casino-table tbody tr:nth-child(odd) {
  background: rgba(74, 14, 78, 0.9);
}

.casino-table tbody tr:hover {
  background: rgba(255, 20, 147, 0.3);
}

.casino-table td {
  padding: 8px 16px;
  color: var(--casino-gold);
  font-family: "Visby Round CF", "SF Pro Display", sans-serif;
  font-weight: 600;
}

/* Custom scroll bar */
::-webkit-scrollbar {
  width: 12px;
  height: 12px;
}

::-webkit-scrollbar-track {
  background: var(--casino-dark-purple);
  border-radius: 10px;
  border: 1px solid var(--casino-gold);
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(145deg, var(--casino-gold), #DAA520);
  border-radius: 10px;
  border: 2px solid var(--casino-dark-purple);
}

::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(145deg, var(--casino-yellow), var(--casino-gold));
}

/* Custom scrollbar class for specific components */
.custom-scrollbar::-webkit-scrollbar {
  width: 12px;
  height: 12px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: var(--casino-dark-purple);
  border-radius: 10px;
  border: 2px solid var(--casino-gold);
  box-shadow: inset 0 0 6px rgba(255, 215, 0, 0.3);
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background: linear-gradient(145deg, var(--casino-gold), #DAA520);
  border-radius: 10px;
  border: 2px solid var(--casino-dark-purple);
  box-shadow: 
    0 0 10px rgba(255, 215, 0, 0.8),
    inset 0 1px 0 rgba(255, 255, 255, 0.3),
    inset 0 -1px 0 rgba(0, 0, 0, 0.3);
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(145deg, var(--casino-yellow), var(--casino-gold));
  box-shadow: 
    0 0 15px rgba(255, 215, 0, 1),
    inset 0 1px 0 rgba(255, 255, 255, 0.4),
    inset 0 -1px 0 rgba(0, 0, 0, 0.4);
}

.custom-scrollbar::-webkit-scrollbar-corner {
  background: var(--casino-dark-purple);
}

/* Casino Logo Styles */
.casino-logo-container {
  cursor: pointer;
  perspective: 1000px;
  transform-style: preserve-3d;
  position: relative;
  display: inline-block;
  padding: 20px;
}

.logo-text-casino {
  font-family: "Visby Round CF", "SF Pro Display", sans-serif;
  font-size: 4rem;
  font-weight: 900;
  letter-spacing: 4px;
  color: var(--casino-gold);
  text-transform: uppercase;
  position: relative;
  z-index: 3;
  text-shadow:
    3px 3px 0 var(--casino-black),
    -1px -1px 0 var(--casino-black),
    1px -1px 0 var(--casino-black),
    -1px 1px 0 var(--casino-black),
    0 0 20px var(--casino-gold),
    0 0 40px var(--casino-yellow);
}

.logo-shadow-casino {
  font-family: "Visby Round CF", "SF Pro Display", sans-serif;
  font-size: 4rem;
  font-weight: 900;
  letter-spacing: 4px;
  color: rgba(0, 0, 0, 0.6);
  text-transform: uppercase;
  position: absolute;
  top: 8px;
  left: 8px;
  z-index: 1;
  filter: blur(2px);
}

.logo-glow-casino {
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  opacity: 0.8;
  filter: blur(20px);
  background: radial-gradient(
    circle at center,
    var(--casino-gold) 0%,
    var(--casino-yellow) 30%,
    transparent 70%
  );
  z-index: 1;
  pointer-events: none;
}

/* Slot machine reel effect */
.slot-reel {
  background: linear-gradient(180deg, 
    var(--casino-gold) 0%,
    var(--casino-yellow) 25%,
    var(--casino-orange) 50%,
    var(--casino-pink) 75%,
    var(--casino-red) 100%);
  border-radius: 50%;
  position: relative;
}

.slot-reel::before {
  content: '';
  position: absolute;
  top: 10%;
  left: 10%;
  right: 10%;
  bottom: 10%;
  border-radius: 50%;
  background: var(--casino-dark-purple);
  z-index: 1;
}

/* Responsiveness */
@media (max-width: 768px) {
  .logo-text-casino {
    font-size: 2.5rem;
    letter-spacing: 2px;
  }
  
  .logo-shadow-casino {
    font-size: 2.5rem;
    letter-spacing: 2px;
  }
  
  .casino-button {
    padding: 8px 16px;
    font-size: 0.9rem;
  }
}

/* Input styles */
.casino-input {
  background: var(--casino-dark-purple);
  border: 2px solid var(--casino-gold);
  color: var(--casino-gold);
  border-radius: 6px;
  font-family: "Visby Round CF", "SF Pro Display", sans-serif;
  font-weight: 600;
}

.casino-input:focus {
  border-color: var(--casino-yellow);
  box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
  outline: none;
}

.casino-input::placeholder {
  color: rgba(255, 215, 0, 0.6);
}

/* Switch component customization */
[data-radix-switch-root] {
  background-color: var(--casino-dark-purple) !important;
  border-color: var(--casino-gold) !important;
}

[data-radix-switch-root][data-state="checked"] {
  background-color: var(--casino-gold) !important;
}

[data-radix-switch-thumb] {
  background-color: var(--casino-white) !important;
}

[data-radix-switch-root][data-state="checked"] [data-radix-switch-thumb] {
  background-color: var(--casino-black) !important;
}

/* Disabled switch */
[data-radix-switch-root][disabled] {
  opacity: 0.5 !important;
  cursor: not-allowed !important;
}
</file>

<file path="app/layout.tsx">
import './globals.css';
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import { Providers } from '@/components/Providers'; // Import the new Providers

const inter = Inter({ subsets: ['latin'] });

// ✅ Correct Next.js metadata export
export const metadata = {
  title: "Jackpot.zip",
  description: "Join the thrilling jackpot.zip game and seize your chance to win amazing prizes!",
  keywords: ["jackpot", "zip", "game", "win", "prizes", "solana"],
  authors: [{ name: "Jackpot.zip" }],
  openGraph: {
    title: "Jackpot.zip",
    description: "Join the thrilling jackpot.zip game and seize your chance to win amazing prizes!",
    url: "https://jackpotzip.xyz",
    type: "website",
    images: [
      {
        url: "https://jackpotzip.xyz/og-image.jpg",
        width: 1200,
        height: 630,
        alt: "Jackpot.zip Game"
      }
    ]
  },
  twitter: {
    card: "summary_large_image",
    site: "@jackpotdotzip",
    title: "Jackpot.zip",
    description: "Join the thrilling jackpot.zip game and seize your chance to win amazing prizes!",
    image: "https://jackpotzip.xyz/twitter-image.jpg"
  }
};


export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        {/* Preload Visby Round font files */}
        <link rel="preload" href="/fonts/VisbyRoundCF-Regular.woff2" as="font" type="font/woff2" crossOrigin="anonymous" />
        <link rel="preload" href="/fonts/VisbyRoundCF-Bold.woff2" as="font" type="font/woff2" crossOrigin="anonymous" />
        <link rel="preload" href="/fonts/VisbyRoundCF-Heavy.woff2" as="font" type="font/woff2" crossOrigin="anonymous" />
      </head>
      <body className={inter.className}>
        <Providers> {/* Use the new Privy-based Providers component */}
          {children}
        </Providers>
      </body>
    </html>
  );
}
</file>

<file path="app/page.tsx">
import { Metadata } from 'next';
import { ClientPageContent } from '@/components/ClientPageContent';

export const metadata: Metadata = {
  title: "Jackpot.zip - Play Now",
  description: "Join the thrilling jackpot.zip game and seize your chance to win amazing prizes!",
};

export default function Home() {
  return <ClientPageContent />;
}
</file>

<file path="components/layouts/DesktopLayout.tsx">
"use client";

import { LeftColumn } from "../LeftColumn";
import { CenterColumn } from "../CenterColumn";
import { RightColumn } from "../RightColumn";

export function DesktopLayout() {
  return (
    <div className="w-full h-full grid grid-rows-[1fr] gap-1 p-2">
      {/* Main Content Row */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-2 w-full h-full min-h-0">
        {/* Left Column - Total Deposits, Current Round, Past Winners */}
        <div className="md:col-span-1 h-full">
          <LeftColumn />
        </div>

        {/* Center Column - Donut Chart + Token Portfolio (Desktop) */}
        <div className="md:col-span-2 w-full max-w-full min-w-0 h-full min-h-0 z-1">
          <CenterColumn />
        </div>

        {/* Right Column - Largest Win + Chat + Logo */}
        <div className="md:col-span-1 w-full max-w-full min-w-0 overflow-hidden h-full flex flex-col">
          <RightColumn />
        </div>
      </div>
    </div>
  );
}
</file>

<file path="components/layouts/MobileLayout.tsx">
"use client";

import { motion, AnimatePresence } from "framer-motion";
import { CenterColumn } from "../CenterColumn";
import { LeftColumn } from "../LeftColumn";
import { ChatSection } from "../ChatSection";
import { useUIStore } from "@/stores/uiStore";

export function MobileLayout() {
  const { activeTab, setActiveTab } = useUIStore();

  return (
    <div className="w-full h-full flex flex-col">
      {/* Game Section - Always visible (50vh) */}
      <div className="h-[50vh] p-2">
        <CenterColumn />
      </div>

      {/* Tab Navigation - Clean rounded corners without top indicator */}
      <div className="bg-gradient-to-r from-[#4A0E4E] to-[#2D0A30] border-t-2 border-[#FFD700] border-b-2 border-[#FFD700] flex-shrink-0 rounded-t-xl">
        <div className="flex">
          {[
            { key: 'deposits', label: 'Current Round' },
            { key: 'chat', label: 'Chat' }
          ].map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key as any)}
              className={`flex-1 py-3 px-4 text-center transition-all duration-200 relative ${
                activeTab === tab.key
                  ? 'bg-[#FFD700] text-black'
                  : 'text-[#FFD700] bg-[#FFD70020] hover:bg-[#FFD70030]'
              } ${tab.key === 'deposits' ? 'rounded-tl-xl' : ''} ${tab.key === 'chat' ? 'rounded-tr-xl' : ''}`}
              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}
            >
              {/* Tab label */}
              <div className={`text-sm font-black uppercase tracking-wider ${
                activeTab === tab.key ? 'text-black' : 'text-[#FFD700]'
              }`}>
                {tab.label}
              </div>
              
              {/* Bottom border indicator only - preserves rounded corners */}
              {activeTab === tab.key && (
                <motion.div
                  layoutId="activeTabBottom"
                  className="absolute bottom-0 left-0 right-0 h-1 bg-[#FFFF00]"
                  transition={{ type: "spring", stiffness: 300, damping: 30 }}
                />
              )}
            </button>
          ))}
        </div>
      </div>

      {/* Unified Blurred Background Container - Extends to bottom edge */}
      <div className="h-[calc(50vh-4rem)] overflow-hidden">
        <div 
          className="h-full w-full bg-gradient-to-b from-[#4A0E4E]/60 to-[#2D0A30]/60 overflow-hidden"
          style={{ backdropFilter: 'blur(10px)' }}
        >
          <AnimatePresence mode="wait">
            {activeTab === 'deposits' && (
              <motion.div
                key="deposits"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20 }}
                transition={{ duration: 0.3 }}
                className="h-full p-4"
              >
                <LeftColumn isMobile={true} />
              </motion.div>
            )}

            {activeTab === 'chat' && (
              <motion.div
                key="chat"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                transition={{ duration: 0.3 }}
                className="h-full p-4"
              >
                <ChatSection isMobile={true} />
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="components/svg/purplebackground.svg">
<svg viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <!-- Main glossy gradient -->
    <linearGradient id="glossyPurple" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#FF66FF;stop-opacity:1" />
      <stop offset="15%" style="stop-color:#E055E0;stop-opacity:1" />
      <stop offset="40%" style="stop-color:#C044C0;stop-opacity:1" />
      <stop offset="60%" style="stop-color:#A033A0;stop-opacity:1" />
      <stop offset="80%" style="stop-color:#802280;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#601160;stop-opacity:1" />
    </linearGradient>
    
    <!-- Top highlight for glossy effect -->
    <linearGradient id="topHighlight" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#FFFFFF;stop-opacity:0.4" />
      <stop offset="30%" style="stop-color:#FFFFFF;stop-opacity:0.2" />
      <stop offset="50%" style="stop-color:#FFFFFF;stop-opacity:0" />
      <stop offset="100%" style="stop-color:#FFFFFF;stop-opacity:0" />
    </linearGradient>
    
    <!-- Bottom shine -->
    <linearGradient id="bottomShine" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#FFFFFF;stop-opacity:0" />
      <stop offset="70%" style="stop-color:#FFFFFF;stop-opacity:0" />
      <stop offset="85%" style="stop-color:#FFFFFF;stop-opacity:0.1" />
      <stop offset="100%" style="stop-color:#FFFFFF;stop-opacity:0.3" />
    </linearGradient>
  </defs>
  
  <!-- Base purple gradient -->
  <rect width="100%" height="100%" fill="url(#glossyPurple)" />
  
  <!-- Top glossy highlight -->
  <rect width="100%" height="50%" fill="url(#topHighlight)" />
  
  <!-- Bottom subtle shine -->
  <rect width="100%" height="30%" y="70%" fill="url(#bottomShine)" />
</svg>
</file>

<file path="components/svg/PurpleBackground.tsx">
import React from "react";

const PurpleBackground: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg" {...props}>
    <defs>
      {/* Main glossy gradient */}
      <linearGradient id="glossyPurple" x1="0%" y1="0%" x2="0%" y2="100%">
        <stop offset="0%" style={{ stopColor: '#FF66FF', stopOpacity: 1 }} />
        <stop offset="15%" style={{ stopColor: '#E055E0', stopOpacity: 1 }} />
        <stop offset="40%" style={{ stopColor: '#C044C0', stopOpacity: 1 }} />
        <stop offset="60%" style={{ stopColor: '#A033A0', stopOpacity: 1 }} />
        <stop offset="80%" style={{ stopColor: '#802280', stopOpacity: 1 }} />
        <stop offset="100%" style={{ stopColor: '#601160', stopOpacity: 1 }} />
      </linearGradient>
      {/* Top highlight for glossy effect */}
      <linearGradient id="topHighlight" x1="0%" y1="0%" x2="0%" y2="100%">
        <stop offset="0%" style={{ stopColor: '#FFFFFF', stopOpacity: 0.4 }} />
        <stop offset="30%" style={{ stopColor: '#FFFFFF', stopOpacity: 0.2 }} />
        <stop offset="50%" style={{ stopColor: '#FFFFFF', stopOpacity: 0 }} />
        <stop offset="100%" style={{ stopColor: '#FFFFFF', stopOpacity: 0 }} />
      </linearGradient>
      {/* Bottom shine */}
      <linearGradient id="bottomShine" x1="0%" y1="0%" x2="0%" y2="100%">
        <stop offset="0%" style={{ stopColor: '#FFFFFF', stopOpacity: 0 }} />
        <stop offset="70%" style={{ stopColor: '#FFFFFF', stopOpacity: 0 }} />
        <stop offset="85%" style={{ stopColor: '#FFFFFF', stopOpacity: 0.1 }} />
        <stop offset="100%" style={{ stopColor: '#FFFFFF', stopOpacity: 0.3 }} />
      </linearGradient>
    </defs>
    {/* Base purple gradient */}
    <rect width="100%" height="100%" fill="url(#glossyPurple)" />
    {/* Top glossy highlight */}
    <rect width="100%" height="50%" fill="url(#topHighlight)" />
    {/* Bottom subtle shine */}
    <rect width="100%" height="30%" y="70%" fill="url(#bottomShine)" />
  </svg>
);

export default PurpleBackground;
</file>

<file path="components/tokenSelector/DesktopTokenSelector.tsx">
/* components/tokenSelector/DesktopTokenSelector.tsx */
"use client";

import { useState, useMemo, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import {
  Search,
  Plus,
  Minus,
  DollarSign,
  Coins,
  TrendingUp,
  CheckCircle,
  Circle,
  Activity,
  Settings,
  Info
} from "lucide-react";
import Image from "next/image";
import { TokenRow } from "@/lib/tokenUtils";
import {
  formatTokenAmountForDisplay,
  formatUSDValueForDisplay,
  calculateTotalSelectedUSD,
  calculateTokenUSDValueSafe,
  sortTokensByUSDValue,
  filterTokensBySearch,
} from "@/lib/tokenSelectorUtils";
import { 
  calculateTokenAmountFromUSD,
  calculateMaxUSDValue,
  calculateTokenUSDValue
} from "@/lib/priceCalculations";
import { useTokenStore } from "@/stores/tokenStore";
import { useSettingsStore } from "@/stores/settingsStore";
import { useUIStore } from "@/stores/uiStore";
import { createFocusHandlers } from "@/lib/inputHandlers";

interface DesktopTokenSelectorProps {
  tokens: TokenRow[];
  tokenPricesInSol: Record<string, number | null>;
  solPrice: number | null;
  loading?: boolean;
  error?: string | null;
}

export function DesktopTokenSelector({
  tokens,
  tokenPricesInSol = {}, // Provide default to prevent undefined errors
  solPrice = null,
  loading = false,
  error = null,
}: DesktopTokenSelectorProps) {
  /* ----------------------------- Zustand stores ---------------------------- */
  const { selectedTokens, addToken, removeToken, updateTokenAmount } =
    useTokenStore();
    
  const { showAdvancedControls, autoSelectOptimalAmounts } =
    useSettingsStore();

  const { setInputFocus, focusedInputs } = useUIStore();

  /* ------------------------------- Local state ----------------------------- */
  const [searchTerm, setSearchTerm] = useState("");
  const [sortBy, setSortBy] = useState<"name" | "balance" | "value">("value");
  const [bulkSelectPercentage, setBulkSelectPercentage] = useState(50);
  const [showPriceImpact, setShowPriceImpact] = useState(false);

  // Focus handlers
  const { handleInputFocus, handleInputBlur, isInputFocused } = createFocusHandlers(
    setInputFocus,
    focusedInputs
  );

  /* --------------------------- Memoised selectors -------------------------- */
  const { filteredTokens, totalSelectedUSD } = useMemo(() => {
    /* Filter by search */
    let filtered = filterTokensBySearch(tokens, searchTerm);

    /* Sort */
    switch (sortBy) {
      case "name":
        filtered.sort((a, b) => a.symbol.localeCompare(b.symbol));
        break;
      case "balance":
        filtered.sort((a, b) => b.amount - a.amount);
        break;
      case "value":
      default:
        filtered = sortTokensByUSDValue(filtered, tokenPricesInSol, solPrice);
        break;
    }

    const totalUSD = calculateTotalSelectedUSD(
      selectedTokens,
      tokenPricesInSol,
      solPrice,
    );

    return { filteredTokens: filtered, totalSelectedUSD: totalUSD };
  }, [
    tokens,
    searchTerm,
    sortBy,
    selectedTokens,
    tokenPricesInSol,
    solPrice,
  ]);

  /* -------------------------- Token-selection helpers ---------------------- */
  const handleSelectToken = useCallback(
    (token: TokenRow) => {
      const defaultAmount = autoSelectOptimalAmounts
        ? token.amount * 0.5 // 50%
        : token.amount * 0.25; // 25%

      addToken({ ...token, selectedAmount: defaultAmount });
    },
    [addToken, autoSelectOptimalAmounts],
  );

  const handleDeselectToken = useCallback(
    (mint: string) => {
      removeToken(mint);
    },
    [removeToken],
  );

  const handleUpdateAmount = useCallback(
    (mint: string, amount: number) => {
      if (amount <= 0) {
        handleDeselectToken(mint);
      } else {
        updateTokenAmount(mint, amount);
      }
    },
    [updateTokenAmount, handleDeselectToken],
  );

  const handleBulkSelect = useCallback(() => {
    const unselectedTokens = filteredTokens.filter(
      (token) => !selectedTokens.some((sel) => sel.mint === token.mint),
    );

    unselectedTokens.slice(0, 10).forEach((token) => {
      const amount = (token.amount * bulkSelectPercentage) / 100;
      addToken({ ...token, selectedAmount: amount });
    });
  }, [filteredTokens, selectedTokens, bulkSelectPercentage, addToken]);

  const isTokenSelected = useCallback(
    (mint: string) => selectedTokens.some((t) => t.mint === mint),
    [selectedTokens],
  );

  const getSelectedTokenAmount = useCallback(
    (mint: string) => selectedTokens.find((t) => t.mint === mint)?.selectedAmount ?? 0,
    [selectedTokens],
  );

  // Handle token amount input
  const handleTokenInput = useCallback((mint: string, value: string) => {
    const token = tokens.find(t => t.mint === mint);
    if (!token) return;
    
    if (value === '' || value === '.') {
      handleUpdateAmount(mint, 0);
      return;
    }
    
    if (value.endsWith('.') && !isNaN(parseFloat(value.slice(0, -1)))) {
      const numValue = parseFloat(value.slice(0, -1));
      const clampedValue = Math.min(Math.max(0, numValue), token.amount);
      handleUpdateAmount(mint, clampedValue);
      return;
    }
    
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return;
    
    const clampedValue = Math.min(Math.max(0, numValue), token.amount);
    handleUpdateAmount(mint, clampedValue);
  }, [tokens, handleUpdateAmount]);

  // Handle USD amount input
  const handleUSDInput = useCallback((mint: string, value: string) => {
    const token = tokens.find(t => t.mint === mint);
    const tokenPriceInSol = tokenPricesInSol[mint];
    if (!token || !tokenPriceInSol || !solPrice) return;
    
    const maxUSDValue = calculateMaxUSDValue(token, tokenPriceInSol, solPrice);
    
    if (value === '' || value === '.') {
      handleUpdateAmount(mint, 0);
      return;
    }
    
    if (value.endsWith('.') && !isNaN(parseFloat(value.slice(0, -1)))) {
      const usdValue = parseFloat(value.slice(0, -1));
      const clampedValue = Math.min(Math.max(0, usdValue), maxUSDValue);
      const tokenAmount = calculateTokenAmountFromUSD(token, clampedValue, tokenPriceInSol, solPrice);
      if (tokenAmount !== null) {
        handleUpdateAmount(mint, Math.min(tokenAmount, token.amount));
      }
      return;
    }
    
    const usdValue = parseFloat(value);
    if (isNaN(usdValue)) return;
    
    const clampedValue = Math.min(Math.max(0, usdValue), maxUSDValue);
    const tokenAmount = calculateTokenAmountFromUSD(token, clampedValue, tokenPriceInSol, solPrice);
    if (tokenAmount !== null) {
      handleUpdateAmount(mint, Math.min(tokenAmount, token.amount));
    }
  }, [tokens, tokenPricesInSol, solPrice, handleUpdateAmount]);

  /* ------------------------------ Loading / error -------------------------- */
  if (loading) {
    return (
      <Card className="casino-box casino-box-gold h-full">
        <CardContent className="flex items-center justify-center h-full">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#FFD700] mx-auto"></div>
            <div className="mt-2 text-sm casino-text-gold">Loading tokens…</div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="casino-box casino-box-gold h-full">
        <CardContent className="flex items-center justify-center h-full">
          <div className="text-center text-red-400">
            <div className="text-sm">Error: {error}</div>
          </div>
        </CardContent>
      </Card>
    );
  }

  /* ------------------------------------------------------------------------ */
  /*                              MAIN RENDER                                 */
  /* ------------------------------------------------------------------------ */
  return (
    <Card className="casino-box casino-box-gold h-full flex flex-col overflow-hidden">
      {/* ------------------------------- Header ------------------------------ */}
      <CardHeader className="p-4 border-b-2 border-[#FFD700]">
        {/* Search / sort controls */}
        <div className="space-y-3">
          <div className="flex gap-2">
            {/* Search input */}
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 casino-text-gold" />
              <Input
                placeholder="Search tokens…"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="casino-input pl-10"
              />
            </div>

            {/* Sort dropdown */}
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value as any)}
              className="casino-input px-3 py-2 font-bold"
              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}
            >
              <option value="value">By Value</option>
              <option value="balance">By Balance</option>
              <option value="name">By Name</option>
            </select>
          </div>

          {/* Display options */}
          {showAdvancedControls && (
            <div className="flex justify-between items-center">
              <div className="flex items-center gap-2">
                <Activity className="h-4 w-4 casino-text-gold" />
                <span className="text-sm casino-text-yellow font-bold">Show Price Impact</span>
                <Switch 
                  checked={showPriceImpact} 
                  onCheckedChange={setShowPriceImpact}
                />
              </div>
            </div>
          )}

          {/* Advanced controls */}
          {showAdvancedControls && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              className="border-t border-[#FFD700]/30 pt-3"
            >
              <div className="flex items-center gap-3">
                <div className="flex items-center gap-2">
                  <Settings className="h-4 w-4 casino-text-gold" />
                  <span className="text-sm casino-text-yellow font-bold">
                    Bulk Select:
                  </span>
                </div>

                <div className="flex items-center gap-2">
                  <Slider
                    value={[bulkSelectPercentage]}
                    onValueChange={([v]) => setBulkSelectPercentage(v)}
                    max={100}
                    min={0}
                    step={25}
                    className="w-32"
                  />
                  <span className="text-sm casino-text-gold font-bold w-8">
                    {bulkSelectPercentage}%
                  </span>
                </div>

                <Button
                  onClick={handleBulkSelect}
                  className="casino-button text-xs px-3 py-1"
                >
                  Select Top 10
                </Button>
              </div>
            </motion.div>
          )}
        </div>
      </CardHeader>

      {/* --------------------------- Token list ------------------------------ */}
      <CardContent className="flex-1 p-0 min-h-0 overflow-hidden">
        <ScrollArea className="h-full">
          <div className="p-4 space-y-2">
            <AnimatePresence initial={false}>
              {filteredTokens.map((token) => {
                const isSelected = isTokenSelected(token.mint);
                const selectedAmount = getSelectedTokenAmount(token.mint);
                const tokenPriceInSol = tokenPricesInSol?.[token.mint] ?? null;
                
                // Calculate USD values - always calculate since USD values are always shown
                let tokenUSDValue: number | null = null;
                let selectedUSDValue: number | null = null;
                let maxUSDValue = 0;

                if (tokenPriceInSol && solPrice) {
                  tokenUSDValue = calculateTokenUSDValue(token, token.amount, tokenPriceInSol, solPrice);
                  
                  if (isSelected) {
                    selectedUSDValue = calculateTokenUSDValue(token, selectedAmount, tokenPriceInSol, solPrice);
                  }
                  
                  maxUSDValue = calculateMaxUSDValue(token, tokenPriceInSol, solPrice);
                }

                return (
                  <motion.div
                    key={token.mint}
                    layout
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    className={`rounded-xl border-2 transition-all duration-200 overflow-hidden ${
                      isSelected
                        ? "border-[#FFD700]"
                        : "border-[#FFD700]/20 hover:border-[#FFD700]/60"
                    }`}
                    style={{
                      background: isSelected
                        ? "linear-gradient(145deg, rgba(255, 215, 0, 0.1), rgba(255, 255, 0, 0.05))"
                        : "linear-gradient(145deg, rgba(74, 14, 78, 0.3), rgba(45, 10, 48, 0.2))",
                    }}
                  >
                    {/* Main Token Row */}
                    <div className="p-3">
                      <div className="flex items-center gap-3">
                        {/* Select / deselect toggle */}
                        <motion.div
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => {
                            isSelected
                              ? handleDeselectToken(token.mint)
                              : handleSelectToken(token);
                          }}
                          className="cursor-pointer"
                        >
                          {isSelected ? (
                            <CheckCircle className="h-5 w-5 text-[#FFD700]" fill="currentColor" />
                          ) : (
                            <Circle className="h-5 w-5 text-[#FFD700]/60 hover:text-[#FFD700]" />
                          )}
                        </motion.div>

                        {/* Token avatar + info */}
                        <div className="flex items-center gap-3 flex-1 min-w-0">
                          <div className="relative w-8 h-8 flex-shrink-0">
                            <Image
                              src={token.image}
                              alt={token.symbol}
                              fill
                              className="rounded-full object-cover"
                              onError={(e) =>
                                ((e.target as HTMLImageElement).src =
                                  "/jackpotlogo.png")
                              }
                            />
                          </div>

                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2">
                              <span
                                className="font-black casino-text-gold text-base truncate"
                                style={{
                                  fontFamily:
                                    "Visby Round CF, SF Pro Display, sans-serif",
                                }}
                              >
                                {token.symbol}
                              </span>
                              {tokenUSDValue && tokenUSDValue > 1000 && (
                                <TrendingUp className="h-3 w-3 text-green-400" />
                              )}
                            </div>
                            
                            {/* Token amount and USD value side by side */}
                            <div className="flex items-center gap-2 text-xs">
                              <span className="casino-text-yellow font-bold">
                                {formatTokenAmountForDisplay(token.amount, token.decimals)}
                              </span>
                              {tokenUSDValue && tokenUSDValue > 0 && (
                                <>
                                  <span className="text-gray-500">•</span>
                                  <span className="casino-text-green-400 font-bold">
                                    {formatUSDValueForDisplay(tokenUSDValue)}
                                  </span>
                                </>
                              )}
                            </div>
                          </div>
                        </div>

                        {/* Actions on right */}
                        {isSelected ? (
                          <div className="flex items-center gap-3">
                            {/* Input fields for selected tokens */}
                            <div className="flex items-center gap-2">
                              {/* Token amount input */}
                              <div className="relative w-24">
                                <Input
                                  type="number"
                                  value={selectedAmount}
                                  onChange={(e) => handleTokenInput(token.mint, e.target.value)}
                                  onFocus={() => handleInputFocus(`token-${token.mint}`)}
                                  onBlur={() => handleInputBlur(`token-${token.mint}`)}
                                  min={0}
                                  max={token.amount}
                                  step={1 / Math.pow(10, Math.min(token.decimals, 6))}
                                  className={`casino-input text-xs text-center font-bold h-8 ${
                                    isInputFocused(`token-${token.mint}`) ? 'opacity-100' : 'opacity-0'
                                  }`}
                                />
                                
                                {!isInputFocused(`token-${token.mint}`) && (
                                  <div
                                    onClick={() => handleInputFocus(`token-${token.mint}`)}
                                    className="absolute inset-0 flex items-center justify-center text-xs casino-text-gold font-bold cursor-pointer bg-[var(--casino-dark-purple)] border-2 border-[var(--casino-gold)] rounded-md"
                                  >
                                    {formatTokenAmountForDisplay(selectedAmount, token.decimals)}
                                  </div>
                                )}
                              </div>

                              {/* USD value input - show if we have valid USD data */}
                              {selectedUSDValue && selectedUSDValue > 0 && (
                                <div className="relative w-20">
                                  <Input
                                    type="number"
                                    value={selectedUSDValue.toFixed(2)}
                                    onChange={(e) => handleUSDInput(token.mint, e.target.value)}
                                    onFocus={() => handleInputFocus(`usd-${token.mint}`)}
                                    onBlur={() => handleInputBlur(`usd-${token.mint}`)}
                                    min={0}
                                    max={maxUSDValue}
                                    step={0.01}
                                    className={`casino-input text-xs text-center font-bold h-8 ${
                                      isInputFocused(`usd-${token.mint}`) ? 'opacity-100' : 'opacity-0'
                                    }`}
                                    disabled={!tokenPriceInSol || !solPrice}
                                  />
                                  
                                  {!isInputFocused(`usd-${token.mint}`) && (
                                    <div
                                      onClick={() => handleInputFocus(`usd-${token.mint}`)}
                                      className="absolute inset-0 flex items-center justify-center text-xs casino-text-green-400 font-bold cursor-pointer bg-[var(--casino-dark-purple)] border-2 border-[var(--casino-gold)] rounded-md"
                                    >
                                      {formatUSDValueForDisplay(selectedUSDValue)}
                                    </div>
                                  )}
                                </div>
                              )}
                            </div>

                            {/* Percentage badge */}
                            <Badge className="bg-[#FFD700]/20 text-[#FFD700] border border-[#FFD700]/60 text-xs">
                              {((selectedAmount / token.amount) * 100).toFixed(0)}%
                            </Badge>

                            {/* Remove button */}
                            <motion.button
                              whileHover={{ scale: 1.1 }}
                              whileTap={{ scale: 0.9 }}
                              onClick={() => handleDeselectToken(token.mint)}
                              className="p-1.5 rounded-full bg-[#FF1493]/30 hover:bg-[#FF1493]/60 transition-colors"
                              title="Remove token"
                            >
                              <Minus className="h-4 w-4 text-[#FF1493]" />
                            </motion.button>
                          </div>
                        ) : (
                          /* Add button (when not selected) */
                          <motion.button
                            whileHover={{ scale: 1.1 }}
                            whileTap={{ scale: 0.9 }}
                            onClick={() => handleSelectToken(token)}
                            className="p-1.5 rounded-full bg-[#FFD700] hover:bg-[#FFFF00] transition-colors shadow-lg"
                            title="Add token"
                          >
                            <Plus className="h-4 w-4 text-black" />
                          </motion.button>
                        )}
                      </div>

                      {/* Simple Percentage Slider - shown when selected */}
                      {isSelected && (
                        <motion.div
                          initial={{ height: 0, opacity: 0 }}
                          animate={{ height: "auto", opacity: 1 }}
                          className="mt-3 px-4 pb-1"
                        >
                          <div className="flex items-center gap-2">
                            <div className="w-6 text-xs casino-text-gold text-center font-bold">0%</div>
                            <div className="flex-1 relative py-2">
                              {/* Background Track */}
                              <div className="absolute top-1/2 left-0 right-0 h-1.5 bg-[#4A0E4E] rounded-full transform -translate-y-1/2"></div>
                              
                              {/* Colored Fill */}
                              <div
                                className="absolute top-1/2 left-0 h-1.5 bg-gradient-to-r from-[#FFD700] to-[#FFFF00] rounded-full transform -translate-y-1/2"
                                style={{ width: `${(selectedAmount / token.amount) * 100}%` }}
                              ></div>
                              
                              {/* Actual Slider */}
                              <Slider
                                value={[(selectedAmount / token.amount) * 100]}
                                min={0}
                                max={100}
                                step={1}
                                onValueChange={([percentage]) => {
                                  const amount = (token.amount * percentage) / 100;
                                  updateTokenAmount(token.mint, amount);
                                }}
                                className="slider-casino"
                              />
                            </div>
                            <div className="w-6 text-xs casino-text-gold text-center font-bold">100%</div>
                          </div>
                        </motion.div>
                      )}
                    </div>
                  </motion.div>
                );
              })}
            </AnimatePresence>

            {/* Empty-state */}
            {filteredTokens.length === 0 && (
              <div className="text-center py-8">
                <div className="casino-text-gold font-bold">
                  {searchTerm
                    ? "No tokens match your search"
                    : "No tokens found"}
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
      </CardContent>

      {/* Information footer */}
      {showAdvancedControls && (
        <div className="border-t border-[#FFD700]/50 p-3 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Info className="h-4 w-4 casino-text-gold" />
            <span className="text-xs casino-text-yellow font-bold">
              Click amount values to edit directly
            </span>
          </div>
          
          <div className="flex items-center gap-2">
            <Coins className="h-4 w-4 casino-text-gold" />
            <span className="text-xs casino-text-gold font-bold">
              {formatUSDValueForDisplay(totalSelectedUSD)} total selected
            </span>
          </div>
        </div>
      )}

      {/* Custom slider styling */}
      <style jsx global>{`
        .slider-casino [data-radix-slider-thumb] {
          width: 14px;
          height: 14px;
          background: linear-gradient(45deg, #fbbf24, #f59e0b);
          border: 2px solid #FFFFFF;
          box-shadow: 0 0 10px rgba(255, 215, 0, 0.8);
          cursor: pointer;
          transition: transform 0.1s;
        }
        
        .slider-casino [data-radix-slider-thumb]:hover {
          transform: scale(1.2);
          background: linear-gradient(45deg, #FFFF00, #FFD700);
        }
        
        .slider-casino [data-radix-slider-track] {
          height: 8px;
        }
        
        .slider-casino [data-radix-slider-range] {
          display: none;
        }
      `}</style>
    </Card>
  );
}
</file>

<file path="components/tokenSelector/MobileTokenRow.tsx">
"use client";

import { useState, useEffect, useMemo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Check, X, Edit, Plus, Minus, Coins, ArrowLeftRight } from "lucide-react";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { TokenRow } from "@/lib/tokenUtils";
import { formatAmount } from "@/lib/tokenUtils";
import { calculateMaxUSDValueSafe, formatTokenAmountForDisplay, formatUSDValueForDisplay } from "@/lib/tokenSelectorUtils";
import { 
  handleTokenAmountChange, 
  handleUSDAmountChange, 
  handleSliderChange, 
  updateTokenAmountFromUSD, 
  updateUSDAmountFromToken,
  handleQuickPercentageSelect
} from "@/lib/tokenSelectorHandlers";
import { useUIStore } from "@/stores/uiStore";
import { createFocusHandlers } from "@/lib/inputHandlers";

interface MobileTokenRowProps {
  token: TokenRow;
  isSelected: boolean;
  isExpanded?: boolean;
  onSelect?: () => void;
  onRemove?: () => void;
  onAmountChange?: (amount: number) => void;
  onToggleExpand?: () => void;
  selectedAmount?: number;
  usdValue?: number | null;
  solPrice?: number | null;
  tokenPriceInSol?: number | null;
}

export function MobileTokenRow({
  token,
  isSelected,
  isExpanded = false,
  onSelect,
  onRemove,
  onAmountChange,
  onToggleExpand,
  selectedAmount,
  usdValue,
  solPrice,
  tokenPriceInSol,
}: MobileTokenRowProps) {
  const [tempAmount, setTempAmount] = useState(
    selectedAmount ?? (isSelected ? token.amount * 0.5 : token.amount)
  );
  const [tempUSDAmount, setTempUSDAmount] = useState(0);
  const [lastModified, setLastModified] = useState<'token' | 'usd'>('token');

  // Focus tracking for inputs
  const { setInputFocus, focusedInputs } = useUIStore();
  const { handleInputFocus, handleInputBlur, isInputFocused } = createFocusHandlers(
    setInputFocus,
    focusedInputs
  );

  // Calculate max USD value
  const maxUSDValue = useMemo(() => {
    return calculateMaxUSDValueSafe(token, tokenPriceInSol, solPrice);
  }, [token, tokenPriceInSol, solPrice]);

  useEffect(() => {
    if (selectedAmount !== undefined) setTempAmount(selectedAmount);
  }, [selectedAmount]);

  // Update USD when token amount changes
  useEffect(() => {
    if (lastModified === 'token') {
      updateUSDAmountFromToken(token, tempAmount, tokenPriceInSol, solPrice, setTempUSDAmount);
    }
  }, [tempAmount, solPrice, tokenPriceInSol, token, lastModified]);

  // Update token amount when USD changes
  useEffect(() => {
    if (lastModified === 'usd') {
      updateTokenAmountFromUSD(token, tempUSDAmount, tokenPriceInSol, solPrice, setTempAmount);
    }
  }, [tempUSDAmount, solPrice, tokenPriceInSol, token, lastModified]);

  const confirm = () => {
    if (tempAmount === 0) {
      onRemove?.();
    } else {
      onAmountChange?.(tempAmount);
    }
    onToggleExpand?.();
  };

  // Calculate display amount and USD value
  const displayAmount = isSelected ? (selectedAmount ?? token.amount) : token.amount;
  const displayUSDValue = usdValue !== null && usdValue !== undefined ? 
    Math.floor((displayAmount / token.amount) * usdValue * 100) / 100 : null;

  return (
    <motion.div
      layoutId={token.mint}
      layout
      initial={{ opacity: 0, y: -10 }}
      animate={{ 
        opacity: 1, 
        y: 0,
        backgroundColor: isSelected ? "rgba(255, 215, 0, 0.1)" : "rgba(74, 14, 78, 0.3)"
      }}
      exit={{ opacity: 0, y: -10 }}
      transition={{ 
        type: "spring", 
        stiffness: 300, 
        damping: 25,
        duration: 0.3
      }}
      className={`relative overflow-hidden transition-all duration-300 mb-2 ${
        isSelected
          ? "bg-[#FFD700]/10 border-2 border-[#FFD700]"
          : "border-2 border-transparent hover:border-[#FFD700]/50 hover:bg-[#FFD700]/5"
      }`}
      style={{
        borderRadius: "12px"
      }}
    >
      {/* Main Row Content */}
      <div className="p-3">
        {/* Token Info Row */}
        <div className="flex items-center gap-3">
          {/* Token Image & Info */}
          <div className="flex items-center gap-3 flex-1 min-w-0">
            <div className="relative w-10 h-10 flex-shrink-0">
              <Image
                src={token.image}
                alt={token.symbol}
                fill
                className="rounded-full object-cover"
                onError={(e) =>
                  ((e.target as HTMLImageElement).src = "/jackpotlogo.png")
                }
              />
              {isSelected && (
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="absolute -top-1 -right-1 w-5 h-5 bg-[#FFD700] rounded-full flex items-center justify-center border-2 border-[#2D0A30]"
                >
                  <Check className="h-2.5 w-2.5 text-black" />
                </motion.div>
              )}
            </div>
            
            <div className="flex-1 min-w-0">
              <div
                className="text-base font-black casino-text-gold truncate"
                style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}
              >
                {token.symbol}
              </div>
              
              {/* Token Amount */}
              <div className="text-sm casino-text-yellow font-bold truncate">
                {isSelected 
                  ? `Selected: ${formatAmount(selectedAmount ?? token.amount, token.decimals)}`
                  : `Balance: ${formatAmount(token.amount, token.decimals)}`
                }
              </div>
              
              {/* USD Value */}
              {displayUSDValue !== null && displayUSDValue > 0 && (
                <div className="text-xs casino-text-gold font-semibold truncate opacity-80">
                  {formatUSDValueForDisplay(displayUSDValue)}
                </div>
              )}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex items-center gap-2 flex-shrink-0">
            {isSelected && (
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Button
                  onClick={onToggleExpand}
                  className={`px-3 py-2 transition-all duration-200 font-black text-xs border-2 ${
                    isExpanded 
                      ? "bg-[#FFFF00] hover:bg-[#FFD700] text-black border-[#FFD700]" 
                      : "casino-button border-[#FFD700]"
                  }`}
                  style={{ 
                    fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                    boxShadow: "0 0 8px rgba(255, 215, 0, 0.6)",
                    borderRadius: "12px"
                  }}
                >
                  <Edit className={`h-4 w-4 ${isExpanded ? 'rotate-180' : ''} transition-transform duration-200`} />
                </Button>
              </motion.div>
            )}
            
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Button
                onClick={isSelected ? onRemove : onSelect}
                className={`px-3 py-2 font-black text-xs border-2 transition-all duration-200 ${
                  isSelected 
                    ? "bg-[#FF1493] hover:bg-[#DC143C] text-white border-[#FF1493]" 
                    : "casino-button border-[#FFD700]"
                }`}
                style={{ 
                  fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                  boxShadow: isSelected 
                    ? "0 0 8px rgba(255, 20, 147, 0.6)" 
                    : "0 0 8px rgba(255, 215, 0, 0.6)",
                  borderRadius: "12px"
                }}
              >
                {isSelected ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
              </Button>
            </motion.div>
          </div>
        </div>

        {/* Collapsible Edit Area */}
        <AnimatePresence>
          {isSelected && isExpanded && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              transition={{ 
                type: "spring", 
                stiffness: 300, 
                damping: 25,
                duration: 0.3 
              }}
              className="overflow-hidden"
            >
              <div className="border-t border-[#FFD700]/30 pt-4 mt-3 space-y-4">
                
                {/* Input areas */}
                <div>
                  <div className="text-xs casino-text-yellow font-bold mb-3 text-center">
                    Select Amount
                  </div>
                  
                  {/* Side-by-side inputs */}
                  <div className="flex gap-3">
                    {/* Token Count Input */}
                    <div className="flex-[0.7]">
                      <div className="text-xs casino-text-yellow font-bold mb-2 flex items-center gap-1">
                        <Coins className="h-3 w-3" />
                        Token Amount
                      </div>
                      <div className="space-y-2">
                        <div 
                          className="relative casino-input text-center font-black text-sm"
                          style={{ 
                            background: 'var(--casino-dark-purple)',
                            border: '2px solid var(--casino-gold)',
                            borderRadius: '6px',
                            color: 'var(--casino-gold)',
                            fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                            fontWeight: 600,
                            fontSize: "13px",
                            minHeight: '36px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center'
                          }}
                        >
                          <Input
                            type="number"
                            value={tempAmount.toString()}
                            onChange={(e) => handleTokenAmountChange(token, e.target.value, setTempAmount, setLastModified)}
                            onFocus={() => handleInputFocus(`token-${token.mint}`)}
                            onBlur={() => handleInputBlur(`token-${token.mint}`)}
                            min={0}
                            max={token.amount}
                            step={1 / 10 ** Math.min(token.decimals, 6)}
                            className={`absolute inset-0 w-full h-full text-center font-black bg-transparent border-none outline-none ${
                              isInputFocused(`token-${token.mint}`) ? 'opacity-100 text-[#FFD700]' : 'opacity-0'
                            } transition-opacity duration-150`}
                            style={{ 
                              fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                              fontSize: '13px',
                              color: 'var(--casino-gold)'
                            }}
                            placeholder="0"
                          />
                          
                          {!isInputFocused(`token-${token.mint}`) && (
                            <div
                              className="absolute inset-0 flex items-center justify-center text-center font-black leading-none pointer-events-none"
                              style={{ 
                                fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                textShadow: "0.5px 0.5px 0 #000000",
                                fontSize: '13px',
                                color: 'var(--casino-gold)'
                              }}
                            >
                              {formatTokenAmountForDisplay(tempAmount, token.decimals)}
                            </div>
                          )}
                        </div>
                        <div className="text-xs casino-text-gold font-bold text-center">
                          {((tempAmount / token.amount) * 100).toFixed(0)}% of balance
                        </div>
                      </div>
                    </div>

                    {/* USD Value Input */}
                    <div className="flex-[0.3]">
                      <div className="text-xs casino-text-yellow font-bold mb-2 flex items-center gap-1">
                        <span className="text-green-400">$</span>
                        USD Value
                      </div>
                      <div className="space-y-2">
                        <div 
                          className="relative casino-input text-center font-black text-sm"
                          style={{ 
                            background: 'var(--casino-dark-purple)',
                            border: '2px solid var(--casino-gold)',
                            borderRadius: '6px',
                            color: 'var(--casino-gold)',
                            fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                            fontWeight: 600,
                            fontSize: "13px",
                            minHeight: '36px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            opacity: (!solPrice || !tokenPriceInSol) ? 0.5 : 1
                          }}
                        >
                          <Input
                            type="number"
                            value={tempUSDAmount.toString()}
                            onChange={(e) => handleUSDAmountChange(token, e.target.value, maxUSDValue, setTempUSDAmount, setLastModified)}
                            onFocus={() => handleInputFocus(`usd-${token.mint}`)}
                            onBlur={() => handleInputBlur(`usd-${token.mint}`)}
                            min={0}
                            max={maxUSDValue}
                            step={0.01}
                            className={`absolute inset-0 w-full h-full text-center font-black bg-transparent border-none outline-none ${
                              isInputFocused(`usd-${token.mint}`) ? 'opacity-100 text-[#FFD700]' : 'opacity-0'
                            } transition-opacity duration-150`}
                            style={{ 
                              fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                              fontSize: '13px',
                              color: 'var(--casino-gold)'
                            }}
                            placeholder="0"
                            disabled={!solPrice || !tokenPriceInSol}
                          />
                          
                          {!isInputFocused(`usd-${token.mint}`) && (
                            <div
                              className="absolute inset-0 flex items-center justify-center text-center font-black leading-none pointer-events-none"
                              style={{ 
                                fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                textShadow: "0.5px 0.5px 0 #000000",
                                fontSize: '13px',
                                color: 'var(--casino-gold)'
                              }}
                            >
                              {formatUSDValueForDisplay(tempUSDAmount)}
                            </div>
                          )}
                        </div>
                        {(!solPrice || !tokenPriceInSol) ? (
                          <div className="text-xs text-red-400 text-center leading-tight">
                            Price unavailable
                          </div>
                        ) : (
                          <div className="text-xs casino-text-green-400 font-bold text-center">
                            Max: {formatUSDValueForDisplay(maxUSDValue)}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Enhanced Slider */}
                <div>
                  <div className="text-xs casino-text-yellow font-bold mb-2">Quick Select</div>
                  <div className="px-2 py-2">
                    <div className="relative">
                      <div 
                        className="absolute top-1/2 left-0 right-0 h-3 bg-gradient-to-r from-[#FFD700] to-[#FFFF00] rounded-full border-2 border-[#000000] transform -translate-y-1/2"
                        style={{
                          boxShadow: `
                            inset 0 2px 4px rgba(0, 0, 0, 0.5),
                            0 0 8px rgba(255, 215, 0, 0.6)
                          `
                        }}
                      />
                      
                      <div className="absolute top-1/2 left-0 right-0 transform -translate-y-1/2 flex justify-between px-1">
                        {[0, 25, 50, 75, 100].map((percent) => (
                          <div
                            key={percent}
                            className="w-2 h-2 bg-[#000000] border border-[#FFD700] rounded-full cursor-pointer"
                            style={{
                              boxShadow: '0 0 4px rgba(255, 215, 0, 0.8)'
                            }}
                            onClick={() => handleQuickPercentageSelect(token, percent, setTempAmount, setLastModified)}
                          />
                        ))}
                      </div>
                      
                      <Slider
                        value={[tempAmount]}
                        min={0}
                        max={token.amount}
                        step={1 / 10 ** Math.min(token.decimals, 6)}
                        onValueChange={([v]) => handleSliderChange(token, v, setTempAmount, setLastModified)}
                        className="mobile-custom-slider relative z-10"
                      />
                    </div>
                    
                    <div className="flex justify-between text-xs casino-text-yellow font-bold mt-2 px-1">
                      <span>0</span>
                      <span>25%</span>
                      <span>50%</span>
                      <span>75%</span>
                      <span>100%</span>
                    </div>
                  </div>
                </div>

                {/* Selected Amount Summary & Action Buttons */}
                <div 
                  className="flex items-center justify-between p-3 border border-[#FFD700]/40"
                  style={{
                    background: 'rgba(74, 14, 78, 0.3)',
                    borderRadius: '16px',
                    backdropFilter: 'blur(10px)'
                  }}
                >
                  <div>
                    <div className="text-base font-black casino-text-gold" 
                         style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                      {formatAmount(tempAmount, token.decimals)} {token.symbol}
                    </div>
                    <div className="text-xs casino-text-yellow font-bold">Selected Amount</div>
                    {tempUSDAmount > 0 && (
                      <div className="text-xs casino-text-green-400 font-semibold">
                        ≈ {formatUSDValueForDisplay(tempUSDAmount)}
                      </div>
                    )}
                  </div>
                  
                  <div className="flex gap-2">
                    <motion.div
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <Button
                        onClick={onToggleExpand}
                        className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white text-xs font-black border-2 border-gray-500 transition-all duration-200"
                        style={{ 
                          fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                          boxShadow: "0 0 8px rgba(100, 100, 100, 0.6)",
                          borderRadius: "12px"
                        }}
                      >
                        Cancel
                      </Button>
                    </motion.div>
                    
                    <motion.div
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <Button
                        onClick={confirm}
                        className={`px-4 py-2 font-black uppercase text-xs border-2 transition-all duration-200 ${
                          tempAmount === 0
                            ? "bg-[#FF1493] hover:bg-[#DC143C] text-white border-[#FF1493]"
                            : "casino-button border-[#FFD700]"
                        }`}
                        style={{ 
                          fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                          boxShadow: tempAmount === 0
                            ? "0 0 12px rgba(255, 20, 147, 0.8)"
                            : "0 0 12px rgba(255, 215, 0, 0.8)",
                          borderRadius: "12px"
                        }}
                      >
                        {tempAmount === 0 ? (
                          <>
                            <X className="h-3 w-3 mr-1" />
                            Remove
                          </>
                        ) : (
                          <>
                            <Check className="h-3 w-3 mr-1" />
                            Update
                          </>
                        )}
                      </Button>
                    </motion.div>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Enhanced slider styles */}
      <style jsx>{`
        :global(.mobile-custom-slider [data-radix-slider-track]) {
          background: transparent !important;
          height: 16px !important;
          position: relative;
        }
        
        :global(.mobile-custom-slider [data-radix-slider-range]) {
          background: linear-gradient(90deg, #FFD700, #FFFF00) !important;
          height: 16px !important;
          border-radius: 8px !important;
          box-shadow: 
            0 0 12px rgba(255, 215, 0, 0.9),
            inset 0 1px 0 rgba(255, 255, 255, 0.4),
            inset 0 -1px 0 rgba(0, 0, 0, 0.3) !important;
          border: 2px solid #000000 !important;
          position: relative;
        }
        
        :global(.mobile-custom-slider [data-radix-slider-thumb]) {
          width: 28px !important;
          height: 28px !important;
          background: linear-gradient(145deg, #FFD700, #DAA520) !important;
          border: 4px solid #FFFF00 !important;
          border-radius: 50% !important;
          box-shadow: 
            0 0 0 3px #000000,
            0 0 20px rgba(255, 215, 0, 1),
            0 6px 12px rgba(0, 0, 0, 0.4) !important;
          cursor: pointer !important;
          transition: all 0.2s ease !important;
          position: relative !important;
          z-index: 20 !important;
        }
        
        :global(.mobile-custom-slider [data-radix-slider-thumb]:hover) {
          background: linear-gradient(145deg, #FFFF00, #FFD700) !important;
          transform: scale(1.2) !important;
          box-shadow: 
            0 0 0 3px #000000,
            0 0 25px rgba(255, 215, 0, 1),
            0 8px 16px rgba(0, 0, 0, 0.5) !important;
        }
        
        :global(.mobile-custom-slider [data-radix-slider-thumb]:focus) {
          outline: none !important;
          background: linear-gradient(145deg, #FFFF00, #FFD700) !important;
          transform: scale(1.2) !important;
        }
        
        :global(.mobile-custom-slider) {
          width: 100% !important;
          height: 28px !important;
          display: flex !important;
          align-items: center !important;
          position: relative !important;
        }
      `}</style>
    </motion.div>
  );
}
</file>

<file path="components/tokenSelector/TokenRowEditor.tsx">
"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { Button } from "@/components/ui/button";
import { Coins, DollarSign, Check, X } from "lucide-react";
import { TokenRow } from "@/lib/tokenUtils";
import { calculateMaxUSDValueSafe, formatTokenAmountForDisplay, formatUSDValueForDisplay } from "@/lib/tokenSelectorUtils";
import { useUIStore } from "@/stores/uiStore";
import { createFocusHandlers } from "@/lib/inputHandlers";

interface TokenRowEditorProps {
  token: TokenRow;
  initialAmount: number;
  tokenPriceInSol: number | null;
  solPrice: number | null;
  onSave: (amount: number) => void;
  onCancel: () => void;
}

export function TokenRowEditor({
  token,
  initialAmount,
  tokenPriceInSol,
  solPrice,
  onSave,
  onCancel
}: TokenRowEditorProps) {
  // State for editing
  const [tempAmount, setTempAmount] = useState(initialAmount);
  const [tempUSDAmount, setTempUSDAmount] = useState(0);
  const [lastModified, setLastModified] = useState<'token' | 'usd'>('token');
  
  // Get focus management from UI store
  const { setInputFocus, focusedInputs } = useUIStore();
  const { handleInputFocus, handleInputBlur, isInputFocused } = createFocusHandlers(
    setInputFocus,
    focusedInputs
  );
  
  // Calculate max USD value
  const maxUSDValue = calculateMaxUSDValueSafe(token, tokenPriceInSol, solPrice);
  
  // Initialize USD amount on first render
  useEffect(() => {
    if (tokenPriceInSol && solPrice) {
      if (token.mint === 'So11111111111111111111111111111111111111112') {
        // SOL: direct USD calculation
        setTempUSDAmount(tempAmount * solPrice);
      } else {
        // Other tokens: convert through SOL
        const valueInSol = tempAmount * tokenPriceInSol;
        setTempUSDAmount(valueInSol * solPrice);
      }
    }
  }, [token.mint, initialAmount, tokenPriceInSol, solPrice]);
  
  // Update USD when token amount changes
  useEffect(() => {
    if (lastModified === 'token' && tokenPriceInSol && solPrice) {
      let usdValue = 0;
      if (token.mint === 'So11111111111111111111111111111111111111112') {
        // SOL: direct USD calculation
        usdValue = tempAmount * solPrice;
      } else {
        // Other tokens: convert through SOL
        const valueInSol = tempAmount * tokenPriceInSol;
        usdValue = valueInSol * solPrice;
      }
      // Floor to 2 decimal places
      setTempUSDAmount(Math.floor(usdValue * 100) / 100);
    }
  }, [tempAmount, tokenPriceInSol, solPrice, token.mint, lastModified]);
  
  // Update token amount when USD changes
  useEffect(() => {
    if (lastModified === 'usd' && tokenPriceInSol && solPrice && tempUSDAmount > 0) {
      let tokenAmount = 0;
      if (token.mint === 'So11111111111111111111111111111111111111112') {
        // SOL: direct calculation
        tokenAmount = tempUSDAmount / solPrice;
      } else {
        // Other tokens: convert through SOL
        const valueInSol = tempUSDAmount / solPrice;
        tokenAmount = valueInSol / tokenPriceInSol;
      }
      // Clamp to max available
      setTempAmount(Math.min(tokenAmount, token.amount));
    }
  }, [tempUSDAmount, tokenPriceInSol, solPrice, token.mint, token.amount, lastModified]);
  
  // Handle token amount input change
  const handleTokenInput = (value: string) => {
    // Handle empty input or just decimal point
    if (value === '' || value === '.') {
      setTempAmount(0);
      setLastModified('token');
      return;
    }
    
    // Handle input that ends with decimal
    if (value.endsWith('.') && !isNaN(parseFloat(value.slice(0, -1)))) {
      const numValue = parseFloat(value.slice(0, -1));
      const clampedValue = Math.min(Math.max(0, numValue), token.amount);
      setTempAmount(clampedValue);
      setLastModified('token');
      return;
    }
    
    // Handle normal number input
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return;
    
    const clampedValue = Math.min(Math.max(0, numValue), token.amount);
    setTempAmount(clampedValue);
    setLastModified('token');
  };
  
  // Handle USD amount input change
  const handleUSDInput = (value: string) => {
    // Handle empty input or just decimal point
    if (value === '' || value === '.') {
      setTempUSDAmount(0);
      setLastModified('usd');
      return;
    }
    
    // Handle input that ends with decimal
    if (value.endsWith('.') && !isNaN(parseFloat(value.slice(0, -1)))) {
      const numValue = parseFloat(value.slice(0, -1));
      const clampedValue = Math.min(Math.max(0, numValue), maxUSDValue);
      setTempUSDAmount(clampedValue);
      setLastModified('usd');
      return;
    }
    
    // Handle normal number input
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return;
    
    const clampedValue = Math.min(Math.max(0, numValue), maxUSDValue);
    setTempUSDAmount(clampedValue);
    setLastModified('usd');
  };
  
  // Handle percentage selection
  const handlePercentage = (percent: number) => {
    const amount = (token.amount * percent) / 100;
    setTempAmount(amount);
    setLastModified('token');
  };
  
  return (
    <div className="space-y-4 pt-2">
      {/* Inputs Row */}
      <div className="flex gap-3 items-center">
        {/* Token Amount Input */}
        <div className="flex-1 relative">
          <Coins className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 casino-text-gold opacity-80" />
          <div className="relative">
            <Input
              type="number"
              min={0}
              max={token.amount}
              step={1 / Math.pow(10, Math.min(token.decimals, 6))}
              value={tempAmount}
              onChange={(e) => handleTokenInput(e.target.value)}
              onFocus={() => handleInputFocus(`pro-token-${token.mint}`)}
              onBlur={() => handleInputBlur(`pro-token-${token.mint}`)}
              className={`pl-10 casino-input pr-2 font-bold ${
                isInputFocused(`pro-token-${token.mint}`) ? 'opacity-100' : 'opacity-0'
              }`}
            />
            
            {/* Overlay with formatted display */}
            {!isInputFocused(`pro-token-${token.mint}`) && (
              <div
                className="absolute inset-0 flex items-center pl-10 casino-text-gold font-bold pointer-events-none"
              >
                {formatTokenAmountForDisplay(tempAmount, token.decimals)}
              </div>
            )}
          </div>
          <div className="text-xs casino-text-yellow mt-1 font-bold text-center">
            {((tempAmount / token.amount) * 100).toFixed(0)}% of balance
          </div>
        </div>
        
        {/* USD Value Input */}
        <div className="flex-1 relative">
          <DollarSign className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 casino-text-green-400 opacity-80" />
          <div className="relative">
            <Input
              type="number"
              min={0}
              max={maxUSDValue}
              step={0.01}
              value={tempUSDAmount}
              onChange={(e) => handleUSDInput(e.target.value)}
              onFocus={() => handleInputFocus(`pro-usd-${token.mint}`)}
              onBlur={() => handleInputBlur(`pro-usd-${token.mint}`)}
              className={`pl-10 casino-input pr-2 font-bold ${
                isInputFocused(`pro-usd-${token.mint}`) ? 'opacity-100' : 'opacity-0'
              }`}
              disabled={!tokenPriceInSol || !solPrice}
            />
            
            {/* Overlay with formatted display */}
            {!isInputFocused(`pro-usd-${token.mint}`) && (
              <div
                className="absolute inset-0 flex items-center pl-10 casino-text-green-400 font-bold pointer-events-none"
              >
                {formatUSDValueForDisplay(tempUSDAmount)}
              </div>
            )}
          </div>
          {(!tokenPriceInSol || !solPrice) ? (
            <div className="text-xs text-red-400 mt-1 font-bold text-center">
              Price data unavailable
            </div>
          ) : (
            <div className="text-xs casino-text-green-400 mt-1 font-bold text-center">
              Max: {formatUSDValueForDisplay(maxUSDValue)}
            </div>
          )}
        </div>
      </div>
      
      {/* Percentage Quick Select */}
      <div className="flex justify-between">
        {[0, 25, 50, 75, 100].map(percent => (
          <motion.button
            key={percent}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => handlePercentage(percent)}
            className={`px-2 py-1 rounded text-xs font-bold transition-all ${
              Math.abs((tempAmount / token.amount) * 100 - percent) < 1
                ? "bg-[#FFD700] text-black"
                : "bg-[#FFD700]/20 casino-text-gold hover:bg-[#FFD700]/40"
            }`}
          >
            {percent}%
          </motion.button>
        ))}
      </div>
      
      {/* Slider */}
      <div className="px-2">
        <Slider
          value={[Math.min((tempAmount / token.amount) * 100, 100)]}
          min={0}
          max={100}
          step={1}
          onValueChange={([percentage]) => handlePercentage(percentage)}
          className="slider-casino"
        />
      </div>
      
      {/* Action Buttons */}
      <div className="flex justify-end gap-2 pt-2">
        <motion.div
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <Button
            onClick={onCancel}
            className="px-4 py-2 bg-gray-700 hover:bg-gray-800 text-white font-black border border-gray-600"
            style={{
              borderRadius: '8px'
            }}
          >
            <X className="h-4 w-4 mr-1" />
            Cancel
          </Button>
        </motion.div>
        
        <motion.div
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <Button
            onClick={() => onSave(tempAmount)}
            className={`px-4 py-2 font-black ${
              tempAmount === 0 
                ? "bg-[#FF1493] hover:bg-[#DC143C] text-white border border-[#FF1493]" 
                : "casino-button border border-[#FFD700]"
            }`}
            style={{
              borderRadius: '8px',
            }}
          >
            <Check className="h-4 w-4 mr-1" />
            {tempAmount === 0 ? "Remove" : "Apply"}
          </Button>
        </motion.div>
      </div>
    </div>
  );
}
</file>

<file path="components/tokenSelector/TokenSelector.tsx">
"use client";

import { useState, useEffect, useMemo } from "react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { LayoutGroup, AnimatePresence } from "framer-motion";
import { Wallet, Coins } from "lucide-react";
import { usePrivy } from "@privy-io/react-auth";
import { useSolPriceUSD } from "@/hooks/useSolPriceUSD";
import { useTokenPricesSol } from "@/hooks/useTokenPriceSol";
import { useTokenBalances } from "@/hooks/useTokenBalances";
import { useTokenData } from "@/hooks/useTokenData";
import { useTokenStore } from "@/stores/tokenStore";
import { useUIStore } from "@/stores/uiStore";
import { useDebugStore } from "@/stores/debugStore";
import { MobileTokenRow } from "./MobileTokenRow";
import { calculateTokenUSDValue } from "@/lib/priceCalculations";

interface TokenSelectorProps {
  selectedTokens: any[]; // Kept for compatibility
  onSelectedTokensChange: (tokens: any[]) => void; // Kept for compatibility
  delayedExpandToken?: string | null;
  onClearDelayedExpand?: () => void;
  isMobile?: boolean;
}

export function TokenSelector({
  delayedExpandToken,
  onClearDelayedExpand,
  isMobile = false,
}: TokenSelectorProps) {
  const { authenticated, user } = usePrivy();
  
  // Get debug wallet address
  const { debugWalletAddress } = useDebugStore();
  
  // Use debug address if available, otherwise use connected wallet
  const effectiveWalletAddress = debugWalletAddress || user?.wallet?.address;
  const isUsingDebugWallet = !!debugWalletAddress;
  
  const { tokens, loading, error } = useTokenBalances(effectiveWalletAddress);
  
  // Get all mint addresses for DexScreener filtering
  const mintAddresses = useMemo(() => tokens?.map(token => token.mint) || [], [tokens]);
  const { data: dexScreenerData, error: dexScreenerError, isLoading: dexScreenerLoading } = useTokenData({
    chainId: "solana",
    tokenAddresses: mintAddresses,
    enabled: mintAddresses.length > 0
  });

  // Filter tokens to only include those with DexScreener trading data (same as portfolio view)
  const filteredTokens = useMemo(() => {
    if (!tokens || !dexScreenerData) return [];
    
    const dexScreenerTokens = new Set(
      dexScreenerData.map(pair => pair.baseToken.address)
    );

    const filtered = tokens.filter(token => dexScreenerTokens.has(token.mint));
    
    // Only log in development and when data actually changes
    if (process.env.NODE_ENV === 'development' && filtered.length > 0) {
      console.log("TokenSelector: Filtered tokens with trading data:", filtered.length, "from wallet:", isUsingDebugWallet ? "DEBUG" : "CONNECTED");
    }
    
    return filtered;
  }, [tokens, dexScreenerData, isUsingDebugWallet]);

  const { prices: tokenPricesInSol } = useTokenPricesSol(mintAddresses);

  // Add price hooks for USD values
  const { price: solPrice } = useSolPriceUSD();

  // Use Zustand store for token operations instead of props
  const { 
    selectedTokens: zustandSelectedTokens,
    expandedToken,
    setExpandedToken,
    addToken,
    removeToken,
    updateTokenAmount
  } = useTokenStore();

  // Calculate USD values for each token using shared utility
  const tokenUSDValues = useMemo(() => {
    const valuesMap: Record<string, number | null> = {};

    filteredTokens.forEach(token => {
      const usdValue = calculateTokenUSDValue(token, token.amount, tokenPricesInSol[token.mint], solPrice);
      valuesMap[token.mint] = usdValue;
    });

    return valuesMap;
  }, [filteredTokens, tokenPricesInSol, solPrice]);

  useEffect(() => {
    if (delayedExpandToken) {
      setExpandedToken(delayedExpandToken);
      onClearDelayedExpand?.();
    }
  }, [delayedExpandToken, onClearDelayedExpand, setExpandedToken]);

  // Use Zustand selected tokens instead of props
  const selectedMints = new Set(zustandSelectedTokens.map(t => t.mint));
  const availableTokens = filteredTokens.filter(t => !selectedMints.has(t.mint));
  
  // Combine lists: selected first, then available
  const allTokens = [
    ...zustandSelectedTokens.map(st => ({
      ...st,
      // Make sure we have the latest balance data
      amount: filteredTokens.find(t => t.mint === st.mint)?.amount ?? st.amount,
      selected: true
    })),
    ...availableTokens.map(at => ({ ...at, selected: false }))
  ];

  // Use Zustand actions instead of prop-based callbacks
  const select = (token: any) => {
    addToken(token);
    // Auto-expand the newly selected token for editing
    setExpandedToken(token.mint);
  };

  const remove = (mint: string) => {
    removeToken(mint);
  };

  const update = (mint: string, amt: number) => {
    updateTokenAmount(mint, amt);
  };

  const toggleExpand = (mint: string) => {
    setExpandedToken(expandedToken === mint ? null : mint);
  };

  return (
    <div className="w-full h-full flex flex-col">
      {/* Header */}
      <div className="flex-shrink-0 mb-3">
        <h3
          className="text-lg font-black uppercase casino-text-gold text-center"
          style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}
        >
          {zustandSelectedTokens.length > 0 
            ? `AVAILABLE TOKENS (${allTokens.length})`
            : `AVAILABLE TOKENS (${allTokens.length})`
          }
        </h3>
      </div>

      {/* Fill ALL available space with proper flex layout */}
      <div 
        className="flex-1 min-h-0 scrollable-list-container"
        style={{ 
          overflowY: 'auto',
          overflowX: 'hidden',
          WebkitOverflowScrolling: 'touch', // iOS smooth scrolling
        }}
      >
        {loading ? (
          <div className="flex flex-col items-center justify-center h-full">
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            >
              <Coins className="h-8 w-8 casino-text-gold" />
            </motion.div>
            <span className="text-sm casino-text-gold font-bold mt-2">
              Loading tokens{isUsingDebugWallet ? " (Debug)" : ""}...
            </span>
          </div>
        ) : error ? (
          <div className="text-center py-8">
            <span className="text-sm text-red-400 font-bold">
              Error: {error}
            </span>
          </div>
        ) : !allTokens.length ? (
          <div className="flex flex-col items-center justify-center h-full">
            <Wallet className="h-8 w-8 casino-text-gold mb-2" />
            <span className="text-sm casino-text-gold font-bold">
              {dexScreenerLoading ? "Loading trading data..." : "No tokens with trading data found"}
            </span>
          </div>
        ) : (
          <div className="px-2">
            <LayoutGroup id="tokens">
              <AnimatePresence>
                {allTokens.map((token) => (
                  <MobileTokenRow
                    key={token.mint}
                    token={token}
                    isSelected={token.selected || false}
                    isExpanded={expandedToken === token.mint}
                    onSelect={() => select(token)}
                    onRemove={() => remove(token.mint)}
                    onAmountChange={(amount) => update(token.mint, amount)}
                    onToggleExpand={() => toggleExpand(token.mint)}
                    selectedAmount={token.selectedAmount}
                    usdValue={tokenUSDValues[token.mint]}
                    solPrice={solPrice}
                    tokenPriceInSol={tokenPricesInSol[token.mint]}
                  />
                ))}
              </AnimatePresence>
            </LayoutGroup>
          </div>
        )}
      </div>

      {/* Enhanced scrollbar styles */}
      <style jsx>{`
        /* WEBKIT SCROLLBAR - Ultra visible with animations */
        .scrollable-list-container::-webkit-scrollbar {
          width: 16px !important;
          background: linear-gradient(180deg, #FF1493 0%, #FFD700 50%, #FF1493 100%) !important;
          border-radius: 8px !important;
          border: 3px solid #FFFF00 !important;
          box-shadow: 0 0 20px rgba(255, 215, 0, 1) !important;
        }
        
        .scrollable-list-container::-webkit-scrollbar-track {
          background: linear-gradient(180deg, #000000 0%, #2D0A30 50%, #000000 100%) !important;
          border-radius: 8px !important;
          border: 2px solid #FFD700 !important;
          box-shadow: 
            inset 0 0 20px rgba(255, 215, 0, 0.5),
            0 0 30px rgba(255, 215, 0, 1) !important;
        }
        
        .scrollable-list-container::-webkit-scrollbar-thumb {
          background: linear-gradient(180deg, #FFFF00 0%, #FFD700 25%, #FF1493 50%, #FFD700 75%, #FFFF00 100%) !important;
          border-radius: 8px !important;
          border: 3px solid #FFFF00 !important;
          box-shadow: 
            0 0 30px rgba(255, 215, 0, 1),
            inset 0 2px 0 rgba(255, 255, 255, 0.8),
            inset 0 -2px 0 rgba(0, 0, 0, 0.8),
            0 0 40px rgba(255, 20, 147, 0.8) !important;
          min-height: 40px !important;
          animation: pulse-glow 2s infinite !important;
        }
        
        @keyframes pulse-glow {
          0%, 100% { 
            box-shadow: 
              0 0 30px rgba(255, 215, 0, 1),
              0 0 40px rgba(255, 20, 147, 0.8);
          }
          50% { 
            box-shadow: 
              0 0 50px rgba(255, 255, 0, 1),
              0 0 60px rgba(255, 20, 147, 1);
          }
        }
        
        .scrollable-list-container::-webkit-scrollbar-thumb:hover {
          background: linear-gradient(180deg, #FFFFFF 0%, #FFFF00 25%, #FF69B4 50%, #FFFF00 75%, #FFFFFF 100%) !important;
          transform: scale(1.2) !important;
          box-shadow: 
            0 0 50px rgba(255, 255, 255, 1),
            0 0 70px rgba(255, 20, 147, 1) !important;
        }
        
        .scrollable-list-container::-webkit-scrollbar-thumb:active {
          background: linear-gradient(180deg, #FF0000 0%, #FFFF00 25%, #00FFFF 50%, #FFFF00 75%, #FF0000 100%) !important;
          transform: scale(1.1) !important;
          box-shadow: 
            0 0 60px rgba(255, 0, 0, 1),
            0 0 80px rgba(0, 255, 255, 1) !important;
        }

        /* FIREFOX FALLBACK */
        .scrollable-list-container {
          scrollbar-width: thick !important;
          scrollbar-color: #FFD700 #2D0A30 !important;
        }
      `}</style>
    </div>
  );
}
</file>

<file path="components/tokenSelector/TokenSelectorModeWrapper.tsx">
"use client";

import { TokenPortfolioWrapper } from "../TokenPortfolioWrapper";
import { DesktopTokenSelector } from "./DesktopTokenSelector";
import { useSettingsStore } from "@/stores/settingsStore";
import { useTokenBalances } from "@/hooks/useTokenBalances";
import { useSolPriceUSD } from "@/hooks/useSolPriceUSD";
import { useTokenPricesSol } from "@/hooks/useTokenPriceSol"; // 🔧 FIXED: Import from correct file name (singular file, plural hook)
import { useTokenData } from "@/hooks/useTokenData";
import { useDebugStore } from "@/stores/debugStore";
import { usePrivy } from '@privy-io/react-auth';
import { useMemo } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { WalletConnect } from "../WalletConnect";

export function TokenSelectorModeWrapper() {
  const { tokenSelectorMode } = useSettingsStore();
  const { authenticated, user } = usePrivy();
  const { debugWalletAddress } = useDebugStore();
  
  // 🔧 FIXED: Use same data fetching pattern as TokenPortfolioWrapper (chip view)
  // Use debug address if available, otherwise use connected wallet
  const effectiveWalletAddress = debugWalletAddress || user?.wallet?.address;
  const isUsingDebugWallet = !!debugWalletAddress;
  
  const { tokens, loading, error } = useTokenBalances(effectiveWalletAddress);
  const { price: solPrice } = useSolPriceUSD();
  
  // Get all mint addresses for price fetching and DexScreener filtering
  const mintAddresses = useMemo(() => tokens?.map(token => token.mint) || [], [tokens]);
  const { prices: tokenPricesInSol } = useTokenPricesSol(mintAddresses); // 🔧 FIXED: Use correct plural hook from singular file
  const { data: dexScreenerData } = useTokenData({
    chainId: "solana",
    tokenAddresses: mintAddresses,
    enabled: mintAddresses.length > 0
  });

  // 🔧 FIXED: Filter tokens to only include those with DexScreener trading data (same as chip view)
  const filteredTokens = useMemo(() => {
    if (!tokens || !dexScreenerData) return [];
    
    const dexScreenerTokens = new Set(
      dexScreenerData.map(pair => pair.baseToken.address)
    );

    const filtered = tokens.filter(token => dexScreenerTokens.has(token.mint));
    
    // 🔧 DEBUG: Log data flow in development
    if (process.env.NODE_ENV === 'development' && filtered.length > 0) {
      console.log("🔧 TokenSelectorModeWrapper: Data successfully filtered", {
        totalTokens: tokens.length,
        filteredTokens: filtered.length,
        solPrice,
        tokenPricesLoaded: Object.keys(tokenPricesInSol).length,
        mode: tokenSelectorMode,
        wallet: isUsingDebugWallet ? "DEBUG" : "CONNECTED"
      });
    }
    
    return filtered;
  }, [tokens, dexScreenerData, isUsingDebugWallet, tokenPricesInSol, solPrice, tokenSelectorMode]);

  // Show connect wallet state (only if not using debug mode)
  if (!authenticated && !isUsingDebugWallet) {
    return (
      <Card className="casino-box casino-box-gold h-full">
        <CardContent className="flex items-center justify-center h-full">
          <div className="text-center">
            <WalletConnect />
          </div>
        </CardContent>
      </Card>
    );
  }

  // 🔧 FIXED: Debug logging for desktop selector data
  if (process.env.NODE_ENV === 'development' && tokenSelectorMode === 'desktop') {
    console.log("🔧 Passing to Desktop Selector:", {
      tokensCount: filteredTokens.length,
      solPrice,
      tokenPricesCount: Object.keys(tokenPricesInSol).length,
      validPrices: Object.entries(tokenPricesInSol).filter(([, price]) => price !== null).length,
      loading,
      error,
      sampleToken: filteredTokens[0] ? {
        symbol: filteredTokens[0].symbol,
        hasPrice: !!tokenPricesInSol[filteredTokens[0].mint]
      } : null
    });
  }

  // Render based on selected mode
  switch (tokenSelectorMode) {
    case 'desktop':
      return (
        <DesktopTokenSelector
          tokens={filteredTokens} // 🔧 FIXED: Pass filtered tokens (same as chip view)
          tokenPricesInSol={tokenPricesInSol} // 🔧 FIXED: Pass price data properly
          solPrice={solPrice} // 🔧 FIXED: Pass SOL price properly
          loading={loading}
          error={error}
        />
      );
    
    case 'chip':
    default:
      return <TokenPortfolioWrapper />;
  }
}
</file>

<file path="components/ui/accordion.tsx">
'use client';

import * as React from 'react';
import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { ChevronDown } from 'lucide-react';

import { cn } from '@/lib/utils';

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn('border-b', className)}
    {...props}
  />
));
AccordionItem.displayName = 'AccordionItem';

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn('pb-4 pt-0', className)}>{children}</div>
  </AccordionPrimitive.Content>
));

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };
</file>

<file path="components/ui/alert-dialog.tsx">
'use client';

import * as React from 'react';
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';

import { cn } from '@/lib/utils';
import { buttonVariants } from '@/components/ui/button';

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = 'AlertDialogHeader';

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = 'AlertDialogFooter';

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold', className)}
    {...props}
  />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: 'outline' }),
      'mt-2 sm:mt-0',
      className
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};
</file>

<file path="components/ui/alert.tsx">
import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const alertVariants = cva(
  'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',
  {
    variants: {
      variant: {
        default: 'bg-background text-foreground',
        destructive:
          'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = 'Alert';

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn('mb-1 font-medium leading-none tracking-tight', className)}
    {...props}
  />
));
AlertTitle.displayName = 'AlertTitle';

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('text-sm [&_p]:leading-relaxed', className)}
    {...props}
  />
));
AlertDescription.displayName = 'AlertDescription';

export { Alert, AlertTitle, AlertDescription };
</file>

<file path="components/ui/aspect-ratio.tsx">
'use client';

import * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio';

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };
</file>

<file path="components/ui/avatar.tsx">
'use client';

import * as React from 'react';
import * as AvatarPrimitive from '@radix-ui/react-avatar';

import { cn } from '@/lib/utils';

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',
      className
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn('aspect-square h-full w-full', className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      'flex h-full w-full items-center justify-center rounded-full bg-muted',
      className
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/breadcrumb.tsx">
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { ChevronRight, MoreHorizontal } from 'lucide-react';

import { cn } from '@/lib/utils';

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<'nav'> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = 'Breadcrumb';

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<'ol'>
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',
      className
    )}
    {...props}
  />
));
BreadcrumbList.displayName = 'BreadcrumbList';

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<'li'>
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn('inline-flex items-center gap-1.5', className)}
    {...props}
  />
));
BreadcrumbItem.displayName = 'BreadcrumbItem';

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<'a'> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : 'a';

  return (
    <Comp
      ref={ref}
      className={cn('transition-colors hover:text-foreground', className)}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = 'BreadcrumbLink';

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<'span'>
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn('font-normal text-foreground', className)}
    {...props}
  />
));
BreadcrumbPage.displayName = 'BreadcrumbPage';

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<'li'>) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn('[&>svg]:size-3.5', className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = 'BreadcrumbSeparator';

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn('flex h-9 w-9 items-center justify-center', className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};
</file>

<file path="components/ui/button.tsx">
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline:
          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = 'Button';

export { Button, buttonVariants };
</file>

<file path="components/ui/calendar.tsx">
'use client';

import * as React from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { DayPicker } from 'react-day-picker';

import { cn } from '@/lib/utils';
import { buttonVariants } from '@/components/ui/button';

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn('p-3', className)}
      classNames={{
        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',
        month: 'space-y-4',
        caption: 'flex justify-center pt-1 relative items-center',
        caption_label: 'text-sm font-medium',
        nav: 'space-x-1 flex items-center',
        nav_button: cn(
          buttonVariants({ variant: 'outline' }),
          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'
        ),
        nav_button_previous: 'absolute left-1',
        nav_button_next: 'absolute right-1',
        table: 'w-full border-collapse space-y-1',
        head_row: 'flex',
        head_cell:
          'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',
        row: 'flex w-full mt-2',
        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',
        day: cn(
          buttonVariants({ variant: 'ghost' }),
          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'
        ),
        day_range_end: 'day-range-end',
        day_selected:
          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',
        day_today: 'bg-accent text-accent-foreground',
        day_outside:
          'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',
        day_disabled: 'text-muted-foreground opacity-50',
        day_range_middle:
          'aria-selected:bg-accent aria-selected:text-accent-foreground',
        day_hidden: 'invisible',
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = 'Calendar';

export { Calendar };
</file>

<file path="components/ui/card.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border bg-card text-card-foreground shadow-sm',
      className
    )}
    {...props}
  />
));
Card.displayName = 'Card';

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
));
CardHeader.displayName = 'CardHeader';

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
CardTitle.displayName = 'CardTitle';

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
CardDescription.displayName = 'CardDescription';

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
));
CardContent.displayName = 'CardContent';

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
));
CardFooter.displayName = 'CardFooter';

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};
</file>

<file path="components/ui/carousel.tsx">
'use client';

import * as React from 'react';
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from 'embla-carousel-react';
import { ArrowLeft, ArrowRight } from 'lucide-react';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: 'horizontal' | 'vertical';
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error('useCarousel must be used within a <Carousel />');
  }

  return context;
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = 'horizontal',
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === 'horizontal' ? 'x' : 'y',
      },
      plugins
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === 'ArrowLeft') {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === 'ArrowRight') {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext]
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on('reInit', onSelect);
      api.on('select', onSelect);

      return () => {
        api?.off('select', onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn('relative', className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  }
);
Carousel.displayName = 'Carousel';

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          'flex',
          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
          className
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = 'CarouselContent';

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        'min-w-0 shrink-0 grow-0 basis-full',
        orientation === 'horizontal' ? 'pl-4' : 'pt-4',
        className
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = 'CarouselItem';

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute  h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-left-12 top-1/2 -translate-y-1/2'
          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
});
CarouselPrevious.displayName = 'CarouselPrevious';

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-right-12 top-1/2 -translate-y-1/2'
          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
});
CarouselNext.displayName = 'CarouselNext';

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};
</file>

<file path="components/ui/chart.tsx">
'use client';

import * as React from 'react';
import * as RechartsPrimitive from 'recharts';

import { cn } from '@/lib/utils';

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: '', dark: '.dark' } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error('useChart must be used within a <ChartContainer />');
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> & {
    config: ChartConfig;
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >['children'];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = 'Chart';

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join('\n')}
}
`
          )
          .join('\n'),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<'div'> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: 'line' | 'dot' | 'dashed';
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = 'dot',
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || 'value'}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === 'string'
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn('font-medium', labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn('font-medium', labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== 'dot';

    return (
      <div
        ref={ref}
        className={cn(
          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || 'value'}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',
                  indicator === 'dot' && 'items-center'
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',
                            {
                              'h-2.5 w-2.5': indicator === 'dot',
                              'w-1': indicator === 'line',
                              'w-0 border-[1.5px] border-dashed bg-transparent':
                                indicator === 'dashed',
                              'my-0.5': nestLabel && indicator === 'dashed',
                            }
                          )}
                          style={
                            {
                              '--color-bg': indicatorColor,
                              '--color-border': indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        'flex flex-1 justify-between leading-none',
                        nestLabel ? 'items-end' : 'items-center'
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
);
ChartTooltipContent.displayName = 'ChartTooltip';

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> &
    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey },
    ref
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          'flex items-center justify-center gap-4',
          verticalAlign === 'top' ? 'pb-3' : 'pt-3',
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || 'value'}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  }
);
ChartLegendContent.displayName = 'ChartLegend';

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== 'object' || payload === null) {
    return undefined;
  }

  const payloadPayload =
    'payload' in payload &&
    typeof payload.payload === 'object' &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === 'string'
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string;
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};
</file>

<file path="components/ui/checkbox.tsx">
'use client';

import * as React from 'react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { Check } from 'lucide-react';

import { cn } from '@/lib/utils';

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn('flex items-center justify-center text-current')}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };
</file>

<file path="components/ui/collapsible.tsx">
'use client';

import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };
</file>

<file path="components/ui/command.tsx">
'use client';

import * as React from 'react';
import { type DialogProps } from '@radix-ui/react-dialog';
import { Command as CommandPrimitive } from 'cmdk';
import { Search } from 'lucide-react';

import { cn } from '@/lib/utils';
import { Dialog, DialogContent } from '@/components/ui/dialog';

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',
      className
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',
      className
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 h-px bg-border', className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = 'CommandShortcut';

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};
</file>

<file path="components/ui/context-menu.tsx">
'use client';

import * as React from 'react';
import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold text-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-border', className)}
    {...props}
  />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
ContextMenuShortcut.displayName = 'ContextMenuShortcut';

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};
</file>

<file path="components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="components/ui/drawer.tsx">
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="components/ui/dropdown-menu.tsx">
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="components/ui/form.tsx">
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = 'FormItem';

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = 'FormLabel';

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = 'FormControl';

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn('text-sm text-muted-foreground', className)}
      {...props}
    />
  );
});
FormDescription.displayName = 'FormDescription';

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn('text-sm font-medium text-destructive', className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = 'FormMessage';

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="components/ui/hover-card.tsx">
'use client';

import * as React from 'react';
import * as HoverCardPrimitive from '@radix-ui/react-hover-card';

import { cn } from '@/lib/utils';

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      'z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };
</file>

<file path="components/ui/input-otp.tsx">
'use client';

import * as React from 'react';
import { OTPInput, OTPInputContext } from 'input-otp';
import { Dot } from 'lucide-react';

import { cn } from '@/lib/utils';

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      'flex items-center gap-2 has-[:disabled]:opacity-50',
      containerClassName
    )}
    className={cn('disabled:cursor-not-allowed', className)}
    {...props}
  />
));
InputOTP.displayName = 'InputOTP';

const InputOTPGroup = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex items-center', className)} {...props} />
));
InputOTPGroup.displayName = 'InputOTPGroup';

const InputOTPSlot = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        'relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md',
        isActive && 'z-10 ring-2 ring-ring ring-offset-background',
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = 'InputOTPSlot';

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'>
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
));
InputOTPSeparator.displayName = 'InputOTPSeparator';

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };
</file>

<file path="components/ui/input.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = 'Input';

export { Input };
</file>

<file path="components/ui/label.tsx">
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="components/ui/menubar.tsx">
'use client';

import * as React from 'react';
import * as MenubarPrimitive from '@radix-ui/react-menubar';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      'flex h-10 items-center space-x-1 rounded-md border bg-background p-1',
      className
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      className
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          'z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
MenubarShortcut.displayname = 'MenubarShortcut';

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};
</file>

<file path="components/ui/navigation-menu.tsx">
import * as React from 'react';
import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';
import { cva } from 'class-variance-authority';
import { ChevronDown } from 'lucide-react';

import { cn } from '@/lib/utils';

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      'relative z-10 flex max-w-max flex-1 items-center justify-center',
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      'group flex flex-1 list-none items-center justify-center space-x-1',
      className
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  'group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50'
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), 'group', className)}
    {...props}
  >
    {children}{' '}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',
      className
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn('absolute left-0 top-full flex justify-center')}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]',
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};
</file>

<file path="components/ui/pagination.tsx">
import * as React from 'react';
import { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react';

import { cn } from '@/lib/utils';
import { ButtonProps, buttonVariants } from '@/components/ui/button';

const Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn('mx-auto flex w-full justify-center', className)}
    {...props}
  />
);
Pagination.displayName = 'Pagination';

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<'ul'>
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn('flex flex-row items-center gap-1', className)}
    {...props}
  />
));
PaginationContent.displayName = 'PaginationContent';

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<'li'>
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn('', className)} {...props} />
));
PaginationItem.displayName = 'PaginationItem';

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, 'size'> &
  React.ComponentProps<'a'>;

const PaginationLink = ({
  className,
  isActive,
  size = 'icon',
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? 'page' : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? 'outline' : 'ghost',
        size,
      }),
      className
    )}
    {...props}
  />
);
PaginationLink.displayName = 'PaginationLink';

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn('gap-1 pl-2.5', className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = 'PaginationPrevious';

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn('gap-1 pr-2.5', className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = 'PaginationNext';

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => (
  <span
    aria-hidden
    className={cn('flex h-9 w-9 items-center justify-center', className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = 'PaginationEllipsis';

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};
</file>

<file path="components/ui/popover.tsx">
'use client';

import * as React from 'react';
import * as PopoverPrimitive from '@radix-ui/react-popover';

import { cn } from '@/lib/utils';

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };
</file>

<file path="components/ui/progress.tsx">
'use client';

import * as React from 'react';
import * as ProgressPrimitive from '@radix-ui/react-progress';

import { cn } from '@/lib/utils';

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      'relative h-4 w-full overflow-hidden rounded-full bg-secondary',
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };
</file>

<file path="components/ui/radio-group.tsx">
'use client';

import * as React from 'react';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import { Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn('grid gap-2', className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };
</file>

<file path="components/ui/resizable.tsx">
'use client';

import { GripVertical } from 'lucide-react';
import * as ResizablePrimitive from 'react-resizable-panels';

import { cn } from '@/lib/utils';

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',
      className
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      'relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90',
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };
</file>

<file path="components/ui/scroll-area.tsx">
'use client';

import * as React from 'react';
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';

import { cn } from '@/lib/utils';

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn('relative overflow-hidden', className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = 'vertical', ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      'flex touch-none select-none transition-colors',
      orientation === 'vertical' &&
        'h-full w-2.5 border-l border-l-transparent p-[1px]',
      orientation === 'horizontal' &&
        'h-2.5 flex-col border-t border-t-transparent p-[1px]',
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };
</file>

<file path="components/ui/select.tsx">
'use client';

import * as React from 'react';
import * as SelectPrimitive from '@radix-ui/react-select';
import { Check, ChevronDown, ChevronUp } from 'lucide-react';

import { cn } from '@/lib/utils';

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};
</file>

<file path="components/ui/separator.tsx">
'use client';

import * as React from 'react';
import * as SeparatorPrimitive from '@radix-ui/react-separator';

import { cn } from '@/lib/utils';

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = 'horizontal', decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'shrink-0 bg-border',
        orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };
</file>

<file path="components/ui/sheet.tsx">
'use client';

import * as React from 'react';
import * as SheetPrimitive from '@radix-ui/react-dialog';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
        right:
          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
      },
    },
    defaultVariants: {
      side: 'right',
    },
  }
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = 'right', className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
SheetHeader.displayName = 'SheetHeader';

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
SheetFooter.displayName = 'SheetFooter';

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};
</file>

<file path="components/ui/skeleton.tsx">
import { cn } from '@/lib/utils';

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn('animate-pulse rounded-md bg-muted', className)}
      {...props}
    />
  );
}

export { Skeleton };
</file>

<file path="components/ui/slider.tsx">
'use client';

import * as React from 'react';
import * as SliderPrimitive from '@radix-ui/react-slider';

import { cn } from '@/lib/utils';

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex w-full touch-none select-none items-center',
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };
</file>

<file path="components/ui/sliding-number.tsx">
import { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";

interface SlidingNumberProps {
  value: number;
}

export function SlidingNumber({ value }: SlidingNumberProps) {
  const [displayValue, setDisplayValue] = useState(value);
  
  useEffect(() => {
    setDisplayValue(value);
  }, [value]);
  
  // Format number with commas
  const formattedNumber = displayValue.toLocaleString();
  
  return (
    <span className="relative inline-flex">
      <AnimatePresence mode="popLayout">
        {formattedNumber.split("").map((digit, index) => (
          <motion.span
            key={index + digit}
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            exit={{ y: -20, opacity: 0 }}
            transition={{ duration: 0.15, ease: "easeInOut" }}
            className="relative inline-block"
          >
            {digit}
          </motion.span>
        ))}
      </AnimatePresence>
    </span>
  );
}
</file>

<file path="components/ui/sonner.tsx">
'use client';

import { useTheme } from 'next-themes';
import { Toaster as Sonner } from 'sonner';

type ToasterProps = React.ComponentProps<typeof Sonner>;

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = 'system' } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps['theme']}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',
          description: 'group-[.toast]:text-muted-foreground',
          actionButton:
            'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',
          cancelButton:
            'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',
        },
      }}
      {...props}
    />
  );
};

export { Toaster };
</file>

<file path="components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="components/ui/table.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn('w-full caption-bottom text-sm', className)}
      {...props}
    />
  </div>
));
Table.displayName = 'Table';

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />
));
TableHeader.displayName = 'TableHeader';

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn('[&_tr:last-child]:border-0', className)}
    {...props}
  />
));
TableBody.displayName = 'TableBody';

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      'border-t bg-muted/50 font-medium [&>tr]:last:border-b-0',
      className
    )}
    {...props}
  />
));
TableFooter.displayName = 'TableFooter';

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',
      className
    )}
    {...props}
  />
));
TableRow.displayName = 'TableRow';

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',
      className
    )}
    {...props}
  />
));
TableHead.displayName = 'TableHead';

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}
    {...props}
  />
));
TableCell.displayName = 'TableCell';

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn('mt-4 text-sm text-muted-foreground', className)}
    {...props}
  />
));
TableCaption.displayName = 'TableCaption';

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};
</file>

<file path="components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export { Textarea };
</file>

<file path="components/ui/toast.tsx">
'use client';

import * as React from 'react';
import * as ToastPrimitives from '@radix-ui/react-toast';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};
</file>

<file path="components/ui/toaster.tsx">
'use client';

import { useToast } from '@/hooks/use-toast';
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast';

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}
</file>

<file path="components/ui/toggle-group.tsx">
'use client';

import * as React from 'react';
import * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group';
import { type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';
import { toggleVariants } from '@/components/ui/toggle';

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: 'default',
  variant: 'default',
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn('flex items-center justify-center gap-1', className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };
</file>

<file path="components/ui/toggle.tsx">
'use client';

import * as React from 'react';
import * as TogglePrimitive from '@radix-ui/react-toggle';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const toggleVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        outline:
          'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',
      },
      size: {
        default: 'h-10 px-3',
        sm: 'h-9 px-2.5',
        lg: 'h-11 px-5',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };
</file>

<file path="components/ui/tooltip.tsx">
'use client';

import * as React from 'react';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';

import { cn } from '@/lib/utils';

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
</file>

<file path="components/BottomChip.tsx">
'use client';

import { memo, useMemo } from 'react';
import { getChipStyle } from '@/constants/denominations';

interface BottomChipProps {
  chipValue: number;
  position: { top: number; left: number };
  zIndex: number;
  isSelected?: boolean;
  scaleFactorProp?: number; // 🔥 NEW: Optional scale factor prop
}

// 🔥 MEMOIZED: Component to prevent unnecessary re-renders
const BottomChip = memo(function BottomChip({
  chipValue,
  position,
  zIndex,
  isSelected = false,
  scaleFactorProp = 1 // 🔥 NEW: Default to 1 (no scaling)
}: BottomChipProps) {
  // 🔥 NEW: Apply scale factor to chip dimensions
  const scaledChipSize = 144 * scaleFactorProp; // Base size is 144px (w-36 h-36)
  
  // 🔥 MEMOIZED: Border color calculation
  const borderColor = useMemo(() => 
    isSelected ? 'border-yellow-400' : 'border-black'
  , [isSelected]);

  // 🔥 MEMOIZED: Background color calculation
  const bgColor = useMemo(() => {
    if (chipValue < 1) return 'bg-gray-300'; // Light grey for penny chips
    if (chipValue >= 1000000) return 'bg-amber-500'; // Golden $1M chips
    if (chipValue >= 500000) return 'bg-violet-600'; // Royal purple $500K chips
    if (chipValue >= 100000) return 'bg-rose-600'; // Rich red $100K chips
    if (chipValue >= 50000) return 'bg-emerald-600'; // Rich green $50K chips
    if (chipValue >= 10000) return 'bg-orange-600'; // Rich orange $10K chips
    if (chipValue >= 5000) return 'bg-yellow-500'; // Golden $5K chips
    if (chipValue >= 1000) return 'bg-gray-900';
    if (chipValue >= 500) return 'bg-purple-600';
    if (chipValue >= 100) return 'bg-red-500';
    if (chipValue >= 50) return 'bg-orange-500';
    if (chipValue >= 20) return 'bg-green-500';
    if (chipValue >= 10) return 'bg-blue-500';
    if (chipValue >= 5) return 'bg-yellow-400';
    if (chipValue >= 1) return 'bg-cyan-400';
    return 'bg-gray-300'; // Fallback to light grey
  }, [chipValue]);

  // 🔥 MEMOIZED: Style objects to prevent recreation
  const styles = useMemo(() => ({
    fillStyle: {
      top: `${position.top}px`,
      left: `${position.left}px`,
      zIndex: zIndex,
      width: `${scaledChipSize}px`, // 🔥 NEW: Scaled width
      height: `${scaledChipSize}px` // 🔥 NEW: Scaled height
    },
    strokeStyle: {
      top: `${position.top}px`,
      left: `${position.left}px`,
      zIndex: zIndex + 100,
      clipPath: 'polygon(0 50%, 100% 50%, 100% 100%, 0 100%)',
      width: `${scaledChipSize}px`, // 🔥 NEW: Scaled width
      height: `${scaledChipSize}px` // 🔥 NEW: Scaled height
    }
  }), [position.top, position.left, zIndex, scaledChipSize]);

  return (
    <div className="absolute">
      {/* Bottom circle fill */}
      <div 
        className={`absolute rounded-full ${bgColor} transition-all duration-300`}
        style={styles.fillStyle}
      />
      
      {/* Bottom circle stroke */}
      <div 
        className={`absolute border-4 ${borderColor} rounded-full bg-transparent transition-all duration-300`}
        style={styles.strokeStyle}
      />
    </div>
  );
});

export default BottomChip;
</file>

<file path="components/CenterColumn.tsx">
import { EnterRound } from "./EnterRound";
import JackpotDonutChart from "./JackpotDonutChart";
import { TokenSelectorModeWrapper } from "./tokenSelector/TokenSelectorModeWrapper"; // 🔥 NEW: Use mode wrapper
import { useUIStore } from "@/stores/uiStore";

export function CenterColumn() {
  const { isMobile } = useUIStore();

  return (
    <div className="md:col-span-2 w-full max-w-full min-w-0 h-full min-h-0 flex flex-col gap-2 overflow-visible">
      {/* Donut Chart */}
      <div className="w-full h-[50vh] min-h-0 relative pb-20 pt-4 z-5">
        <JackpotDonutChart />
      </div>
      
      {/* Token Selector/Portfolio (Desktop) or Empty space (Mobile) */}
      {!isMobile && (
        <div className="flex-1 min-h-0 overflow-visible" style={{ zIndex: 2 }}>
          <TokenSelectorModeWrapper />
        </div>
      )}
    </div>
  );
}
</file>

<file path="components/ChatSection.tsx">
"use client";

import { useState, useEffect, useRef } from "react";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { motion } from "framer-motion";
import { userGifs } from "@/lib/mock-data";
import { EmojiPicker } from "@/components/EmojiPicker";
import { parseMessageWithEmojis, getEmojiCodeByUrl } from "@/lib/emoji-map";
import { ArrowRightIcon, Star } from "lucide-react";
import { usePrivy } from '@privy-io/react-auth';
import { WalletConnect } from './WalletConnect';
import { useChatStore } from "@/stores/chatStore";

interface ChatSectionProps {
  isMobile?: boolean;
}

const mockResponses = [
  "LFG! 🚀",
  "To the moon!",
  "gm",
  "This pot is getting huge",
  "I'm feeling lucky",
  "Another deposit incoming",
  "Can't wait for the draw",
  "Who's winning this one?",
  "Best lottery ever",
  "Love this community"
];

export function ChatSection({ isMobile = false }: ChatSectionProps) {
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const { authenticated } = usePrivy();
  
  // Zustand stores
  const {
    messages,
    newMessage,
    isEmojiPickerOpen,
    addMessage,
    setNewMessage,
    setIsEmojiPickerOpen,
    clearNewMessage
  } = useChatStore();

  const scrollToBottom = () => {
    if (scrollAreaRef.current) {
      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (scrollContainer) {
        scrollContainer.scrollTop = scrollContainer.scrollHeight;
      }
    }
  };

  useEffect(() => {
    const users = Object.keys(userGifs);
    const interval = setInterval(() => {
      const randomUser = users[Math.floor(Math.random() * users.length)];
      const randomMessage = mockResponses[Math.floor(Math.random() * mockResponses.length)];
      const randomGif = userGifs[randomUser][Math.floor(Math.random() * userGifs[randomUser].length)];
      
      const newMsg = {
        id: Date.now().toString(),
        user: randomUser,
        message: randomMessage,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        gif: randomGif
      };

      addMessage(newMsg);
      setTimeout(scrollToBottom, 100);
    }, 3000);

    return () => clearInterval(interval);
  }, [addMessage]);

  useEffect(() => {
    scrollToBottom();
  }, []);

  const handleSend = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim()) return;
    
    const messageSegments = parseMessageWithEmojis(newMessage);
    
    const userMessage = {
      id: Date.now().toString(),
      user: "You",
      message: newMessage,
      messageSegments,
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
    };
    
    addMessage(userMessage);
    clearNewMessage();
    setIsEmojiPickerOpen(false);
    setTimeout(scrollToBottom, 100);
  };

  const handleEmojiSelect = (emoji: string) => {
    setNewMessage(newMessage + emoji);
  };

  // Mobile layout - no background (uses parent's unified background)
  if (isMobile) {
    return (
      <div className="h-full flex flex-col">
        {/* Messages Area - No background, inherits from parent */}
        <div className="flex-1 min-h-0 overflow-y-auto">
          <ScrollArea 
            className="rounded-lg p-1 min-w-0 h-full" 
            ref={scrollAreaRef}
          >
            <div className="space-y-0 min-w-0">
              {messages.map((message, index) => (
                <motion.div 
                  key={message.id}
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.05 }}
                  className="relative min-w-0"
                >
                  {/* Clean message styling with minimal padding */}
                  <div className="text-white min-w-0 overflow-hidden px-2 py-1 mb-1">
                    <span className="font-black casino-text-yellow text-sm" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>{message.user}: </span>
                    {message.messageSegments ? (
                      message.messageSegments.map((segment, i) => (
                        segment.type === 'text' ? (
                          <span key={i} className="casino-text-gold break-words text-sm">{segment.content}</span>
                        ) : (
                          <img 
                            key={i}
                            src={segment.content} 
                            alt="emoji" 
                            className="inline-block mx-1"
                            style={{ height: "1.2em", verticalAlign: "middle" }}
                            title={getEmojiCodeByUrl(segment.content) || "emoji"}
                          />
                        )
                      ))
                    ) : (
                      <>
                        <span className="casino-text-gold break-words text-sm">{message.message}</span>
                        {message.gif && (
                          <img 
                            src={message.gif} 
                            alt="emoji" 
                            className="inline-block mx-1"
                            style={{ height: "1.2em", verticalAlign: "middle" }}
                            title={getEmojiCodeByUrl(message.gif) || "emoji"}
                          />
                        )}
                      </>
                    )}
                  </div>
                </motion.div>
              ))}
            </div>
          </ScrollArea>
        </div>
        
        {/* Input Footer - Reduced bottom padding */}
        {authenticated && (
          <div className="flex-shrink-0 p-2 pb-8 border-t border-[#FFD700]/40 min-w-0 relative">
            <form onSubmit={handleSend} className="w-full flex items-center gap-2 min-w-0 relative">
              {/* Emoji Picker Button and Floating Picker */}
              <div className="flex-shrink-0 relative">
                <EmojiPicker 
                  onEmojiSelect={handleEmojiSelect} 
                  isOpen={isEmojiPickerOpen}
                  setIsOpen={setIsEmojiPickerOpen}
                />
              </div>
              <div className="flex-1 min-w-0">
                <div className="relative">
                  <Input
                    placeholder="Type a message..."
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    className="casino-input pr-10 text-sm min-w-0"
                  />
                  <Button 
                    type="submit" 
                    className="absolute right-0 top-0 bottom-0 casino-button font-black rounded-r-md border-l-2 border-[#2D0A30] flex items-center justify-center px-2"
                    style={{ borderRadius: "0 6px 6px 0" }}
                  >
                    <ArrowRightIcon className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </form>
          </div>
        )}
      </div>
    );
  }

  // Desktop layout - keep card wrapper
  return (
    <Card className="casino-box casino-box-gold overflow-hidden p-0 h-full flex flex-col relative">
      {/* Corner stars */}
      <div className="absolute top-2 left-2 z-10">
        <Star className="h-4 w-4 casino-star" fill="currentColor" />
      </div>
      <div className="absolute top-2 right-2 z-10">
        <Star className="h-4 w-4 casino-star" fill="currentColor" />
      </div>
      
      {/* Chat Content - Flex container that fills available space */}
      <CardContent className="p-4 h-full flex flex-col min-w-0 overflow-hidden">
        {/* Title */}
        <h2 className="text-xl font-black uppercase text-center tracking-wide mb-4 casino-text-gold flex-shrink-0" 
            style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
          Chat
        </h2>
        
        {/* Messages Area - Takes all available space and scrolls */}
        <div className="flex-1 min-h-0 overflow-y-auto">
          <ScrollArea 
            className="rounded-lg p-3 min-w-0" 
            ref={scrollAreaRef}
          >
            <div className="space-y-2 min-w-0">
              {messages.map((message, index) => (
                <motion.div 
                  key={message.id}
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.05 }}
                  className="relative min-w-0"
                >
                  <div className="text-white min-w-0 overflow-hidden">
                    <span className="font-black casino-text-yellow text-sm" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>{message.user}: </span>
                    {message.messageSegments ? (
                      message.messageSegments.map((segment, i) => (
                        segment.type === 'text' ? (
                          <span key={i} className="casino-text-gold break-words text-sm">{segment.content}</span>
                        ) : (
                          <img 
                            key={i}
                            src={segment.content} 
                            alt="emoji" 
                            className="inline-block mx-1"
                            style={{ height: "1.2em", verticalAlign: "middle" }}
                            title={getEmojiCodeByUrl(segment.content) || "emoji"}
                          />
                        )
                      ))
                    ) : (
                      <>
                        <span className="casino-text-gold break-words text-sm">{message.message}</span>
                        {message.gif && (
                          <img 
                            src={message.gif} 
                            alt="emoji" 
                            className="inline-block mx-1"
                            style={{ height: "1.2em", verticalAlign: "middle" }}
                            title={getEmojiCodeByUrl(message.gif) || "emoji"}
                          />
                        )}
                      </>
                    )}
                  </div>
                </motion.div>
              ))}
            </div>
          </ScrollArea>
        </div>
      </CardContent>
      
      {/* Input Footer - Pinned to bottom */}
      <CardFooter className="flex-shrink-0 p-3 border-t border-[#FFD700] min-w-0 relative">
        {authenticated ? (
          <form onSubmit={handleSend} className="w-full flex items-center gap-2 min-w-0 relative">
            {/* Emoji Picker Button and Floating Picker */}
            <div className="flex-shrink-0 relative">
              <EmojiPicker 
                onEmojiSelect={handleEmojiSelect} 
                isOpen={isEmojiPickerOpen}
                setIsOpen={setIsEmojiPickerOpen}
              />
              {isEmojiPickerOpen && (
                <div className="absolute bottom-full left-0 mb-2 z-50">
                  {/* The EmojiPicker dropdown content should be rendered here if possible */}
                </div>
              )}
            </div>
            <div className="flex-1 min-w-0">
              <div className="relative">
                <Input
                  placeholder="Type a message..."
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  className="casino-input pr-10 text-sm min-w-0"
                />
                <Button 
                  type="submit" 
                  className="absolute right-0 top-0 bottom-0 casino-button font-black rounded-r-md border-l-2 border-[#2D0A30] flex items-center justify-center px-2"
                  style={{ borderRadius: "0 6px 6px 0" }}
                >
                  <ArrowRightIcon className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </form>
        ) : null}
      </CardFooter>
    </Card>
  );
}
</file>

<file path="components/ChipStack.tsx">
'use client';

import { useState, useMemo } from 'react';
import TopChip from './TopChip';
import BottomChip from './BottomChip';
import { CHIP_DENOMINATIONS } from '@/constants/denominations';
import { useViewportHeight } from '@/hooks/useViewportHeight';

interface ChipStackProps {
  value: number; // Dollar amount
  tokenImage?: string;
  tokenSymbol?: string; // Add token symbol prop
  showType?: 'remaining' | 'selected' | 'both'; // New prop to control what to show
  sliderValue?: number; // External slider value
  onSliderChange?: (value: number) => void; // External slider change handler
}

export default function ChipStack({ 
  value,
  tokenImage = "https://dd.dexscreener.com/ds-data/tokens/solana/DiZZY2UQ2HSVsFDF6jADc6YYATiTfnQFw4Be1udRZmaY.png?size=lg&key=261208",
  tokenSymbol = "TOKEN", // Default fallback
  showType = 'both',
  sliderValue: externalSliderValue,
  onSliderChange
}: ChipStackProps) {
  const [internalSliderValue, setInternalSliderValue] = useState(0);
  
  // 🔥 NEW: Get viewport height for responsive scaling
  const viewportHeight = useViewportHeight();
  
  // 🔥 NEW: Calculate scale factor based on viewport height
  const scaleFactor = useMemo(() => {
    if (viewportHeight === 0) return 1; // Default scale while loading
    if (viewportHeight < 820) {
      // Scale down progressively for smaller screens
      // At 820px: scale = 1.0
      // At 700px: scale = 0.85
      // At 600px: scale = 0.75
      const minScale = 0.75;
      const maxScale = 1.0;
      const minHeight = 600;
      const maxHeight = 820;
      
      const clampedHeight = Math.max(minHeight, Math.min(maxHeight, viewportHeight));
      const scale = minScale + (maxScale - minScale) * ((clampedHeight - minHeight) / (maxHeight - minHeight));
      
      return Math.round(scale * 100) / 100; // Round to 2 decimal places
    }
    return 1; // No scaling for heights >= 820px
  }, [viewportHeight]);
  
  // Use external slider value if provided, otherwise use internal
  const sliderValue = externalSliderValue !== undefined ? externalSliderValue : internalSliderValue;
  
  const handleSliderChange = (newValue: number) => {
    if (onSliderChange) {
      onSliderChange(newValue);
    } else {
      setInternalSliderValue(newValue);
    }
  };

  // Calculate values based on showType
  let displayValue: number;
  let selectedValue: number;
  let remainingValue: number;

  if (showType === 'selected') {
    // For selected display: sliderValue is the selected amount
    displayValue = sliderValue;
    selectedValue = sliderValue;
    remainingValue = value - sliderValue;
  } else if (showType === 'remaining') {
    // For remaining display: sliderValue is the remaining amount
    displayValue = sliderValue;
    selectedValue = value - sliderValue; // Calculate selected from remaining
    remainingValue = sliderValue;
  } else {
    // For 'both' display: sliderValue is the selected amount
    selectedValue = sliderValue;
    remainingValue = value - sliderValue;
    displayValue = sliderValue; // Default to selected for 'both' mode
  }

  // 🔥 FIXED: Create chip composition based on displayValue instead of total value
  const chipComposition = useMemo(() => {
    const chips: Array<{ value: number; color: string; textColor: string; name: string; id: string }> = [];
    
    // Use displayValue for chip calculation, not the total value
    let remaining = Math.round(displayValue * 100) / 100; // Round to avoid floating point errors
    let chipId = 0;

    // If no value to display, return empty array
    if (remaining <= 0) {
      return chips;
    }

    // Process whole dollar denominations first
    CHIP_DENOMINATIONS.forEach(denom => {
      const count = Math.floor(remaining / denom.value);
      for (let i = 0; i < count; i++) {
        chips.push({ 
          ...denom, 
          id: `${showType}-${denom.value}-${chipId++}`
        });
      }
      remaining = Math.round((remaining - count * denom.value) * 100) / 100;
    });

    // Add single penny chip for any remaining fractional amount
    if (remaining > 0.001) { // Use small epsilon to avoid floating point issues
      chips.push({
        value: remaining,
        color: 'bg-gray-300',
        textColor: 'black',
        name: `${Math.round(remaining * 100)}¢`,
        id: `${showType}-penny-${chipId++}`
      });
    }

    return chips.reverse(); // Highest value chips at bottom
  }, [displayValue, showType]); // 🔥 FIXED: Depend on displayValue and showType instead of value

  const gapBetweenLayers = 30 * scaleFactor; // 🔥 NEW: Scale gap between layers
  // Fixed container height to prevent bouncing
  const CONTAINER_HEIGHT = 300 * scaleFactor; // 🔥 NEW: Scale container height

  // 🔥 MEMOIZED: Render chip stack to prevent unnecessary recalculations
  const renderChipStack = useMemo(() => {
    return (stackChips: typeof chipComposition, isSelected = false, stackValue: number) => {
      if (stackChips.length === 0) {
        // Show placeholder for empty stacks
        const placeholderText = isSelected ? "" : "All chips moved";
        
        return (
          <div className="flex flex-col items-center">
           
            <div 
              className="relative"
              style={{ 
                height: `${CONTAINER_HEIGHT}px`,
                width: `${120 * scaleFactor}px`, // 🔥 NEW: Scale width
                transform: `scale(${scaleFactor})`, // 🔥 NEW: Apply overall scale
                transformOrigin: 'center bottom'
              }}
            >
              <div 
                className="absolute bottom-0 left-0 border-4 border-dashed border-gray-500 rounded-full flex items-center justify-center text-gray-500 text-sm"
                style={{
                  width: `${144 * scaleFactor}px`, // 🔥 NEW: Scale placeholder size
                  height: `${144 * scaleFactor}px`
                }}
              >
                {placeholderText}
              </div>
            </div>
          </div>
        );
      }

      const stackHeight = stackChips.length;
      
      // Calculate starting position so the bottom chip is always at the same place
      const bottomChipBottom = CONTAINER_HEIGHT - (180 * scaleFactor); // 🔥 NEW: Scale bottom position
      const topChipTop = bottomChipBottom - (stackHeight - 1) * gapBetweenLayers; // Calculate where top chip should start

      return (
        <div className="flex flex-col items-center">
          <div 
            className="relative transition-all duration-500 ease-in-out"
            style={{ 
              transform: `rotateX(60deg) scale(${scaleFactor})`, // 🔥 NEW: Apply scale to entire stack
              transformStyle: 'preserve-3d',
              transformOrigin: 'center bottom',
              width: `${144 * scaleFactor}px`, // 🔥 NEW: Scale width
              height: `${CONTAINER_HEIGHT}px` // Fixed height
            }}
          >
            {stackChips.map((chip, index) => {
              const chipZIndex = stackHeight - index;
              
              if (index === 0) {
                // TopChip: renders top circle at position 0, bottom circle at position 1
                return (
                  <TopChip
                    key={chip.id}
                    imageUrl={tokenImage}
                    text="Dynamic token text" // This will be overridden by tokenSymbol
                    chipValue={chip.value}
                    position={{ top: topChipTop, left: 0 }}
                    zIndex={chipZIndex}
                    isSelected={isSelected}
                    stackHeight={stackHeight}
                    gapBetweenLayers={gapBetweenLayers}
                    tokenSymbol={tokenSymbol} // Pass the token symbol for dynamic text generation
                    scaleFactorProp={scaleFactor} // 🔥 NEW: Pass scale factor to TopChip
                  />
                );
              }
              
              // BottomChip: renders at position (index + 1) to account for TopChip's bottom circle
              const bottomChipPosition = topChipTop + (index + 1) * gapBetweenLayers;
              
              return (
                <BottomChip
                  key={chip.id}
                  chipValue={chip.value}
                  position={{ 
                    top: bottomChipPosition,
                    left: 0 
                  }}
                  zIndex={chipZIndex}
                  isSelected={isSelected}
                  scaleFactorProp={scaleFactor} // 🔥 NEW: Pass scale factor to BottomChip
                />
              );
            })}
          </div>
        </div>
      );
    };
  }, [tokenImage, tokenSymbol, chipComposition, scaleFactor, CONTAINER_HEIGHT, gapBetweenLayers]); // 🔥 NEW: Added scaleFactor dependencies

  if (showType === 'remaining') {
    return renderChipStack(chipComposition, false, displayValue);
  }
  
  if (showType === 'selected') {
    return renderChipStack(chipComposition, true, displayValue);
  }

  // 'both' mode - show both selected and remaining stacks
  // 🔥 FIXED: Calculate separate chip compositions for both stacks
  const selectedChips = useMemo(() => {
    if (selectedValue <= 0) return [];
    
    const chips: Array<{ value: number; color: string; textColor: string; name: string; id: string }> = [];
    let remaining = Math.round(selectedValue * 100) / 100;
    let chipId = 0;

    CHIP_DENOMINATIONS.forEach(denom => {
      const count = Math.floor(remaining / denom.value);
      for (let i = 0; i < count; i++) {
        chips.push({ 
          ...denom, 
          id: `selected-${denom.value}-${chipId++}`
        });
      }
      remaining = Math.round((remaining - count * denom.value) * 100) / 100;
    });

    if (remaining > 0.001) {
      chips.push({
        value: remaining,
        color: 'bg-gray-300',
        textColor: 'black',
        name: `${Math.round(remaining * 100)}¢`,
        id: `selected-penny-${chipId++}`
      });
    }

    return chips.reverse();
  }, [selectedValue]);

  const remainingChips = useMemo(() => {
    if (remainingValue <= 0) return [];
    
    const chips: Array<{ value: number; color: string; textColor: string; name: string; id: string }> = [];
    let remaining = Math.round(remainingValue * 100) / 100;
    let chipId = 0;

    CHIP_DENOMINATIONS.forEach(denom => {
      const count = Math.floor(remaining / denom.value);
      for (let i = 0; i < count; i++) {
        chips.push({ 
          ...denom, 
          id: `remaining-${denom.value}-${chipId++}`
        });
      }
      remaining = Math.round((remaining - count * denom.value) * 100) / 100;
    });

    if (remaining > 0.001) {
      chips.push({
        value: remaining,
        color: 'bg-gray-300',
        textColor: 'black',
        name: `${Math.round(remaining * 100)}¢`,
        id: `remaining-penny-${chipId++}`
      });
    }

    return chips.reverse();
  }, [remainingValue]);

  // Fixed total height for both stacks
  const maxTotalHeight = CONTAINER_HEIGHT + (10 * scaleFactor); // 🔥 NEW: Scale padding

  // Helper function to get chip breakdown for display
  const getChipBreakdown = (stackChips: typeof chipComposition) => {
    const breakdown: { [key: string]: number } = {};
    
    stackChips.forEach(chip => {
      const key = chip.value < 1 ? 'pennies' : chip.name;
      breakdown[key] = (breakdown[key] || 0) + 1;
    });
    
    return breakdown;
  };

  const remainingBreakdown = getChipBreakdown(remainingChips);
  const selectedBreakdown = getChipBreakdown(selectedChips);

  return (
    <div className="flex flex-col items-center" style={{ minHeight: `${maxTotalHeight + (100 * scaleFactor)}px` }}>
      <div className="flex items-end gap-16 mb-8" style={{ minHeight: `${maxTotalHeight}px` }}>
        <div className="flex flex-col items-center">
          <div className="text-lg font-semibold text-white mb-4 text-center">
            Remaining
          </div>  
          {/* {renderChipStack(remainingChips, false, remainingValue)} */}
        </div>

        <div className="flex flex-col items-center">
          <div className="text-lg font-semibold text-yellow-400 mb-4 text-center">
            Selected
          </div>

        </div>
      </div>

      <div className="flex flex-col items-center bg-black/20 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
        <div className="flex gap-8 mb-6">
          <div className="text-center">
            <div className="text-sm text-gray-300 mb-1">Remaining</div>
            <div className="text-2xl font-bold text-white">
              ${remainingValue.toFixed(2)}
            </div>
            <div className="text-xs text-gray-400">
              {remainingChips.length} chips
            </div>
          </div>
          <div className="text-center">
            <div className="text-sm text-yellow-300 mb-1">Selected</div>
            <div className="text-2xl font-bold text-yellow-400">
              ${selectedValue.toFixed(2)}
            </div>
            <div className="text-xs text-yellow-300">
              {selectedChips.length} chips
            </div>
          </div>
        </div>

        <div className="flex gap-8 mb-6 text-xs">
          <div className="text-center min-w-[120px]">
            <div className="text-gray-300 mb-2">Remaining Chips</div>
            {remainingChips.length > 0 ? (
              <div className="flex flex-wrap justify-center gap-1">
                {Object.entries(remainingBreakdown).map(([chipType, count]) => (
                  <span key={chipType} className={`px-2 py-1 rounded text-xs ${
                    chipType === 'pennies' ? 'bg-gray-400 text-black' : 'bg-gray-700 text-white'
                  }`}>
                    {count}×{chipType === 'pennies' ? 'Pennies' : chipType}
                  </span>
                ))}
              </div>
            ) : (
              <div className="text-gray-500">No chips</div>
            )}
          </div>

          <div className="text-center min-w-[120px]">
            <div className="text-yellow-300 mb-2">Selected Chips</div>
            {selectedChips.length > 0 ? (
              <div className="flex flex-wrap justify-center gap-1">
                {Object.entries(selectedBreakdown).map(([chipType, count]) => (
                  <span key={chipType} className={`px-2 py-1 rounded text-xs ${
                    chipType === 'pennies' ? 'bg-gray-400 text-black' : 'bg-yellow-600 text-black'
                  }`}>
                    {count}×{chipType === 'pennies' ? 'Pennies' : chipType}
                  </span>
                ))}
              </div>
            ) : (
              <div className="text-gray-500">No chips</div>
            )}
          </div>
        </div>

        <div className="w-80">
          <div className="flex justify-between text-sm text-gray-300 mb-2">
            <span>$0.00</span>
            <span className="font-medium">
              Selected: ${selectedValue.toFixed(2)}
            </span>
            <span>Max: ${value.toFixed(2)}</span>
          </div>
          <input
            type="range"
            min="0"
            max={value}
            step="0.01"
            value={sliderValue}
            onChange={(e) => handleSliderChange(Number(e.target.value))}
            className="w-full h-3 bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
            style={{
              background: `linear-gradient(to right, #fbbf24 0%, #fbbf24 ${(selectedValue / value) * 100}%, #374151 ${(selectedValue / value) * 100}%, #374151 100%)`
            }}
          />
          <div className="flex justify-between text-xs text-gray-400 mt-1">
            <span>Remaining: {remainingChips.length} chips</span>
            <span>Selected: {selectedChips.length} chips</span>
          </div>
          <style jsx>{`
            .slider::-webkit-slider-thumb {
              appearance: none;
              height: 24px;
              width: 24px;
              border-radius: 50%;
              background: linear-gradient(45deg, #fbbf24, #f59e0b);
              cursor: pointer;
              border: 3px solid #ffffff;
              box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
              transition: all 0.2s ease;
            }
            .slider::-webkit-slider-thumb:hover {
              transform: scale(1.1);
              box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
            }
            .slider::-moz-range-thumb {
              height: 24px;
              width: 24px;
              border-radius: 50%;
              background: linear-gradient(45deg, #fbbf24, #f59e0b);
              cursor: pointer;
              border: 3px solid #ffffff;
              box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
          `}</style>
        </div>

        {/* 🔥 NEW: Scale factor indicator (only in development) */}
        {process.env.NODE_ENV === 'development' && scaleFactor !== 1 && (
          <div className="mt-4 text-xs text-blue-400 bg-black/20 p-2 rounded">
            🔧 Chip scale: {scaleFactor}x (vh: {viewportHeight}px)
          </div>
        )}

        <div className="mt-4 text-xs text-green-400 bg-black/20 p-2 rounded">
          ✓ Dynamic spacing system - perfectly fills chip circumference
        </div>
      </div>
    </div>
  );
}
</file>

<file path="components/ClientPageContent.tsx">
"use client";

import { useEffect } from "react";
import { usePrivy } from '@privy-io/react-auth';
import { SunburstBackground } from "./SunburstBackground";
import { FloatingTokens } from "./FloatingTokens";
import { DesktopLayout } from "./layouts/DesktopLayout";
import { MobileLayout } from "./layouts/MobileLayout";
import { DepositBar } from "./DepositBar";
import { chatMessages } from "@/lib/mock-data";
import { useUIStore } from "@/stores/uiStore";
import { useGameStore } from "@/stores/gameStore";
import { useTokenStore } from "@/stores/tokenStore";
import { useChatStore } from "@/stores/chatStore";

export function ClientPageContent() {
  // Zustand stores
  const { isMobile, setIsMobile } = useUIStore();
  const { currentRoundDeposits, totalAmount } = useGameStore();
  const { selectedTokens, delayedExpandToken, clearDelayedExpand } = useTokenStore();
  const { setMessages } = useChatStore();

  // Initialize chat messages
  useEffect(() => {
    setMessages(chatMessages);
  }, [setMessages]);

  // Detect mobile screen size
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, [setIsMobile]);

  return (
    <main className="h-screen w-screen relative overflow-hidden">
      {/* Background */}
      <SunburstBackground />
      <FloatingTokens />

      {/* Layout based on screen size */}
      {isMobile ? (
        <MobileLayout />
      ) : (
        <DesktopLayout />
      )}

      {/* Deposit Bar - Only show on mobile */}
      {isMobile && <DepositBar selectedTokens={selectedTokens} />}
    </main>
  );
}
</file>

<file path="components/CurrentDeposits.tsx">
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { motion, AnimatePresence } from "framer-motion";
import { Star, Activity } from "lucide-react";
import { PastWinners } from "./PastWinners";
import { useGameStore } from "@/stores/gameStore";

interface CurrentDepositsProps {
  isMobile?: boolean;
}

const casinoColors = ['#FF69B4', '#FF1493', '#FF8C00', '#FFD700', '#FFFF00', '#00FFFF', '#9932CC', '#32CD32'];

export function CurrentDeposits({ isMobile = false }: CurrentDepositsProps) {
  const { currentRoundDeposits: deposits } = useGameStore();
  
  // Reverse deposits so latest appears at the top
  const reversedDeposits = [...deposits].reverse();

  // Mobile layout - no background (uses parent's unified background)
  if (isMobile) {
    return (
      <div className="h-full flex flex-col">
        {/* Column Headers - moved to top, no title needed since tab shows "Current Round" */}
        <div className="grid grid-cols-12 gap-2 mb-3 px-3 flex-shrink-0">
          <div className="col-span-5">
            <span className="text-sm font-black uppercase casino-text-yellow"
              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              User
            </span>
          </div>
          <div className="col-span-3">
            <span className="text-sm font-black uppercase casino-text-yellow text-center"
              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              Token
            </span>
          </div>
          <div className="col-span-4">
            <span className="text-sm font-black uppercase casino-text-yellow text-right"
              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              Value
            </span>
          </div>
        </div>
        
        {/* Deposits List - No background, inherits from parent */}
        <div className="flex-1 overflow-hidden min-w-0 min-h-0">
          <ScrollArea className="h-full custom-scrollbar">
            <div className="space-y-1 pr-2">
              <AnimatePresence mode="popLayout">
                {reversedDeposits.length === 0 ? (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="text-center py-8"
                  >
                    <div className="flex flex-col items-center gap-2">
                      <motion.div
                        animate={{
                          rotate: 360
                        }}
                        transition={{
                          duration: 3,
                          repeat: Infinity,
                          ease: "linear"
                        }}
                      >
                        <Activity className="h-8 w-8 casino-text-gold" />
                      </motion.div>
                      <span className="text-sm casino-text-gold font-bold">
                        Waiting for deposits...
                      </span>
                    </div>
                  </motion.div>
                ) : (
                  reversedDeposits.map((deposit, i) => {
                    // Calculate index for color based on original position
                    const originalIndex = deposits.findIndex(d => d.id === deposit.id);
                    
                    return (
                      <motion.div
                        key={deposit.id}
                        initial={{ opacity: 0, y: -20, scale: 0.9 }}
                        animate={{ 
                          opacity: 1, 
                          y: 0, 
                          scale: 1,
                          transition: {
                            type: "spring",
                            stiffness: 200,
                            damping: 20
                          }
                        }}
                        exit={{ 
                          opacity: 0, 
                          x: 20, 
                          scale: 0.8,
                          transition: {
                            duration: 0.3
                          }
                        }}
                        layout
                        className="py-3 px-3 rounded-xl overflow-hidden relative"
                        style={{
                          // 🔥 FIXED: Alternating backgrounds - darker and lighter
                          background: i % 2 === 0
                            ? 'linear-gradient(to right, #4A0E4E, #3A0A3E)' // Darker background
                            : 'linear-gradient(to right, #5A1E5E, #4A1A4A)', // Lighter background
                          borderRadius: '12px',
                          border: i === 0 ? '2px solid rgba(255, 215, 0, 0.6)' : '1px solid rgba(255, 215, 0, 0.2)'
                        }}
                      >
                        {/* Special glow for newest deposit */}
                        {i === 0 && (
                          <motion.div
                            initial={{ opacity: 0.8 }}
                            animate={{ 
                              opacity: [0.8, 0.3, 0.8],
                              boxShadow: [
                                '0 0 0px rgba(255, 215, 0, 0)',
                                '0 0 20px rgba(255, 215, 0, 0.8)',
                                '0 0 0px rgba(255, 215, 0, 0)'
                              ]
                            }}
                            transition={{ 
                              duration: 2,
                              repeat: 3
                            }}
                            className="absolute inset-0 rounded-xl"
                          />
                        )}
                        
                        <div className="grid grid-cols-12 gap-2 items-center relative z-10">
                          {/* User */}
                          <div className="col-span-5 flex items-center">
                            <motion.div
                              className="h-3 w-3 rounded-full mr-3 flex-shrink-0"
                              style={{
                                background: casinoColors[originalIndex % casinoColors.length]
                              }}
                              animate={i === 0 ? {
                                scale: [1, 1.3, 1],
                                boxShadow: [
                                  `0 0 0px ${casinoColors[originalIndex % casinoColors.length]}`,
                                  `0 0 15px ${casinoColors[originalIndex % casinoColors.length]}`,
                                  `0 0 0px ${casinoColors[originalIndex % casinoColors.length]}`
                                ]
                              } : {}}
                              transition={{
                                duration: 1,
                                repeat: i === 0 ? 2 : 0
                              }}
                            />
                            <span className="font-bold casino-text-gold text-sm truncate"
                              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                              {deposit.user}
                            </span>
                          </div>
                          
                          {/* Token */}
                          <div className="col-span-3 text-center">
                            <span className="font-bold casino-text-yellow text-sm"
                              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                              {deposit.token}
                            </span>
                          </div>
                          
                          {/* 🔥 FIXED: Value - properly right-aligned with more padding */}
                          <div className="col-span-4 flex justify-end pr-1">
                            <motion.span 
                              className="font-bold casino-text-gold text-sm text-right"
                              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}
                              initial={i === 0 ? { scale: 1.2, color: '#FFFF00' } : { scale: 1 }}
                              animate={i === 0 ? { 
                                scale: 1,
                                color: '#FFD700'
                              } : {}}
                              transition={{ 
                                duration: 0.5
                              }}
                            >
                              ${deposit.amount.toFixed(0)}
                            </motion.span>
                          </div>
                        </div>
                      </motion.div>
                    );
                  })
                )}
              </AnimatePresence>
            </div>
          </ScrollArea>
        </div>
      </div>
    );
  }

  // Desktop layout - keep card wrapper
  return (
    <Card className="casino-box casino-box-gold overflow-scroll p-0 h-full flex flex-col relative">
      {/* Corner stars */}
      <div className="absolute top-2 left-2 z-10">
        <Star className="h-4 w-4 casino-star" fill="currentColor" />
      </div>
      <div className="absolute top-2 right-2 z-10">
        <Star className="h-4 w-4 casino-star" fill="currentColor" />
      </div>
      
      <CardContent className="p-3 h-full flex flex-col min-w-0">
        {/* Title */}
        <div className="mb-3">
          <div className="flex items-center justify-center gap-2">
            <Activity className="h-4 w-4 casino-text-gold" />
            <h2 className="text-lg font-black uppercase text-center tracking-wide casino-text-gold truncate" 
                style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              Current Round
            </h2>
            <motion.div
              animate={{
                scale: [1, 1.2, 1],
                opacity: [0.7, 1, 0.7]
              }}
              transition={{
                duration: 2,
                repeat: Infinity
              }}
            >
              <Activity className="h-4 w-4 casino-text-pink" />
            </motion.div>
          </div>
        </div>

        {/* Column Headers */}
        <div className="grid grid-cols-12 gap-2 mb-2 px-2 flex-shrink-0">
          <div className="col-span-5">
            <span className="text-xs font-black uppercase casino-text-yellow"
              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              User
            </span>
          </div>
          <div className="col-span-3">
            <span className="text-xs font-black uppercase casino-text-yellow text-center"
              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              Token
            </span>
          </div>
          <div className="col-span-4">
            <span className="text-xs font-black uppercase casino-text-yellow text-right"
              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              Amount
            </span>
          </div>
        </div>
        
        {/* Deposits List */}
        <div className="flex-1 overflow-hidden min-w-0 min-h-0 max-h-[200px]">
          <ScrollArea className="h-full custom-scrollbar">
            <div className="space-y-1 pr-2">
              <AnimatePresence mode="popLayout">
                {reversedDeposits.length === 0 ? (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="text-center py-6"
                  >
                    <div className="flex flex-col items-center gap-2">
                      <motion.div
                        animate={{
                          rotate: 360
                        }}
                        transition={{
                          duration: 3,
                          repeat: Infinity,
                          ease: "linear"
                        }}
                      >
                        <Activity className="h-6 w-6 casino-text-gold" />
                      </motion.div>
                      <span className="text-xs casino-text-gold font-bold">
                        Waiting for deposits...
                      </span>
                    </div>
                  </motion.div>
                ) : (
                  reversedDeposits.map((deposit, i) => {
                    // Calculate index for color based on original position
                    const originalIndex = deposits.findIndex(d => d.id === deposit.id);
                    
                    return (
                      <motion.div
                        key={deposit.id}
                        initial={{ opacity: 0, y: -20, scale: 0.9 }}
                        animate={{ 
                          opacity: 1, 
                          y: 0, 
                          scale: 1,
                          transition: {
                            type: "spring",
                            stiffness: 200,
                            damping: 20
                          }
                        }}
                        exit={{ 
                          opacity: 0, 
                          x: 20, 
                          scale: 0.8,
                          transition: {
                            duration: 0.3
                          }
                        }}
                        layout
                        className="py-1 px-2 rounded-xl overflow-hidden relative"
                        style={{
                          background: originalIndex % 2 === 0
                            ? 'linear-gradient(to right, #4A0E4E, #2D0A30)'
                            : 'linear-gradient(to right, #3A0A3E, #1D051A)',
                          borderRadius: '8px',
                          border: i === 0 ? '1px solid rgba(255, 215, 0, 0.6)' : '1px solid rgba(255, 215, 0, 0.2)'
                        }}
                      >
                        {/* Special glow for newest deposit */}
                        {i === 0 && (
                          <motion.div
                            initial={{ opacity: 0.8 }}
                            animate={{ 
                              opacity: [0.8, 0.3, 0.8],
                              boxShadow: [
                                '0 0 0px rgba(255, 215, 0, 0)',
                                '0 0 15px rgba(255, 215, 0, 0.8)',
                                '0 0 0px rgba(255, 215, 0, 0)'
                              ]
                            }}
                            transition={{ 
                              duration: 2,
                              repeat: 3
                            }}
                            className="absolute inset-0 rounded-xl"
                          />
                        )}
                        
                        <div className="grid grid-cols-12 gap-2 items-center relative z-10">
                          {/* User */}
                          <div className="col-span-5 flex items-center">
                            <motion.div
                              className="h-2 w-2 rounded-full mr-2 flex-shrink-0"
                              style={{
                                background: casinoColors[originalIndex % casinoColors.length]
                              }}
                              animate={i === 0 ? {
                                scale: [1, 1.3, 1],
                                boxShadow: [
                                  `0 0 0px ${casinoColors[originalIndex % casinoColors.length]}`,
                                  `0 0 12px ${casinoColors[originalIndex % casinoColors.length]}`,
                                  `0 0 0px ${casinoColors[originalIndex % casinoColors.length]}`
                                ]
                              } : {}}
                              transition={{
                                duration: 1,
                                repeat: i === 0 ? 2 : 0
                              }}
                            />
                            <span className="font-bold casino-text-gold text-xs truncate"
                              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                              {deposit.user}
                            </span>
                          </div>
                          
                          {/* Token */}
                          <div className="col-span-3 text-center">
                            <span className="font-bold casino-text-yellow text-xs"
                              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                              {deposit.token}
                            </span>
                          </div>
                          
                          {/* Amount */}
                          <div className="col-span-4 text-right">
                            <motion.span 
                              className="font-bold casino-text-gold text-xs"
                              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}
                              initial={i === 0 ? { scale: 1.2, color: '#FFFF00' } : { scale: 1 }}
                              animate={i === 0 ? { 
                                scale: 1,
                                color: '#FFD700'
                              } : {}}
                              transition={{ 
                                duration: 0.5
                              }}
                            >
                              ${deposit.amount.toFixed(0)}
                            </motion.span>
                          </div>
                        </div>
                      </motion.div>
                    );
                  })
                )}
              </AnimatePresence>
            </div>
          </ScrollArea>
        </div>
        
        {/* Past Winners at the bottom - Only show on desktop */}
        {!isMobile && (
          <div className="h-[180px] flex-shrink-0 mt-auto">
            <PastWinners />
          </div>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="components/CustomTooltip.tsx">
import { motion } from "framer-motion";

interface Deposit {
  id: string;
  user: string;
  token: string;
  amount: number;
  timestamp: Date;
}

interface ChartDataItem {
  value: number;
  color: string;
  deposit?: Deposit;
  isRemaining?: boolean;
}

interface CustomTooltipProps {
  active?: boolean;
  payload?: Array<{
    payload: ChartDataItem;
  }>;
}

export function CustomTooltip({ active, payload }: CustomTooltipProps) {
  if (!active || !payload || !payload[0]) return null;
  
  const data = payload[0].payload as ChartDataItem;
  
  if (data.isRemaining) {
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        className="casino-box casino-box-gold p-3 shadow-lg border-2 border-yellow-400 z-[99999] relative"
      >
        <div className="text-center">
          <p className="text-yellow-300 font-bold text-sm" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
            REMAINING CAPACITY
          </p>
          <p className="text-gold-400 text-lg font-black" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
            ${data.value.toFixed(0)}
          </p>
        </div>
      </motion.div>
    );
  }
  
  if (!data.deposit) return null;
  
  const timeAgo = Math.floor((Date.now() - data.deposit.timestamp.getTime()) / 1000);
  const timeString = timeAgo < 60 ? `${timeAgo}s ago` : 
                   timeAgo < 3600 ? `${Math.floor(timeAgo / 60)}m ago` : 
                   `${Math.floor(timeAgo / 3600)}h ago`;
  
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.8 }}
      animate={{ opacity: 1, scale: 1 }}
      className="casino-box casino-box-gold p-3 shadow-lg border-2 border-yellow-400 min-w-[200px] z-[99999] relative"
    >
      <div className="space-y-2">
        <div className="flex items-center justify-between">
          <span className="text-yellow-300 font-bold text-xs uppercase" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
            Deposit
          </span>
          <span className="text-pink-400 font-bold text-xs" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
            {timeString}
          </span>
        </div>
        
        <div className="text-center border-t border-yellow-400/30 pt-2">
          <p className="text-gold-400 text-xl font-black" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
            ${data.deposit.amount.toFixed(0)}
          </p>
          <p className="text-yellow-300 text-sm font-bold" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
            {data.deposit.token}
          </p>
        </div>
        
        <div className="border-t border-yellow-400/30 pt-2">
          <p className="text-cyan-300 text-sm font-semibold" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
            {data.deposit.user}
          </p>
          <p className="text-gray-400 text-xs" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
            ID: {data.deposit.id.slice(0, 8)}...
          </p>
        </div>
      </div>
    </motion.div>
  );
}
</file>

<file path="components/DebugModal.tsx">
"use client";

import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { motion } from "framer-motion";
import { 
  Trash2, 
  TestTube, 
  Eye, 
  X, 
  Check, 
  Settings, 
  BarChart3, 
  Coins,
  Zap,
  Monitor
} from "lucide-react";
import { useDebugStore } from "@/stores/debugStore";
import { useSettingsStore } from "@/stores/settingsStore";
import { toast } from "@/hooks/use-toast";
import { SAMPLE_WALLETS, TOKEN_SELECTOR_MODES } from "@/lib/tokenSelectorConstants";

interface DebugModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export function DebugModal({ isOpen, onClose }: DebugModalProps) {
  const { debugWalletAddress, setDebugWalletAddress, clearDebugWalletAddress } = useDebugStore();
  const { 
    tokenSelectorMode, 
    isProModeEnabled, 
    showAdvancedControls,
    autoSelectOptimalAmounts,
    setTokenSelectorMode,
    setProModeEnabled,
    setShowAdvancedControls,
    setAutoSelectOptimalAmounts
  } = useSettingsStore();
  
  const [inputAddress, setInputAddress] = useState(debugWalletAddress);

  const handleApplyDebugAddress = () => {
    const trimmedAddress = inputAddress.trim();
    
    if (!trimmedAddress) {
      toast({
        title: "Invalid Address",
        description: "Please enter a valid Solana wallet address",
        variant: "destructive"
      });
      return;
    }

    // Basic validation - Solana addresses are typically 44 characters
    if (trimmedAddress.length < 32 || trimmedAddress.length > 44) {
      toast({
        title: "Invalid Address Format",
        description: "Solana addresses should be 32-44 characters long",
        variant: "destructive"
      });
      return;
    }

    setDebugWalletAddress(trimmedAddress);
    toast({
      title: "🔧 Debug Mode Activated",
      description: `Now using tokens from: ${trimmedAddress.slice(0, 8)}...${trimmedAddress.slice(-8)}`,
      duration: 4000
    });
    onClose();
  };

  const handleClearDebugAddress = () => {
    clearDebugWalletAddress();
    setInputAddress("");
    toast({
      title: "Debug Mode Disabled",
      description: "Switched back to your connected wallet",
      duration: 3000
    });
  };

  const handleUseSampleWallet = (address: string, name: string) => {
    setInputAddress(address);
    toast({
      title: "Sample Wallet Loaded",
      description: `Loaded ${name} address - click Apply to use it`,
      duration: 3000
    });
  };

  const handleProModeToggle = (enabled: boolean) => {
    setProModeEnabled(enabled);
    toast({
      title: enabled ? "🚀 Pro Mode Enabled" : "Pro Mode Disabled",
      description: enabled 
        ? "Switched to desktop token selector with advanced features"
        : "Switched back to visual chip selector",
      duration: 3000
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent 
        className="max-w-3xl max-h-[80vh] overflow-y-auto border-4 border-[#FFD700] shadow-2xl"
        style={{
          background: 'linear-gradient(145deg, #4A0E4E, #2D0A30)',
          boxShadow: `
            0 0 40px rgba(255, 215, 0, 1),
            inset 0 2px 0 rgba(255, 215, 0, 0.3),
            inset 0 -2px 0 rgba(0, 0, 0, 0.3)
          `,
          borderRadius: '16px',
          zIndex: 9999
        }}
      >
        <DialogHeader className="border-b-2 border-[#FFD700] pb-4">
          <DialogTitle className="casino-text-gold font-black text-center text-xl flex items-center justify-center gap-2" 
                       style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
            <Settings className="h-5 w-5" />
            Settings & Debug Tools
            <Settings className="h-5 w-5" />
          </DialogTitle>
        </DialogHeader>
        
        <div className="py-6 space-y-6">
          {/* Token Selector Mode Section */}
          <div 
            className="p-4 rounded-xl border-2 border-[#FFD700]/60"
            style={{
              background: 'rgba(74, 14, 78, 0.5)',
              boxShadow: '0 0 10px rgba(255, 215, 0, 0.3)'
            }}
          >
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <Monitor className="h-5 w-5 casino-text-gold" />
                <h3 className="casino-text-gold font-black text-lg" 
                    style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                  Token Selector Mode
                </h3>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {TOKEN_SELECTOR_MODES.map((mode) => (
                  <motion.div
                    key={mode.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    className={`p-4 rounded-xl border-2 cursor-pointer transition-all duration-200 ${
                      tokenSelectorMode === mode.id
                        ? "border-[#FFD700] bg-[#FFD700]/20"
                        : "border-[#FFD700]/40 hover:border-[#FFD700]/80"
                    }`}
                    onClick={() => setTokenSelectorMode(mode.id)}
                  >
                    <div className="flex items-center gap-3">
                      <div className="text-2xl">{mode.icon}</div>
                      <div className="flex-1">
                        <div className="casino-text-gold font-bold" 
                             style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                          {mode.name}
                        </div>
                        <div className="text-xs casino-text-yellow">
                          {mode.description}
                        </div>
                      </div>
                      {tokenSelectorMode === mode.id && (
                        <Check className="h-5 w-5 casino-text-gold" />
                      )}
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          </div>

          {/* Pro Mode Settings */}
          <div 
            className="p-4 rounded-xl border-2 border-[#FFD700]/60"
            style={{
              background: 'rgba(74, 14, 78, 0.5)',
              boxShadow: '0 0 10px rgba(255, 215, 0, 0.3)'
            }}
          >
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <BarChart3 className="h-5 w-5 casino-text-gold" />
                <h3 className="casino-text-gold font-black text-lg" 
                    style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                  Pro Mode Features
                </h3>
              </div>
              
              <div className="space-y-4">
                {/* Pro Mode Toggle */}
                <div className="flex items-center justify-between">
                  <div>
                    <div className="casino-text-gold font-bold" 
                         style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                      Enable Pro Mode
                    </div>
                    <div className="text-xs casino-text-yellow">
                      Switch to desktop-style token selector with advanced features
                    </div>
                  </div>
                  <Switch
                    checked={isProModeEnabled}
                    onCheckedChange={handleProModeToggle}
                  />
                </div>

                {/* Advanced Controls Toggle */}
                <div className="flex items-center justify-between">
                  <div>
                    <div className="casino-text-gold font-bold" 
                         style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                      Show Advanced Controls
                    </div>
                    <div className="text-xs casino-text-yellow">
                      Show bulk selection and advanced filtering options
                    </div>
                  </div>
                  <Switch
                    checked={showAdvancedControls}
                    onCheckedChange={setShowAdvancedControls}
                    disabled={!isProModeEnabled}
                  />
                </div>

                {/* Auto-Select Optimal Amounts */}
                <div className="flex items-center justify-between">
                  <div>
                    <div className="casino-text-gold font-bold" 
                         style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                      Auto-Select Optimal Amounts
                    </div>
                    <div className="text-xs casino-text-yellow">
                      Automatically select 50% instead of 25% when adding tokens
                    </div>
                  </div>
                  <Switch
                    checked={autoSelectOptimalAmounts}
                    onCheckedChange={setAutoSelectOptimalAmounts}
                    disabled={!isProModeEnabled}
                  />
                </div>
              </div>
            </div>
          </div>

          {/* Debug Section */}
          <div 
            className="p-4 rounded-xl border-2 border-[#FFD700]/60"
            style={{
              background: 'rgba(74, 14, 78, 0.5)',
              boxShadow: '0 0 10px rgba(255, 215, 0, 0.3)'
            }}
          >
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <TestTube className="h-5 w-5 casino-text-gold" />
                <h3 className="casino-text-gold font-black text-lg" 
                    style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                  Debug Tools
                </h3>
              </div>

              {/* Current Status */}
              <div className="text-center">
                {debugWalletAddress ? (
                  <div className="space-y-2">
                    <div className="flex items-center justify-center gap-2">
                      <Eye className="h-4 w-4 casino-text-pink" />
                      <span className="casino-text-pink font-bold">Debug Mode Active</span>
                    </div>
                    <div className="text-xs casino-text-gold font-mono bg-black/40 p-2 rounded border border-[#FFD700]/30">
                      {debugWalletAddress.slice(0, 12)}...{debugWalletAddress.slice(-12)}
                    </div>
                    <motion.div
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <Button
                        onClick={handleClearDebugAddress}
                        className="px-4 py-2 bg-[#FF1493] hover:bg-[#DC143C] text-white font-black border-2 border-[#FF1493] transition-all duration-200"
                        style={{ 
                          fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                          boxShadow: "0 0 8px rgba(255, 20, 147, 0.6)",
                          borderRadius: "8px"
                        }}
                      >
                        <X className="h-4 w-4 mr-2" />
                        Disable Debug Mode
                      </Button>
                    </motion.div>
                  </div>
                ) : (
                  <div className="flex items-center justify-center gap-2">
                    <span className="casino-text-gold font-bold">Normal Mode (Connected Wallet)</span>
                  </div>
                )}
              </div>

              {/* Manual Address Input */}
              <div className="space-y-3">
                <Label className="casino-text-gold font-bold" 
                       style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                  Debug Wallet Address
                </Label>
                <Input
                  placeholder="Paste any Solana wallet address here..."
                  value={inputAddress}
                  onChange={(e) => setInputAddress(e.target.value)}
                  className="casino-input font-mono text-sm"
                  style={{ 
                    fontFamily: "monospace",
                    background: 'var(--casino-dark-purple)',
                    border: '2px solid var(--casino-gold)',
                    color: 'var(--casino-gold)'
                  }}
                />
                <div className="flex gap-3">
                  <motion.div
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    className="flex-1"
                  >
                    <Button
                      onClick={handleApplyDebugAddress}
                      disabled={!inputAddress.trim()}
                      className="w-full casino-button border-2 border-[#FFD700] font-black"
                      style={{ 
                        fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                        boxShadow: "0 0 12px rgba(255, 215, 0, 0.8)",
                        borderRadius: "8px"
                      }}
                    >
                      <Check className="h-4 w-4 mr-2" />
                      Apply Debug Address
                    </Button>
                  </motion.div>
                  
                  <motion.div
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Button
                      onClick={() => setInputAddress("")}
                      className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-black border-2 border-gray-500"
                      style={{ 
                        fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                        boxShadow: "0 0 8px rgba(100, 100, 100, 0.6)",
                        borderRadius: "8px"
                      }}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </motion.div>
                </div>
              </div>

              {/* Sample Wallets */}
              <div className="space-y-3">
                <Label className="casino-text-gold font-bold" 
                       style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                  Quick Test Wallets
                </Label>
                <div className="grid gap-2">
                  {SAMPLE_WALLETS.map((wallet, index) => (
                    <motion.div
                      key={index}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      className="p-3 rounded-xl border-2 border-[#FFD700]/40 cursor-pointer hover:border-[#FFFF00] transition-all duration-200"
                      style={{
                        background: 'rgba(74, 14, 78, 0.3)',
                        boxShadow: '0 0 8px rgba(255, 215, 0, 0.3)'
                      }}
                      onClick={() => handleUseSampleWallet(wallet.address, wallet.name)}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="casino-text-gold font-bold text-sm mb-1" 
                               style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                            {wallet.name}
                          </div>
                          <div className="text-xs casino-text-yellow mb-1">
                            {wallet.description}
                          </div>
                          <div className="text-xs casino-text-white font-mono bg-black/40 p-1 rounded border border-[#FFD700]/30">
                            {wallet.address.slice(0, 12)}...{wallet.address.slice(-12)}
                          </div>
                        </div>
                        <Eye className="h-4 w-4 casino-text-gold ml-3" />
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Instructions */}
          <div 
            className="p-4 rounded-xl border-2 border-[#FFD700]/60"
            style={{
              background: 'rgba(74, 14, 78, 0.3)',
              boxShadow: '0 0 8px rgba(255, 215, 0, 0.3)'
            }}
          >
            <div className="casino-text-yellow font-bold mb-3 text-center" 
                 style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              🔧 How to Use
            </div>
            <ul className="text-sm casino-text-gold space-y-2">
              <li>• <strong>Pro Mode:</strong> Toggle between visual chip stacks and desktop-style token selector</li>
              <li>• <strong>Debug Mode:</strong> View tokens from any Solana wallet for testing</li>
              <li>• <strong>Advanced Controls:</strong> Enable bulk selection and advanced filtering options</li>
              <li>• <strong>Settings persist</strong> across browser sessions</li>
            </ul>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="components/DepositBar.tsx">
"use client";

import { useState, useMemo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Connection, PublicKey, Transaction, SystemProgram, LAMPORTS_PER_SOL } from '@solana/web3.js';
import { getAssociatedTokenAddressSync, createAssociatedTokenAccountInstruction, createTransferInstruction } from '@solana/spl-token';
import { usePrivy } from '@privy-io/react-auth';
import { Zap, ArrowRight, Wallet, ChevronDown, Settings } from "lucide-react";
import { Button } from "@/components/ui/button";
import { TokenSelector } from "./tokenSelector/TokenSelector";
import { toast } from '@/hooks/use-toast';
import { jackpotAddr } from "@/lib/constants";
import { useSolPriceUSD } from "@/hooks/useSolPriceUSD";
import { useTokenPricesSol } from "@/hooks/useTokenPriceSol";
import { useTokenStore } from "@/stores/tokenStore";
import { useUIStore } from "@/stores/uiStore";
import { useSettingsStore } from "@/stores/settingsStore";

interface TokenRow {
  mint: string;
  amount: number;
  decimals: number;
  symbol: string;
  name: string;
  image: string;
  selected?: boolean;
  selectedAmount?: number;
}

interface DepositBarProps {
  selectedTokens: TokenRow[];
}

declare global {
  interface Window {
    solana?: {
      signAndSendTransaction: (transaction: any) => Promise<{ signature: string }>;
      isPhantom?: boolean;
    };
  }
}

// USD formatting helper function
function formatUSDValue(usdValue: number): string {
  if (usdValue >= 1000000) {
    return `$${(usdValue / 1000000).toFixed(1)}M`;
  } else if (usdValue >= 1000) {
    return `$${(usdValue / 1000).toFixed(1)}K`;
  } else if (usdValue >= 1) {
    return `$${usdValue.toFixed(2)}`;
  } else if (usdValue >= 0.01) {
    return `$${usdValue.toFixed(2)}`;
  } else {
    return `$${usdValue.toFixed(4)}`;
  }
}

export function DepositBar({ selectedTokens }: DepositBarProps) {
  const { authenticated, user } = usePrivy();
  const publicKey = user?.wallet?.address;
  const [depositing, setDepositing] = useState(false);
  
  const connection = new Connection(process.env.NEXT_PUBLIC_HELIUS_RPC!);

  // Zustand stores
  const {
    selectedTokens: localSelectedTokens,
    delayedExpandToken,
    clearDelayedExpand,
    clearSelectedTokens
  } = useTokenStore();
  
  const { isExpanded, setIsExpanded } = useUIStore();
  
  // Settings store for Pro Mode
  const { isProModeEnabled, toggleProMode } = useSettingsStore();

  // Add price hooks for USD calculation
  const { price: solPrice } = useSolPriceUSD();
  
  // Get all mint addresses for price fetching
  const mintAddresses = useMemo(() => localSelectedTokens?.map(token => token.mint) || [], [localSelectedTokens]);
  const { prices: tokenPricesInSol } = useTokenPricesSol(mintAddresses);

  // Calculate total USD value of selected tokens
  const totalSelectedUSDValue = useMemo(() => {
    if (!localSelectedTokens.length || !solPrice) return 0;

    return localSelectedTokens.reduce((total, token) => {
      const selectedAmount = token.selectedAmount ?? 0;
      if (selectedAmount <= 0) return total;

      // For SOL, direct USD calculation
      if (token.mint === 'So11111111111111111111111111111111111111112') {
        return total + (selectedAmount * solPrice);
      }

      // For other tokens, convert through SOL price
      const tokenPriceInSol = tokenPricesInSol[token.mint];
      if (tokenPriceInSol) {
        const valueInSol = selectedAmount * tokenPriceInSol;
        return total + (valueInSol * solPrice);
      }

      return total;
    }, 0);
  }, [localSelectedTokens, tokenPricesInSol, solPrice]);

  const buildTransaction = async () => {
    if (!publicKey) throw new Error('Wallet not connected');
    const pubKey = new PublicKey(publicKey);
    const tx = new Transaction();

    for (const token of localSelectedTokens) {
      const amount = token.selectedAmount ?? 0;
      if (amount <= 0) continue;

      if (token.mint === 'So11111111111111111111111111111111111111112') {
        tx.add(
          SystemProgram.transfer({
            fromPubkey: pubKey,
            toPubkey: new PublicKey(jackpotAddr),
            lamports: Math.round(amount * LAMPORTS_PER_SOL),
          }),
        );
      } else {
        const mint = new PublicKey(token.mint);
        const fromAta = getAssociatedTokenAddressSync(mint, pubKey);
        const toAta = getAssociatedTokenAddressSync(mint, new PublicKey(jackpotAddr), true);

        if (!(await connection.getAccountInfo(toAta))) {
          tx.add(
            createAssociatedTokenAccountInstruction(
              pubKey,
              toAta,
              new PublicKey(jackpotAddr),
              mint,
            ),
          );
        }

        tx.add(
          createTransferInstruction(
            fromAta,
            toAta,
            pubKey,
            BigInt(Math.round(amount * 10 ** token.decimals)),
          ),
        );
      }
    }

    tx.feePayer = pubKey;
    tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;
    return tx;
  };

  const handleDeposit = async () => {
    if (!authenticated || !publicKey || localSelectedTokens.length === 0) {
      toast({ title: 'Please select tokens to deposit', variant: 'destructive' });
      return;
    }

    try {
      setDepositing(true);
      const tx = await buildTransaction();

      if (window.solana && window.solana.signAndSendTransaction) {
        const signature = await window.solana.signAndSendTransaction(tx);
        await connection.confirmTransaction(signature.signature, 'confirmed');
        toast({ title: 'Successfully entered the round!', description: signature.signature });
        clearSelectedTokens();
        setIsExpanded(false);
      } else {
        throw new Error('Solana wallet not found');
      }
    } catch (e: any) {
      console.error('Deposit error:', e);
      toast({
        title: 'Deposit failed',
        description: e?.message ?? 'Unknown error',
        variant: 'destructive',
      });
    } finally {
      setDepositing(false);
    }
  };

  return (
    <>
      {/* Expanded Token Selector - FIXED: Proper height constraints */}
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ y: "100%" }}
            animate={{ y: 0 }}
            exit={{ y: "100%" }}
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
            className="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm"
          >
            <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-b from-[#4A0E4E] to-[#2D0A30] border-t-4 border-[#FFD700] flex flex-col rounded-t-xl"
                 style={{ height: '85vh' }}>
              {/* Header */}
              <div className="p-4 border-b-2 border-[#FFD700] flex items-center justify-between flex-shrink-0">
                <h2 className="text-xl font-black casino-text-gold" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                  Select Tokens to Deposit
                </h2>
                <div className="flex items-center gap-2">
                  {/* Pro Mode Toggle */}
                  <motion.div
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Button
                      onClick={toggleProMode}
                      className={`casino-button border-2 ${isProModeEnabled ? 'bg-[#FFFF00] text-black' : ''}`}
                      style={{ 
                        fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                        boxShadow: "0 0 8px rgba(255, 215, 0, 0.6)",
                        borderRadius: "12px",
                        padding: "8px 12px"
                      }}
                    >
                      <Settings className="h-4 w-4 mr-1" />
                      {isProModeEnabled ? "Pro Mode" : "Basic Mode"}
                    </Button>
                  </motion.div>
                  
                  {/* Close Button */}
                  <motion.div
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Button
                      onClick={() => setIsExpanded(false)}
                      className="casino-button border-2 border-[#FFD700]"
                      style={{ 
                        fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                        boxShadow: "0 0 8px rgba(255, 215, 0, 0.6)",
                        borderRadius: "12px"
                      }}
                    >
                      <ChevronDown className="h-5 w-5" />
                    </Button>
                  </motion.div>
                </div>
              </div>

              {/* Token Selector - FIXED: Proper flex constraints */}
              <div className="flex-1 min-h-0 p-4">
                <TokenSelector
                  selectedTokens={localSelectedTokens}
                  onSelectedTokensChange={() => {}} // Handled by Zustand
                  delayedExpandToken={delayedExpandToken}
                  onClearDelayedExpand={clearDelayedExpand}
                  isMobile={true}
                />
              </div>

              {/* Action Buttons - FIXED: Proper button sizing */}
              <div className="p-4 border-t-2 border-[#FFD700] flex gap-3 flex-shrink-0">
                {/* Cancel button - smaller with fixed width */}
                <motion.div
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className="flex-shrink-0"
                  style={{ width: '100px' }}
                >
                  <Button
                    onClick={() => setIsExpanded(false)}
                    className="w-full bg-gray-600 hover:bg-gray-700 text-white font-black border-2 border-gray-500 transition-all duration-200"
                    style={{ 
                      fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                      boxShadow: "0 0 8px rgba(100, 100, 100, 0.6)",
                      borderRadius: "12px"
                    }}
                  >
                    Cancel
                  </Button>
                </motion.div>
                
                {/* Deposit button - much larger taking remaining space */}
                <motion.div
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className="flex-1"
                >
                  <Button
                    onClick={handleDeposit}
                    disabled={depositing || localSelectedTokens.length === 0}
                    className="w-full casino-button border-2 border-[#FFD700] font-black"
                    style={{ 
                      fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                      boxShadow: "0 0 12px rgba(255, 215, 0, 0.8)",
                      borderRadius: "12px"
                    }}
                  >
                    {depositing ? (
                      <>
                        <motion.div
                          animate={{ rotate: 360 }}
                          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                        >
                          <Zap className="h-5 w-5 mr-2" fill="currentColor" />
                        </motion.div>
                        Processing...
                      </>
                    ) : (
                      <>
                        <Zap className="h-5 w-5 mr-2" fill="currentColor" />
                        Deposit {localSelectedTokens.length > 0 && totalSelectedUSDValue > 0 && formatUSDValue(totalSelectedUSDValue)}
                        <ArrowRight className="h-5 w-5 ml-2" />
                      </>
                    )}
                  </Button>
                </motion.div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Fixed Bottom Bar with centered "Select Tokens" text */}
      <div className="fixed bottom-0 left-0 right-0 z-40">
        <div className="w-full bg-gradient-to-r from-[#FFD700] to-[#FFFF00] border-t-4 border-[#DAA520] rounded-t-xl">
          {authenticated ? (
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => setIsExpanded(true)}
              className="w-full px-4 py-3 flex items-center justify-center cursor-pointer hover:bg-[#FFFF00] transition-colors duration-200"
            >
              <span className="text-black font-black text-lg text-center" 
                    style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                Select Tokens
              </span>
            </motion.button>
          ) : (
            <div className="flex items-center justify-center px-4 py-3">
              <div className="flex items-center gap-3">
                <Wallet className="h-5 w-5 text-black" />
                <span className="text-black font-black text-base" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                  Connect Wallet to Play
                </span>
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  );
}
</file>

<file path="components/EmojiPicker.tsx">
"use client";

import { useState, useRef, useEffect } from "react";
import { emojiMap } from "@/lib/emoji-map";
import { SmileIcon, Star } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { createPortal } from "react-dom";

interface EmojiPickerProps {
  onEmojiSelect: (emoji: string) => void;
  isOpen?: boolean;
  setIsOpen?: (isOpen: boolean) => void;
}

export function EmojiPicker({ onEmojiSelect, isOpen: controlledIsOpen, setIsOpen: setControlledIsOpen }: EmojiPickerProps) {
  const [internalIsOpen, setInternalIsOpen] = useState(false);
  const pickerRef = useRef<HTMLDivElement>(null);
  const [dropdownPos, setDropdownPos] = useState<{left: number, top: number} | null>(null);

  const buttonRef = useRef<HTMLButtonElement>(null);

  const isControlled = controlledIsOpen !== undefined && setControlledIsOpen !== undefined;
  const isOpen = isControlled ? controlledIsOpen : internalIsOpen;
  const setIsOpen = isControlled ? setControlledIsOpen : setInternalIsOpen;

  const openPicker = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (isOpen) {
      setIsOpen(false);
      setDropdownPos(null);
    } else {
      setIsOpen(true);
      if (buttonRef.current) {
        const rect = buttonRef.current.getBoundingClientRect();
        setDropdownPos({
          left: rect.left,
          top: rect.top - 16 // adjust as needed for spacing above button
        });
      }
    }
  };

  const closePicker = () => {
    setIsOpen(false);
    setDropdownPos(null);
  };

  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (pickerRef.current && !pickerRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [setIsOpen]);

  return (
    <div className="relative" ref={pickerRef}>
      <button
        type="button"
        ref={buttonRef}
        onClick={openPicker}
        className="p-2 rounded-full hover:bg-[#FFD70020] transition-colors border border-[#FFD700]"
        aria-label="Open emoji picker"
      >
        <SmileIcon className="h-5 w-5 casino-text-gold" />
      </button>
      
      {isOpen && dropdownPos && createPortal(
        <motion.div
          initial={{ opacity: 0, scale: 0.9, y: 10 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.9, y: 10 }}
          style={{
            position: 'fixed',
            left: dropdownPos.left,
            top: dropdownPos.top - 260, // adjust for picker height
            zIndex: 9999,
            width: '16rem',
          }}
          className="casino-box casino-box-gold rounded-md shadow-lg p-3 w-64"
        >
          <div className="flex items-center gap-2 mb-3 border-b-2 border-[#FFD700] pb-2">
            <Star className="h-4 w-4 casino-text-gold" fill="currentColor" />
            <span className="font-black casino-text-gold" style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>Emojis</span>
            <Star className="h-4 w-4 casino-text-gold" fill="currentColor" />
          </div>
          <div className="p-1 flex flex-wrap gap-2 max-h-60 overflow-y-auto">
            {Object.entries(emojiMap).map(([code, url]) => (
              <button
                key={code}
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  onEmojiSelect(`:${code}:`);
                  setIsOpen(false);
                  setDropdownPos(null);
                }}
                className="p-1 hover:bg-[#FFD70020] rounded cursor-pointer transition-colors flex items-center justify-center border border-transparent hover:border-[#FFD700]"
                title={`:${code}:`}
              >
                <img 
                  src={url} 
                  alt={code} 
                  className="h-6 w-auto"
                  title={`:${code}:`}
                />
              </button>
            ))}
          </div>
          <div className="mt-3 pt-2 border-t-2 border-[#FFD700] text-xs text-center">
            <span className="casino-text-gold font-black">Tip: </span>
            <span className="casino-text-yellow font-bold">Type <code>:code:</code> to add an emoji</span>
          </div>
        </motion.div>,
        document.body
      )}
    </div>
  );
}
</file>

<file path="components/EnterRound.tsx">
"use client";

import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { useState } from "react";
import { ArrowRight, Zap, Wallet } from "lucide-react";
import { usePrivy } from '@privy-io/react-auth';
import { WalletConnect } from './WalletConnect';
import { Connection, PublicKey, Transaction, SystemProgram, LAMPORTS_PER_SOL } from '@solana/web3.js';
import { getAssociatedTokenAddressSync, createAssociatedTokenAccountInstruction, createTransferInstruction } from '@solana/spl-token';
import { toast } from '@/hooks/use-toast';
import { jackpotAddr } from "@/lib/constants";

// Types
interface TokenRow {
  mint: string;
  amount: number;
  decimals: number;
  symbol: string;
  name: string;
  image: string;
  selected?: boolean;
  selectedAmount?: number;
}

interface EnterRoundProps {
  selectedTokens: TokenRow[];
  onSelectedTokensChange: (tokens: TokenRow[]) => void;
}

// TypeScript declaration for window.solana
declare global {
  interface Window {
    solana?: {
      signAndSendTransaction: (transaction: any) => Promise<{ signature: string }>;
      isPhantom?: boolean;
    };
  }
}

export function EnterRound({ selectedTokens, onSelectedTokensChange }: EnterRoundProps) {
  const { authenticated, user } = usePrivy();
  const publicKey = user?.wallet?.address;

  const [depositing, setDepositing] = useState(false);

  const connection = new Connection(process.env.NEXT_PUBLIC_HELIUS_RPC!);

  const buildTransaction = async () => {
    if (!publicKey) throw new Error('Wallet not connected');
    const pubKey = new PublicKey(publicKey);
    const tx = new Transaction();

    for (const token of selectedTokens) {
      const amount = token.selectedAmount ?? 0;
      if (amount <= 0) continue;

      if (token.mint === 'So11111111111111111111111111111111111111112') {
        tx.add(
          SystemProgram.transfer({
            fromPubkey: pubKey,
            toPubkey: new PublicKey(jackpotAddr),
            lamports: Math.round(amount * LAMPORTS_PER_SOL),
          }),
        );
      } else {
        const mint = new PublicKey(token.mint);
        const fromAta = getAssociatedTokenAddressSync(mint, pubKey);
        const toAta = getAssociatedTokenAddressSync(mint, new PublicKey(jackpotAddr), true);

        if (!(await connection.getAccountInfo(toAta))) {
          tx.add(
            createAssociatedTokenAccountInstruction(
              pubKey,
              toAta,
              new PublicKey(jackpotAddr),
              mint,
            ),
          );
        }

        tx.add(
          createTransferInstruction(
            fromAta,
            toAta,
            pubKey,
            BigInt(Math.round(amount * 10 ** token.decimals)),
          ),
        );
      }
    }

    tx.feePayer = pubKey;
    tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;
    return tx;
  };

  const handleEnterRound = async () => {
    if (!authenticated || !publicKey || selectedTokens.length === 0) {
      toast({ title: 'Please select tokens to deposit', variant: 'destructive' });
      return;
    }

    try {
      setDepositing(true);
      const tx = await buildTransaction();

      if (window.solana && window.solana.signAndSendTransaction) {
        const signature = await window.solana.signAndSendTransaction(tx);
        await connection.confirmTransaction(signature.signature, 'confirmed');
        toast({ title: 'Successfully entered the round!', description: signature.signature });
        onSelectedTokensChange([]);
      } else {
        throw new Error('Solana wallet not found');
      }
    } catch (e: any) {
      console.error('Deposit error:', e);
      toast({
        title: 'Deposit failed',
        description: e?.message ?? 'Unknown error',
        variant: 'destructive',
      });
    } finally {
      setDepositing(false);
    }
  };

  // if (!authenticated) {
  //   return (
  //     <div className="flex justify-center items-center p-4">
  //       <div className="casino-box casino-box-gold p-4 rounded-lg">
  //         <div className="flex items-center gap-3">
  //           <Wallet className="h-5 w-5 casino-text-gold" />
  //           <span className="text-sm font-black casino-text-gold" 
  //                 style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
  //             Connect Wallet to Play
  //           </span>
  //           <div className="ml-3">
  //             <WalletConnect />
  //           </div>
  //         </div>
  //       </div>
  //     </div>
  //   );
  // }

  return (
    <div className="flex justify-center items-center p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
      >
        <Button
          onClick={handleEnterRound}
          disabled={depositing || selectedTokens.length === 0}
          className="casino-button text-lg font-black uppercase tracking-wider px-8 py-4 border-2 border-[#FFD700] relative overflow-hidden group"
          style={{
            fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
            background: 'linear-gradient(145deg, #FFD700, #DAA520)',
            boxShadow: `
              0 0 25px rgba(255, 215, 0, 0.8),
              inset 0 2px 0 rgba(255, 255, 255, 0.3),
              inset 0 -2px 0 rgba(0, 0, 0, 0.3)
            `
          }}
        >
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
          <div className="flex items-center gap-3 relative z-10">
            {depositing ? (
              <>
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                >
                  <Zap className="h-5 w-5" fill="currentColor" />
                </motion.div>
                <span>Processing...</span>
              </>
            ) : (
              <>
                <Zap className="h-5 w-5" fill="currentColor" />
                <span>ENTER ROUND</span>
                <ArrowRight className="h-5 w-5" />
              </>
            )}
          </div>
        </Button>
      </motion.div>
    </div>
  );
}
</file>

<file path="components/FloatingTokens.tsx">
"use client";

import { useEffect, useState } from "react";
import { motion } from "framer-motion";

interface Token {
  id: number;
  x: number;
  y: number;
  size: number;
  speed: number;
  symbol: string;
  rotation: number;
  glow: string;
}

export function FloatingTokens() {
  const [tokens, setTokens] = useState<Token[]>([]);
  
  useEffect(() => {
    const tokensArray: Token[] = [];
    const symbols = ["$", "★", "♦", "♠", "♥", "♣", "777"];
    const glowColors = ["#FFD700", "#FF8C00", "#FF1493", "#FFFF00"];
    
    for (let i = 0; i < 12; i++) {
      tokensArray.push({
        id: i,
        x: Math.random() * 100,
        y: -20 - Math.random() * 100,
        size: 20 + Math.random() * 25,
        speed: 25 + Math.random() * 50,
        symbol: symbols[Math.floor(Math.random() * symbols.length)],
        rotation: Math.floor(Math.random() * 360),
        glow: glowColors[Math.floor(Math.random() * glowColors.length)]
      });
    }
    
    setTokens(tokensArray);
  }, []);
  
  return (
    <div className="fixed inset-0 pointer-events-none overflow-hidden z-0">
      {tokens.map((token) => (
        <motion.div
          key={token.id}
          className="absolute font-bold"
          style={{
            fontSize: token.size,
            left: `${token.x}%`,
            color: token.glow,
            fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
            fontWeight: 700,
            textShadow: `
              2px 2px 0 #000000,
              -1px -1px 0 #000000,
              1px -1px 0 #000000,
              -1px 1px 0 #000000,
              0 0 10px ${token.glow},
              0 0 20px ${token.glow}
            `,
            filter: `drop-shadow(0 0 5px ${token.glow})`,
          }}
          initial={{ 
            y: token.y + "vh",
            rotate: token.rotation
          }}
          animate={{ 
            y: "120vh",
            rotate: [token.rotation, token.rotation + 60, token.rotation - 60, token.rotation]
          }}
          transition={{ 
            duration: token.speed,
            repeat: Infinity,
            repeatType: "loop",
            ease: "linear",
            times: [0, 0.25, 0.75, 1]
          }}
        >
          {token.symbol}
        </motion.div>
      ))}
    </div>
  );
}
</file>

<file path="components/Header.tsx">
"use client";
import { motion } from "framer-motion";
import Image from "next/image";

export function Header() {
  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ 
        duration: 0.6,
        ease: "easeOut",
        delay: 0.2
      }}
      whileHover={{ rotate: [0, 10, -10, 10, -10, 0], transition: { duration: 0.5 } }}
      className="flex justify-center items-end relative"
    >
      <Image
        src="/jackpotlogo.png"
        alt="JACKPOT"
        width={120}
        height={36}
        className="object-contain drop-shadow-[0_0_15px_rgba(255,215,0,0.8)] relative"
        priority
      />
    </motion.div>
  );
}


export function HeaderAbsolute() {
  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ 
        duration: 0.6,
        ease: "easeOut",
        delay: 0.2
      }}
      whileHover={{ rotate: [0, 10, -10, 10, -10, 0], transition: { duration: 0.5 } }}
      className="flex justify-center items-center absolute inset-0 z-0"
    >
      <Image
        src="/jackpotlogo.png"
        alt="JACKPOT"
        width={120}
        height={36}
        className="object-contain drop-shadow-[0_0_15px_rgba(255,215,0,0.8)]"
        priority
      />
    </motion.div>
  );
}
</file>

<file path="components/JackpotDonutChart.tsx">
'use client';

import { useState, useEffect, useRef, useMemo } from 'react';
import { motion } from 'framer-motion';
import { toast } from '@/hooks/use-toast';
import { Connection } from '@solana/web3.js';
import { useWallets, usePrivy } from '@privy-io/react-auth';
import { useAudioStore } from '@/stores/audioStore';
import { useGameStore } from '@/stores/gameStore';
import { jackpotAddr } from '@/lib/constants';
import { triggerJackpotConfetti } from '@/lib/confetti';
import { generateSpinningAngle, generateChartData } from '@/lib/wheel-utils';
import { SpinningWheel } from './SpinningWheel';
import { RoundStateDisplay } from './RoundStateDisplay';

// Add TypeScript declaration for window.solana
declare global {
  interface Window {
    solana?: {
      signAndSendTransaction: (transaction: any) => Promise<{ signature: string }>;
      isPhantom?: boolean;
    };
  }
}

/* -------------------------------------------------------------------------- */
/*                               MAIN COMPONENT                               */
/* -------------------------------------------------------------------------- */
export default function JackpotDonutChart() {
  /* -------------------------------- context ------------------------------ */
  const connection = new Connection(process.env.NEXT_PUBLIC_HELIUS_RPC!);
  const { authenticated, user } = usePrivy();
  const { wallets } = useWallets();
  const connectedWallet = wallets[0];
  const walletAddress = user?.wallet?.address;
  
  // Zustand stores
  const { playSound } = useAudioStore();
  const {
    currentRoundDeposits: deposits,
    totalAmount,
    roundState,
    winner,
    winAmount,
    seconds,
    newRoundCountdown,
    isSpinning,
    finalSpinAngle,
    selectedWinner,
    shouldResetWheel,
    isAnimating,
    addDeposit,
    setDeposits,
    setRoundState,
    setWinner,
    setSeconds,
    setNewRoundCountdown,
    startSpinning,
    stopSpinning,
    setIsAnimating,
    setShouldResetWheel,
    resetRound
  } = useGameStore();

  // 🔥 CRITICAL: Block new deposits during animations
  const animationTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  /* ------------------------ data simulation ------------------------ */
  useEffect(() => {
    // 🔥 CRITICAL: Stop simulation completely during animations or non-active states
    if (roundState !== 'active' || isAnimating) return;

    const interval = setInterval(() => {
      // 🔥 Double-check animation state before adding deposit
      if (isAnimating) return;

      const isUserDeposit = Math.random() < 0.2; // 20% chance it's the user
      const newDeposit = {
        id: Math.random().toString(36).substr(2, 9),
        user: isUserDeposit ? 'You' : `User${Math.floor(Math.random() * 9999)}`,
        token: Math.random() > 0.7 ? 'USDC' : 'SOL',
        amount: Math.floor(Math.random() * 500) + 50, // $50-$550
        timestamp: new Date(),
      };

      // 🔥 CRITICAL: Set animation flag BEFORE updating data
      setIsAnimating(true);

      // Update deposits through Zustand
      addDeposit(newDeposit);
      
      // 🎵 PLAY AUDIO BASED ON DEPOSIT TYPE
      if (isUserDeposit) {
        playSound('userDeposit');
      } else {
        playSound('deposit');
      }
      
      // Toast notification for new deposit
      toast({
        title: '🎰 New Deposit!',
        description: `${newDeposit.user} deposited $${newDeposit.amount} ${newDeposit.token}`,
        duration: 2000,
      });

      // 🔥 CRITICAL: Clear animation flag after animation completes
      if (animationTimeoutRef.current) {
        clearTimeout(animationTimeoutRef.current);
      }
      animationTimeoutRef.current = setTimeout(() => {
        setIsAnimating(false);
      }, 1500); // 1.5 seconds - longer than Recharts animation

    }, Math.random() * 4000 + 5000); // 5-9 seconds (even longer gap)

    return () => clearInterval(interval);
  }, [roundState, isAnimating, addDeposit, playSound, setIsAnimating]);

  // Cleanup animation timeout
  useEffect(() => {
    return () => {
      if (animationTimeoutRef.current) {
        clearTimeout(animationTimeoutRef.current);
      }
    };
  }, []);

  /* ------------------------ responsive ring sizing ------------------------ */
  const containerRef = useRef<HTMLDivElement>(null);
  const [chartDims, setChartDims] = useState({ inner: 140, outer: 200 });
  useEffect(() => {
    const onResize = () => {
      if (!containerRef.current) return;
      const { clientWidth: w, clientHeight: h } = containerRef.current;
      const r = Math.min(w, h) * 0.48;
      setChartDims({ inner: r * 0.72, outer: r });
    };
    onResize();
    window.addEventListener('resize', onResize);
    return () => window.removeEventListener('resize', onResize);
  }, []);

  /* ------------------------------ countdown ------------------------------ */
  // 🔥 FIXED: Use direct value updates instead of function updaters
  useEffect(() => {
    const interval = setInterval(() => {
      if (roundState === 'active') {
        // 🔥 FIXED: Get current value and set new value directly
        if (seconds <= 1) {
          // Round is ending
          setRoundState('ending');
          setSeconds(0);
        } else {
          setSeconds(seconds - 1);
        }
      } else if (roundState === 'ended') {
        // 🔥 FIXED: Get current value and set new value directly
        if (newRoundCountdown <= 1) {
          // Start new round
          startNewRound();
          setNewRoundCountdown(10);
        } else {
          setNewRoundCountdown(newRoundCountdown - 1);
        }
      }
    }, 1000);

    return () => clearInterval(interval);
  }, [roundState, seconds, newRoundCountdown, setRoundState, setSeconds, setNewRoundCountdown]);

  // Handle round ending sequence
  useEffect(() => {
    if (roundState === 'ending') {
      // 🔥 CRITICAL: Stop all animations during round end
      setIsAnimating(true);

      if (deposits.length === 0) {
        // No deposits, skip spinning
        setRoundState('ended');
        return;
      }

      // Select winner immediately
      const randomWinner = deposits[Math.floor(Math.random() * deposits.length)];

      // Small delay before starting the spin
      setTimeout(() => {
        // Start spinning animation
        const dramaticSpinAngle = generateSpinningAngle(deposits, randomWinner, totalAmount);
        startSpinning(dramaticSpinAngle, randomWinner);
      }, 500);
      
      // After spinning animation completes, reveal winner
      setTimeout(() => {
        stopSpinning();
        setWinner(randomWinner.user, totalAmount);
        
        // 🎵 PLAY WIN SOUND
        playSound('win');
        
        // 🎉 TRIGGER CONFETTI CELEBRATION! 🎉
        triggerJackpotConfetti();
        
        toast({
          title: '🎉 JACKPOT WINNER! 🎉',
          description: `${randomWinner.user} won $${totalAmount.toFixed(0)}!`,
          duration: 5000,
        });
        
        setRoundState('ended');
      }, 7000); // 6.5s spinning + 0.5s buffer
    }
  }, [roundState, deposits, totalAmount, startSpinning, stopSpinning, setWinner, setRoundState, playSound]);

  const startNewRound = () => {
    setRoundState('starting');
    
    // IMPORTANT: Reset wheel position for new round
    setShouldResetWheel(true);
    
    // Reset all round data
    resetRound();
    
    toast({
      title: '🎰 NEW ROUND STARTED!',
      description: 'Place your deposits now!',
      duration: 3000,
    });
    
    // Start the new round after a brief moment and stop wheel reset
    setTimeout(() => {
      setRoundState('active');
      setShouldResetWheel(false); // Stop the reset after the wheel has moved
    }, 1000);
  };

  /* ------------------------------ chart data ----------------------------- */
  // 🔥 THE REAL FIX: Calculate totalAmount INSIDE useMemo to avoid external dependency
  const chartData = useMemo(() => {
    // Calculate total inside useMemo to avoid dependency issues
    const calculatedTotal = deposits.reduce((sum, deposit) => sum + deposit.amount, 0);
    return generateChartData(deposits, calculatedTotal);
  }, [deposits]); // 🔥 ONLY depend on deposits array, not external totalAmount!

  /* --------------------------------- UI ---------------------------------- */
  return (
    <div className="flex flex-col items-center relative h-full mb-2">
      <div className="w-full flex flex-col items-center gap-0 h-full">
        {/* ------------------------------- RING ------------------------------ */}
        <div
          ref={containerRef}
          className="relative w-full h-full"
        >
          <SpinningWheel
            chartData={chartData}
            chartDims={chartDims}
            isSpinning={isSpinning}
            finalSpinAngle={finalSpinAngle}
            shouldReset={shouldResetWheel}
          />

          <RoundStateDisplay
            roundState={roundState}
            totalAmount={totalAmount}
            seconds={seconds}
            winner={winner}
            winAmount={winAmount}
            newRoundCountdown={newRoundCountdown}
            isSpinning={isSpinning}
          />
        </div>
      </div>
    </div>
  );
}
</file>

<file path="components/LeftColumn.tsx">
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { motion } from "framer-motion";
import { useState, useEffect } from "react";
import { CurrentDeposits } from "./CurrentDeposits";
import { useGameStore } from "@/stores/gameStore";
import CountUp from 'react-countup';

interface LeftColumnProps {
  isMobile?: boolean;
}

// 🎰 CASINO EASING FUNCTIONS
const casinoEasing = {
  // Coin drop effect - starts slow, accelerates like coins falling
  coinDrop: (t: number, b: number, c: number, d: number) => {
    return c * Math.pow(t / d, 2.2) + b;
  },
  
  // Slot machine mechanical feel
  mechanical: (t: number, b: number, c: number, d: number) => {
    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
  }
};

export function LeftColumn({ isMobile = false }: LeftColumnProps) {
  const [totalDeposits, setTotalDeposits] = useState(7961280);
  const [prevTotalDeposits, setPrevTotalDeposits] = useState(7961280);
  const { currentRoundDeposits } = useGameStore();

  useEffect(() => {
    const interval = setInterval(() => {
      setTotalDeposits(prev => {
        setPrevTotalDeposits(prev); // Store previous value for smooth transition
        return prev + Math.floor(Math.random() * (1000 - 100) + 100);
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  // Desktop layout - show all components
  return (
    <div className="h-full flex flex-col gap-3">
      {/* Total Deposits */}
      {!isMobile && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
        >
          <Card className="casino-box casino-box-gold overflow-hidden h-24 flex flex-col">
            <CardContent className="bg-gradient-to-b from-[#4A0E4E] to-[#2D0A30] p-2 flex-1 flex flex-col justify-center items-center">
              <p className="text-lg sm:text-xl md:text-2xl uppercase font-bold text-center tracking-wider casino-text-yellow mb-2"
                 style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                Total Deposits
              </p>
              <div className="text-2xl sm:text-3xl md:text-4xl font-black casino-text-gold flex items-center"
                   style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                $<CountUp
                  start={prevTotalDeposits}
                  end={totalDeposits}
                  duration={2.8} // Slightly longer for more dramatic effect
                  separator=","
                  preserveValue={true}
                  useEasing={true}
                  easingFn={casinoEasing.coinDrop} // 🎰 Coin drop effect
                />
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}

      {/* Current Round - Takes up most of the available space */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="flex-1 min-h-0"
      >
        <CurrentDeposits isMobile={isMobile} />
      </motion.div>
    </div>
  );
}
</file>

<file path="components/LogoutButton.tsx">
"use client";

import { Button } from "@/components/ui/button";
import { ArrowRight } from "lucide-react";
import { motion } from "framer-motion";
import { usePrivy } from '@privy-io/react-auth';

export function LogoutButton() {
  const { authenticated, logout } = usePrivy();

  if (!authenticated) return null;

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.8 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.8 }}
      className="fixed bottom-4 right-4 z-50"
    >
      <Button
        onClick={logout}
        variant="outline"
        className="casino-box casino-box-gold px-4 py-3 border-2 border-[#FFD700] hover:border-[#FFFF00] hover:bg-[#FFD70015] transition-all duration-200 group shadow-lg"
        style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}
      >
        <div className="flex items-center gap-2">
          <motion.div
            whileHover={{ rotate: 180 }}
            transition={{ duration: 0.3 }}
          >
            <ArrowRight className="h-5 w-5 casino-text-gold rotate-180" />
          </motion.div>
          <span className="text-sm font-black casino-text-gold uppercase tracking-wider">
            Logout
          </span>
        </div>
      </Button>
    </motion.div>
  );
}
</file>

<file path="components/PastDraws.tsx">
"use client";

import { PastDraw } from "@/lib/types";
import { Card, CardContent } from "@/components/ui/card";
import { motion } from "framer-motion";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Star, Trophy, Award } from "lucide-react";

interface PastDrawsProps {
  draws: PastDraw[];
}

export default function PastDraws({ draws }: PastDrawsProps) {
  return (
    <Card className="casino-box casino-box-gold overflow-hidden p-0 h-full flex flex-col relative">
      {/* Corner stars */}
      <div className="absolute top-2 left-2 z-10">
        <Star className="h-4 w-4 casino-star" fill="currentColor" />
      </div>
      <div className="absolute top-2 right-2 z-10">
        <Star className="h-4 w-4 casino-star" fill="currentColor" />
      </div>
      
      <CardContent className="p-4 h-full flex flex-col min-w-0">
        {/* Title */}
        <div className="mb-3 text-center">
          <div className="flex items-center justify-center gap-2 mb-2">
            <Trophy className="h-4 w-4 casino-text-gold" />
            <h2 className="text-lg font-black uppercase tracking-wide casino-text-gold truncate" 
                style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              Past Winners
            </h2>
            <Award className="h-4 w-4 casino-text-gold" />
          </div>
        </div>
        
        {/* Past Draws List */}
        <div className="flex-1 overflow-hidden min-w-0">
          <ScrollArea className="h-full">
            <div className="space-y-1">
              {draws.map((draw, index) => (
                <motion.div
                  key={draw.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="py-1 px-2 rounded-md overflow-hidden relative"
                  style={{
                    background: index % 2 === 0
                      ? 'linear-gradient(to right, #4A0E4E, #2D0A30)'
                      : 'linear-gradient(to right, #3A0A3E, #1D051A)',
                    borderRadius: '6px',
                    border: '1px solid rgba(255, 215, 0, 0.2)'
                  }}
                >
                  {/* Winner badge - smaller */}
                  <div className="absolute top-0.5 right-0.5">
                    <motion.div
                      animate={{
                        rotate: [0, 10, -10, 0],
                        scale: [1, 1.1, 1]
                      }}
                      transition={{
                        duration: 3,
                        repeat: Infinity,
                        delay: index * 0.5
                      }}
                    >
                      <Trophy className="h-2 w-2 casino-text-gold" fill="currentColor" />
                    </motion.div>
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-1 mb-0.5">
                        <motion.div
                          className="h-1.5 w-1.5 rounded-full bg-gradient-to-r from-[#FFD700] to-[#FFFF00]"
                          animate={{
                            scale: [1, 1.2, 1],
                            boxShadow: [
                              '0 0 0px rgba(255, 215, 0, 0)',
                              '0 0 4px rgba(255, 215, 0, 0.8)',
                              '0 0 0px rgba(255, 215, 0, 0)'
                            ]
                          }}
                          transition={{
                            duration: 2,
                            repeat: Infinity,
                            delay: index * 0.3
                          }}
                        />
                        <h3 className="text-xs font-black casino-text-gold truncate"
                          style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                          {draw.name}
                        </h3>
                      </div>
                      <motion.a
                        href="#"
                        className="casino-text-yellow text-xs hover:underline hover:text-[#FFFF00] transition-colors font-bold"
                        onClick={(e) => e.preventDefault()}
                        style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif", fontSize: '10px' }}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        🔍 Verify
                      </motion.a>
                    </div>
                    
                    <div className="text-right ml-2">
                      <motion.span 
                        className="text-xs font-black casino-text-gold"
                        style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}
                        initial={{ scale: 1 }}
                        whileHover={{ 
                          scale: 1.05,
                          color: '#FFFF00'
                        }}
                      >
                        ${draw.amount.toLocaleString(undefined, {
                          minimumFractionDigits: 0,
                          maximumFractionDigits: 0
                        })}
                      </motion.span>
                      <div className="text-xs casino-text-pink font-bold" style={{ fontSize: '9px' }}>
                        WIN
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </ScrollArea>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="components/PastWinners.tsx">
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { motion } from "framer-motion";
import { Star, Trophy, Eye } from "lucide-react";
import { Button } from "@/components/ui/button";
import { toast } from '@/hooks/use-toast';
import { pastDraws } from "@/lib/mock-data";

export function PastWinners() {
  const handleVerifyWin = (winnerId: string, winnerName: string) => {
    // Mock verification action
    toast({
      title: '🔍 Verification Started',
      description: `Verifying ${winnerName}'s win on the blockchain...`,
      duration: 3000,
    });
    
    // You could add actual blockchain verification logic here
    setTimeout(() => {
      toast({
        title: '✅ Win Verified',
        description: `${winnerName}'s jackpot win is confirmed on Solana blockchain.`,
        duration: 4000,
      });
    }, 2000);
  };

  return (
    <Card className="casino-box casino-box-gold overflow-hidden p-0 h-full flex flex-col relative">
      {/* Corner stars */}
      <div className="absolute top-2 left-2 z-10">
        <Star className="h-4 w-4 casino-star" fill="currentColor" />
      </div>
      <div className="absolute top-2 right-2 z-10">
        <Star className="h-4 w-4 casino-star" fill="currentColor" />
      </div>
      
      <CardContent className="p-3 h-full flex flex-col min-w-0">
        {/* Title */}
        <div className="mb-3">
          <div className="flex items-center justify-center gap-2">
            <Trophy className="h-4 w-4 casino-text-gold" />
            <h2 className="text-lg font-black uppercase text-center tracking-wide casino-text-gold truncate" 
                style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              Recent Winners
            </h2>
          </div>
        </div>
        
        {/* Winners as Horizontal Compact Cards */}
        <div className="flex-1 overflow-hidden min-w-0">
          <div className="flex flex-wrap gap-2">
            {pastDraws.slice(0, 3).map((draw, index) => (
              <motion.div
                key={draw.id}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: index * 0.1 }}
                className="flex-1 min-w-0 casino-box p-2 rounded-md border border-[#FFD700] bg-gradient-to-r from-[#4A0E4E] to-[#2D0A30] relative overflow-hidden group hover:border-[#FFFF00] transition-all duration-200"
                style={{
                  boxShadow: "0 0 8px rgba(255, 215, 0, 0.4)"
                }}
              >
                {/* Compact horizontal layout */}
                <div className="flex flex-col items-center gap-1 relative z-10">
                  {/* Top row: Trophy + Name */}
                  <div className="flex items-center gap-2 w-full">
                    <motion.div
                      animate={{
                        rotate: [0, 15, -15, 0],
                        scale: [1, 1.1, 1]
                      }}
                      transition={{
                        duration: 3,
                        repeat: Infinity,
                        delay: index * 0.5
                      }}
                      className="flex-shrink-0"
                    >
                      <Trophy className="h-3 w-3 casino-text-gold" fill="currentColor" />
                    </motion.div>
                    
                    <span className="text-xs font-black casino-text-gold truncate flex-1" 
                          style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                      {draw.name}
                    </span>
                  </div>
                  
                  {/* Middle row: Amount */}
                  <div className="text-sm font-black casino-text-gold text-center" 
                       style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                    ${draw.amount.toLocaleString(undefined, {
                      minimumFractionDigits: 0,
                      maximumFractionDigits: 0
                    })}
                  </div>
                  
                  {/* Bottom row: WIN Badge + Verify */}
                  <div className="flex items-center justify-between w-full gap-1">
                    <motion.div
                      animate={{
                        boxShadow: [
                          "0 0 0px rgba(255, 20, 147, 0)",
                          "0 0 6px rgba(255, 20, 147, 0.8)",
                          "0 0 0px rgba(255, 20, 147, 0)"
                        ]
                      }}
                      transition={{
                        duration: 2,
                        repeat: Infinity,
                        delay: index * 0.3
                      }}
                      className="px-2 py-0.5 bg-gradient-to-r from-[#FF1493] to-[#DC143C] rounded-full border border-[#FF69B4] flex-shrink-0"
                    >
                      <span className="text-[10px] font-black text-white tracking-wider"
                            style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                        WIN
                      </span>
                    </motion.div>
                    
                    {/* Verify Button */}
                    <motion.div
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                    >
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleVerifyWin(draw.id, draw.name)}
                        className="p-1 h-auto w-auto border border-[#00FFFF] bg-[#00FFFF]/20 hover:bg-[#00FFFF]/40 transition-all duration-200 rounded group-hover:border-[#FFFF00] group-hover:bg-[#FFFF00]/20"
                        title="Verify this win on blockchain"
                      >
                        <Eye className="h-3 w-3 text-[#00FFFF] group-hover:text-[#FFFF00]" />
                      </Button>
                    </motion.div>
                  </div>
                </div>
                
                {/* Corner decoration */}
                <div className="absolute top-0.5 right-0.5">
                  <Star className="h-2 w-2 casino-star" fill="currentColor" />
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="components/Providers.tsx">
'use client';

import { PrivyProvider } from '@privy-io/react-auth';
import { toSolanaWalletConnectors } from '@privy-io/react-auth/solana';
import { useRouter } from 'next/navigation';

export function Providers({ children }: { children: React.ReactNode }) {
  const router = useRouter();

  return (
    <PrivyProvider
      appId={process.env.NEXT_PUBLIC_PRIVY_APP_ID || ''}
      // clientId={process.env.NEXT_PUBLIC_PRIVY_CLIENT_ID || ''}
      config={{
        // We only want to show wallet login options
        loginMethods: ['wallet'],
        // Customize the appearance of the Privy modal
        appearance: {
          theme: 'dark',
          accentColor: '#FFD700', // Casino Gold
          logo: 'https://your-logo-url/logo.png', // Optional: Add your app's logo
          walletList: ['phantom'], // Show Solana wallets first
          showWalletLoginFirst: true,
        },
        externalWallets: {
          solana: {
            connectors: toSolanaWalletConnectors(),
          },
        },
        // Configure the Solana cluster
        solanaClusters: [{ name: 'mainnet-beta', rpcUrl: process.env.NEXT_PUBLIC_HELIUS_RPC || 'https://api.mainnet-beta.solana.com' }],
        // No need for embedded wallets in this dApp
        embeddedWallets: {
          createOnLogin: 'off'
        }
      }}
    // onSuccess={() => router.push('/')} // Or whichever page you want users on after login
    >
      {children}
    </PrivyProvider>
  );
}
</file>

<file path="components/RightColumn.tsx">
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { motion } from "framer-motion";
import { ChatSection } from "./ChatSection";
import { UnifiedAudioControl } from "./UnifiedAudioControl";
import { DebugModal } from "./DebugModal";
import { Button } from "@/components/ui/button";
import { LogOut, Settings } from "lucide-react";
import { usePrivy } from '@privy-io/react-auth';
import { useState } from "react";

export function RightColumn() {
  const { logout, authenticated } = usePrivy();
  const [showDebugModal, setShowDebugModal] = useState(false);

  return (
    <div className="h-full min-h-0 flex flex-col gap-3">
      {/* Largest Win - Fixed height - NO CountUp */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="flex-shrink-0"
      >
        <Card className="casino-box casino-box-gold overflow-hidden h-24 flex flex-col">
          <CardContent className="bg-gradient-to-b from-[#4A0E4E] to-[#2D0A30] p-2 flex-1 flex flex-col justify-center items-center">
            <p className="text-lg sm:text-xl md:text-2xl uppercase font-bold text-center tracking-wider casino-text-yellow mb-2"
              style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              Largest Win
            </p>
            <div className="text-2xl sm:text-3xl md:text-4xl font-black casino-text-gold flex items-center"
                 style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
              $28,400
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Chat - Takes most of the remaining space */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="flex-1 min-h-0"
      >
        <ChatSection isMobile={false} />
      </motion.div>

      {/* Control Buttons Row - Fixed height at bottom */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
        className="flex-shrink-0"
      >
        <div className="flex items-center justify-center gap-3 p-3 casino-box casino-box-gold rounded-xl">
          {/* Unified Audio Control */}
          <UnifiedAudioControl />

          {/* Disconnect Button */}
          {authenticated && (
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Button
                onClick={logout}
                className="casino-box casino-box-red p-3 rounded-full border-2 border-[#FF1493] hover:border-[#FFFF00] transition-all duration-200"
                style={{
                  background: 'linear-gradient(145deg, #4A0E4E, #2D0A30)',
                  boxShadow: `
                    0 0 15px rgba(255, 20, 147, 0.6),
                    inset 0 1px 0 rgba(255, 20, 147, 0.3),
                    inset 0 -1px 0 rgba(0, 0, 0, 0.3)
                  `
                }}
                title="Disconnect Wallet"
              >
                <LogOut className="h-4 w-4 casino-text-pink" />
              </Button>
            </motion.div>
          )}

          {/* Settings/Debug Button */}
          <motion.div
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Button
              onClick={() => setShowDebugModal(true)}
              className="casino-box casino-box-gold p-3 rounded-full border-2 border-[#FFD700] hover:border-[#FFFF00] transition-all duration-200"
              style={{
                background: 'linear-gradient(145deg, #4A0E4E, #2D0A30)',
                boxShadow: `
                  0 0 15px rgba(255, 215, 0, 0.6),
                  inset 0 1px 0 rgba(255, 215, 0, 0.3),
                  inset 0 -1px 0 rgba(0, 0, 0, 0.3)
                `
              }}
              title="Debug Tools & Settings"
            >
              <Settings className="h-4 w-4 casino-text-gold" />
            </Button>
          </motion.div>
        </div>
      </motion.div>

      {/* Debug Modal */}
      <DebugModal 
        isOpen={showDebugModal} 
        onClose={() => setShowDebugModal(false)} 
      />
    </div>
  );
}
</file>

<file path="components/RoundStateDisplay.tsx">
import { motion, AnimatePresence } from "framer-motion";
import { useState, useEffect } from "react";
import CountUp from 'react-countup';

type RoundState = 'active' | 'ending' | 'ended' | 'starting';

interface RoundStateDisplayProps {
  roundState: RoundState;
  totalAmount: number;
  seconds: number;
  winner: string | null;
  winAmount: number;
  newRoundCountdown: number;
  isSpinning: boolean;
}

// 🎰 CASINO EASING FUNCTIONS
const casinoEasing = {
  // Slot machine reel effect - accelerates then decelerates
  slotMachine: (t: number, b: number, c: number, d: number) => {
    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
  }
};

export function RoundStateDisplay({
  roundState,
  totalAmount,
  seconds,
  winner,
  winAmount,
  newRoundCountdown,
  isSpinning
}: RoundStateDisplayProps) {
  // Track previous totalAmount for smooth CountUp transitions
  const [prevTotalAmount, setPrevTotalAmount] = useState(totalAmount);

  // Update previous amount when totalAmount changes
  useEffect(() => {
    if (totalAmount !== prevTotalAmount) {
      setPrevTotalAmount(prevTotalAmount); // Keep the previous value for animation start
    }
  }, [totalAmount, prevTotalAmount]);

  const formatTime = (timeInSeconds: number) => {
    return `0:${timeInSeconds.toString().padStart(2, '0')}`;
  };

  return (
    <div className="absolute inset-0 flex flex-col items-center justify-center pointer-events-none z-5">
      <AnimatePresence mode="wait">
        {roundState === 'active' && (
          <motion.div
            key="active"
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.8, opacity: 0 }}
            className="text-center"
          >
            <motion.div
              key={totalAmount} // Re-trigger animation when amount changes
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ type: 'spring', stiffness: 300, damping: 20 }}
              className="block text-6xl sm:text-7xl md:text-8xl font-extrabold"
              style={{
                fontFamily: 'Visby Round CF, SF Pro Display, sans-serif',
                color: '#FFD700',
                textShadow:
                  '3px 3px 0 #000000, -1px -1px 0 #000000, 1px -1px 0 #000000, -1px 1px 0 #000000, 0 0 15px #FFD700, 0 0 25px #FFFF00',
              }}
            >
              $<CountUp
                start={prevTotalAmount}
                end={totalAmount}
                duration={2} // Slightly longer for more dramatic effect
                separator=","
                preserveValue={true}
                useEasing={true}
                easingFn={casinoEasing.slotMachine} // 🎰 Slot machine reel effect
                onEnd={() => setPrevTotalAmount(totalAmount)} // Update previous value after animation
              />
            </motion.div>
            <span
              className="text-sm uppercase font-bold tracking-wider mt-1"
              style={{
                fontFamily: 'Visby Round CF, SF Pro Display, sans-serif',
                color: '#FFD700',
                textShadow: '1px 1px 0 #000000, 0 0 5px #FFD700',
              }}
            >
              Round ends in
            </span>
            <span
              className="text-3xl sm:text-4xl font-extrabold ml-2"
              style={{
                fontFamily: 'Visby Round CF, SF Pro Display, sans-serif',
                color: '#FF1493',
                textShadow:
                  '2px 2px 0 #000000, -1px -1px 0 #000000, 1px -1px 0 #000000, -1px 1px 0 #000000, 0 0 10px #FF1493, 0 0 20px #FF69B4',
              }}
            >
              {formatTime(seconds)}
            </span>
          </motion.div>
        )}

        {roundState === 'ending' && (
          <motion.div
            key="ending"
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 1.2, opacity: 0 }}
            className="text-center"
          >
            {/* Simplified spinning text - just "Selecting Winner" */}
            <motion.div
              animate={{
                opacity: [0.6, 1, 0.6]
              }}
              transition={{
                duration: 1.5,
                repeat: Infinity
              }}
              className="text-lg font-bold"
              style={{
                fontFamily: 'Visby Round CF, SF Pro Display, sans-serif',
                color: '#FFFF00',
                textShadow: '1px 1px 0 #000000, 0 0 8px #FFFF00',
              }}
            >
              Selecting Winner
            </motion.div>
          </motion.div>
        )}

        {roundState === 'ended' && winner && (
          <motion.div
            key="ended"
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.8, opacity: 0 }}
            className="text-center"
          >
            <motion.div
              animate={{ 
                scale: [1, 1.05, 1],
              }}
              transition={{ 
                duration: 2, 
                repeat: Infinity,
                repeatType: "reverse"
              }}
            >
              <div
                className="text-2xl sm:text-3xl md:text-4xl font-extrabold mb-2"
                style={{
                  fontFamily: 'Visby Round CF, SF Pro Display, sans-serif',
                  color: '#FFD700',
                  textShadow:
                    '2px 2px 0 #000000, -1px -1px 0 #000000, 1px -1px 0 #000000, -1px 1px 0 #000000, 0 0 15px #FFD700',
                }}
              >
                🎉 {winner} WINS! 🎉
              </div>
              <div
                className="text-3xl sm:text-4xl md:text-5xl font-extrabold mb-2"
                style={{
                  fontFamily: 'Visby Round CF, SF Pro Display, sans-serif',
                  color: '#00FFFF',
                  textShadow:
                    '2px 2px 0 #000000, -1px -1px 0 #000000, 1px -1px 0 #000000, -1px 1px 0 #000000, 0 0 15px #00FFFF',
                }}
              >
                ${winAmount.toFixed(0)}
              </div>
              <div
                className="text-lg font-bold"
                style={{
                  fontFamily: 'Visby Round CF, SF Pro Display, sans-serif',
                  color: '#FF1493',
                  textShadow: '1px 1px 0 #000000, 0 0 5px #FF1493',
                }}
              >
                New round in {newRoundCountdown}s
              </div>
            </motion.div>
          </motion.div>
        )}

        {roundState === 'starting' && (
          <motion.div
            key="starting"
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.8, opacity: 0 }}
            className="text-center"
          >
            <motion.div
              animate={{ 
                scale: [0.9, 1.1, 0.9],
              }}
              transition={{ 
                duration: 1, 
                repeat: Infinity,
                repeatType: "reverse"
              }}
              className="text-3xl sm:text-4xl md:text-5xl font-extrabold"
              style={{
                fontFamily: 'Visby Round CF, SF Pro Display, sans-serif',
                color: '#00FFFF',
                textShadow:
                  '3px 3px 0 #000000, -1px -1px 0 #000000, 1px -1px 0 #000000, -1px 1px 0 #000000, 0 0 20px #00FFFF, 0 0 40px #00FFFF',
              }}
            >
              NEW ROUND!
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="components/SpinningWheel.tsx">
import { motion } from 'framer-motion';
import { ResponsiveContainer, PieChart, Pie, Cell, Tooltip } from 'recharts';
import { CustomTooltip } from './CustomTooltip';

interface SpinningWheelProps {
  chartData: any[];
  chartDims: { inner: number; outer: number };
  isSpinning: boolean;
  finalSpinAngle: number;
  shouldReset?: boolean;
}

export function SpinningWheel({
  chartData,
  chartDims,
  isSpinning,
  finalSpinAngle,
  shouldReset = false,
}: SpinningWheelProps) {
  return (
    <div className="relative w-full h-full z-5">
      {/* Main spinning wheel container */}
      <motion.div
        className="w-full h-full"
        animate={{ rotate: shouldReset ? 0 : finalSpinAngle }}
        transition={{
          duration: isSpinning ? 6.5 : shouldReset ? 0.5 : 0,
          ease: isSpinning ? [0.25, 0.1, 0.25, 1] : 'easeOut',
        }}
      >
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <defs>
              <filter
                id="dropShadow"
                x="-50%"
                y="-50%"
                width="200%"
                height="200%"
              >
                <feDropShadow
                  dx="0"
                  dy="4"
                  stdDeviation="6"
                  floodColor="#000000"
                  floodOpacity="0.3"
                />
              </filter>

              <filter id="wheelGlow" x="-50%" y="-50%" width="200%" height="200%">
                <feGaussianBlur stdDeviation="3" result="coloredBlur" />
                <feMerge>
                  <feMergeNode in="coloredBlur" />
                  <feMergeNode in="SourceGraphic" />
                </feMerge>
              </filter>
            </defs>

            <Pie
              data={chartData}
              cx="50%"
              cy="50%"
              startAngle={90}
              endAngle={450}
              innerRadius={chartDims.inner}
              outerRadius={chartDims.outer}
              paddingAngle={0} // 🔥 REMOVED: No gaps between sections
              dataKey="value"
              stroke="none" // 🔥 REMOVED: No borders between sections
              strokeWidth={0} // 🔥 REMOVED: No border width
              isAnimationActive={true} // 🔥 ALWAYS enable animations
              animationBegin={0}
              animationDuration={1200} // 🔥 Longer, smoother animation
              animationEasing="ease-in-out"
              filter={isSpinning ? 'url(#wheelGlow)' : 'url(#dropShadow)'}
            >
              {chartData.map((slice, i) => {
                // 🔥 CRITICAL: Use stable keys from our data structure
                const stableKey = slice.key || (slice.isRemaining ? 'remaining-capacity' : `slice-${i}`);
                
                return (
                  <Cell
                    key={stableKey} // 🔥 This is the magic - stable keys!
                    fill={slice.color}
                    style={{
                      cursor: 'pointer',
                      opacity: isSpinning ? 0.9 : 1,
                      transition: 'opacity 0.3s ease',
                    }}
                  />
                );
              })}
            </Pie>

            {!isSpinning && <Tooltip content={<CustomTooltip />} />}
          </PieChart>
        </ResponsiveContainer>
      </motion.div>

      {/* Pointer - positioned at the top */}
      <div 
        className="absolute left-1/2 transform -translate-x-1/2 z-30 pointer-events-none"
        style={{ top: '-20px' }}
      >
        <motion.div
          animate={{
            scale: isSpinning ? [1, 1.1, 1] : 1,
            y: isSpinning ? [0, 2, 0] : 0
          }}
          transition={{
            duration: isSpinning ? 0.8 : 0,
            repeat: isSpinning ? Infinity : 0,
            repeatType: "reverse",
            ease: "easeInOut"
          }}
          className="relative flex flex-col items-center"
        >
          {/* Pointer triangle */}
          <div 
            className="relative"
            style={{
              width: 0,
              height: 0,
              borderLeft: '16px solid transparent',
              borderRight: '16px solid transparent',
              borderTop: '28px solid #FFD700',
              filter: `
                drop-shadow(0 0 12px rgba(255, 215, 0, 1))
                drop-shadow(0 0 20px rgba(255, 215, 0, 0.8))
                drop-shadow(0 3px 6px rgba(0, 0, 0, 0.6))
              `,
            }}
          >
            {/* Inner highlight */}
            <div
              className="absolute top-1 left-1/2 transform -translate-x-1/2"
              style={{
                width: 0,
                height: 0,
                borderLeft: '6px solid transparent',
                borderRight: '6px solid transparent',
                borderTop: '12px solid #FFFF00',
              }}
            />
          </div>
          
          {/* Pointer base */}
          <div 
            className="absolute -top-1.5 left-1/2 transform -translate-x-1/2 rounded-full border-3"
            style={{
              width: '24px',
              height: '24px',
              backgroundColor: '#FFD700',
              borderColor: '#FFFF00',
              boxShadow: `
                0 0 15px rgba(255, 215, 0, 1),
                inset 0 2px 0 rgba(255, 255, 255, 0.4),
                inset 0 -2px 0 rgba(0, 0, 0, 0.3)
              `,
            }}
          >
            {/* Center dot */}
            <div
              className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded-full"
              style={{
                width: '6px',
                height: '6px',
                backgroundColor: '#000000',
                boxShadow: 'inset 0 1px 0 rgba(255, 255, 255, 0.3)',
              }}
            />
          </div>
        </motion.div>
      </div>

      {/* Glowing ring during spinning - properly positioned */}
      {isSpinning && (
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 pointer-events-none">
          <motion.div
            className="rounded-full"
            style={{
              width: `${chartDims.outer * 2 + 20}px`,
              height: `${chartDims.outer * 2 + 20}px`,
              border: '3px solid rgba(255, 215, 0, 0.6)',
              boxShadow: `
                0 0 30px rgba(255, 215, 0, 0.8),
                inset 0 0 30px rgba(255, 215, 0, 0.3)
              `,
            }}
            animate={{ 
              opacity: [0.3, 0.8, 0.3], 
              scale: [0.98, 1.02, 0.98] 
            }}
            transition={{ 
              duration: 1.5, 
              repeat: Infinity, 
              ease: 'easeInOut' 
            }}
          />
        </div>
      )}
    </div>
  );
}
</file>

<file path="components/SunburstBackground.tsx">
"use client";

export function SunburstBackground() {
  return (
    <div className="fixed inset-0 pointer-events-none overflow-hidden z-0">
      {/* Grid background */}
      <div className="absolute inset-0 grid-background"></div>
      
      {/* Neon glow overlay */}
      <div className="absolute inset-0 bg-gradient-radial from-transparent via-transparent to-blue-900/30 pointer-events-none"></div>
    </div>
  );
}
</file>

<file path="components/TokenControls.tsx">
'use client';

import '../styles/slider.css';
import { useState, useCallback, memo, useMemo } from 'react';
import { Slider } from '@/components/ui/slider';
import { ChevronDown } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  TokenRow,
  percentageToTokenCount,
  formatTokenAmountSmart,
  formatUSDValueSmart
} from '@/lib/tokenUtils';
import {
  handleTokenAmountInput,
  handleUSDAmountInput,
  handlePercentageButtonClick,
  handleSliderChange,
  createFocusHandlers,
  getRawTokenCount,
  getRawUSDValue
} from '@/lib/inputHandlers';
import { useUIStore } from '@/stores/uiStore';

interface TokenControlsProps {
  totalColumns: number;
  stackValues: number[];
  filteredTokens?: TokenRow[];
  sliderValues: number[]; // Now represents percentages (0-100)
  onSliderChange: (index: number, percentage: number) => void; // Now takes percentage
  getTokenSymbol: (index: number) => string;
  getColumnForToken: (tokenIndex: number, totalTokens: number) => number;
  getDisplayValues: (index: number) => { selectedValue: number; remainingValue: number };
  tokenPricesInSol: Record<string, number | null>;
  solPrice: number | null;
  shouldCenter: boolean;
  scaleFactor?: number; // Optional scale factor for responsive sizing
}

// MEMOIZED: Component to prevent unnecessary re-renders
const TokenControls = memo(function TokenControls({
  totalColumns,
  stackValues,
  filteredTokens,
  sliderValues, // Now percentages 0-100
  onSliderChange, // Now takes percentage
  getTokenSymbol,
  getColumnForToken,
  getDisplayValues,
  tokenPricesInSol,
  solPrice,
  shouldCenter,
  scaleFactor = 1 // Default to 1 (no scaling)
}: TokenControlsProps) {

  // State to track which tokens are expanded
  const [expandedTokens, setExpandedTokens] = useState<Set<number>>(new Set());
  
  // UI store for focus management
  const { setInputFocus, focusedInputs } = useUIStore();

  // Create focus handlers using shared utility
  const { handleInputFocus, handleInputBlur, isInputFocused } = createFocusHandlers(
    setInputFocus,
    focusedInputs
  );

  // Toggle expansion for a specific token
  const toggleExpansion = useCallback((tokenIndex: number) => {
    setExpandedTokens(prev => {
      const newSet = new Set(prev);
      if (newSet.has(tokenIndex)) {
        newSet.delete(tokenIndex);
      } else {
        newSet.add(tokenIndex);
      }
      return newSet;
    });
  }, []);

  // Token amount input handler
  const handleTokenInput = useCallback((tokenIndex: number, inputValue: string) => {
    const token = filteredTokens?.[tokenIndex];
    if (!token) return;
    
    handleTokenAmountInput(tokenIndex, inputValue, token, onSliderChange);
  }, [filteredTokens, onSliderChange]);

  // USD amount input handler
  const handleUSDInput = useCallback((tokenIndex: number, inputValue: string) => {
    const token = filteredTokens?.[tokenIndex];
    if (!token) return;
    
    handleUSDAmountInput(tokenIndex, inputValue, token, tokenPricesInSol, solPrice, onSliderChange);
  }, [filteredTokens, tokenPricesInSol, solPrice, onSliderChange]);

  // Percentage button handler
  const handlePercentageClick = useCallback((tokenIndex: number, percentage: number) => {
    handlePercentageButtonClick(tokenIndex, percentage, onSliderChange);
  }, [onSliderChange]);

  // Slider handler with snapping
  const handleSliderPercentageChange = useCallback((tokenIndex: number, percentage: number) => {
    handleSliderChange(tokenIndex, percentage, onSliderChange, true);
  }, [onSliderChange]);

  // Get formatted token count for overlay display
  const getFormattedTokenCount = useCallback((tokenIndex: number) => {
    const tokenCount = getRawTokenCount(tokenIndex, sliderValues, filteredTokens || []);
    return formatTokenAmountSmart(tokenCount);
  }, [sliderValues, filteredTokens]);

  // Get formatted USD value for overlay display
  const getFormattedUSDValue = useCallback((tokenIndex: number) => {
    const usdValue = getRawUSDValue(tokenIndex, getDisplayValues);
    return formatUSDValueSmart(usdValue);
  }, [getDisplayValues]);

  // Generate grid columns for all tokens
  const gridColumns = useMemo(() => {
    return Array.from({ length: totalColumns }, (_, columnIndex) => {
      const columnNumber = columnIndex + 1;

      // Find token that should be in this column
      const tokenIndex = stackValues.findIndex((_, index) =>
        getColumnForToken(index, stackValues.length) === columnNumber
      );

      const hasToken = tokenIndex !== -1;
      const token = hasToken ? filteredTokens?.[tokenIndex] : null;
      const percentage = hasToken ? (sliderValues[tokenIndex] ?? 50) : 0; // Default to 50%
      const isExpanded = hasToken ? expandedTokens.has(tokenIndex) : false;

      return {
        columnNumber,
        tokenIndex,
        hasToken,
        token,
        percentage,
        isExpanded
      };
    });
  }, [
    totalColumns,
    stackValues,
    filteredTokens,
    sliderValues,
    expandedTokens,
    getColumnForToken
  ]);

  return (
    <div
      className="rounded-lg h-full relative"
      style={{
        display: 'grid',
        gridTemplateColumns: `repeat(${totalColumns}, ${140 * scaleFactor}px)`, // Apply scale factor to column width
        gridTemplateRows: 'auto',
        gap: '0',
        justifyContent: shouldCenter ? 'center' : 'start',
        minWidth: shouldCenter ? 'auto' : `${totalColumns * 140 * scaleFactor}px` // Apply scale factor to min width
      }}
    >
      {/* Controls Row */}
      {gridColumns.map(({
        columnNumber,
        tokenIndex,
        hasToken,
        token,
        percentage,
        isExpanded
      }) => (
        <div
          key={`control-col-${columnNumber}`}
          className="flex flex-col items-center px-2 relative"
          style={{
            minWidth: `${140 * scaleFactor}px`, // Apply scale factor
            maxWidth: `${140 * scaleFactor}px`, // Apply scale factor
            // FIXED HEIGHT: Always maintain the same container height (scaled)
            height: `${160 * scaleFactor}px`, // Increased height to accommodate new inputs
          }}
        >
          {hasToken && token ? (
            /* ENTIRE CARD: Becomes absolute and expands upward when expanded */
            <motion.div 
              className="w-full"
              style={{
                // ABSOLUTE POSITIONING: Only when expanded, pinned to bottom
                position: isExpanded ? 'absolute' : 'relative',
                bottom: isExpanded ? '0' : 'auto', // PINNED TO BOTTOM
                left: isExpanded ? '0' : 'auto',
                zIndex: isExpanded ? 50 : 'auto',
              }}
              animate={{
                // SMOOTH HEIGHT TRANSITION - grows upward from bottom (scaled)
                height: isExpanded ? 'auto' : `${160 * scaleFactor}px` // Apply scale factor to height
              }}
              transition={{
                type: "spring",
                stiffness: 300,
                damping: 30,
                duration: 0.3
              }}
            >
              <div 
                className="w-full rounded-xl border border-[#FFD700]/60 shadow-sm backdrop-blur-sm relative overflow-hidden"
                style={{
                  background: 'rgba(74, 14, 78, 0.4)',
                  boxShadow: isExpanded 
                    ? `
                      0 8px 32px rgba(0, 0, 0, 0.6),
                      0 0 20px rgba(255, 215, 0, 0.8),
                      inset 0 1px 0 rgba(255, 215, 0, 0.3)
                    `
                    : `
                      0 0 4px rgba(255, 215, 0, 0.3),
                      inset 0 0.5px 0 rgba(255, 215, 0, 0.2),
                      inset 0 -0.5px 0 rgba(0, 0, 0, 0.2)
                    `,
                  borderWidth: isExpanded ? '2px' : '1px',
                  borderColor: isExpanded ? '#FFD700' : 'rgba(255, 215, 0, 0.6)',
                }}
              >
                <div className="px-3 py-1 flex flex-col">
                  {/* BASIC CONTROLS: Always visible at top */}
                  
                  {/* Token symbol */}
                  <div 
                    className="text-sm font-bold text-[#FFD700] mb-1 text-center leading-none"
                    style={{ 
                      fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                      textShadow: "0.5px 0.5px 0 #000000",
                      fontSize: `${14 * scaleFactor}px` // Scale font size
                    }}
                  >
                    {getTokenSymbol(tokenIndex)}
                  </div>

                  {/* FIXED: Added Token Amount and USD Value in main view */}
                  <div className="flex justify-between items-center mb-1">
                    {/* Token Amount */}
                    <div
                      className="relative flex-1 min-w-0 text-center"
                      style={{ 
                        fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                        textShadow: "0.5px 0.5px 0 #000000",
                        fontSize: `${12 * scaleFactor}px` 
                      }}
                    >
                      <div
                        className="cursor-pointer casino-text-gold font-bold"
                        onClick={() => handleInputFocus(`token-${tokenIndex}`)}
                      >
                        {getFormattedTokenCount(tokenIndex)}
                      </div>
                    </div>
                    
                    {/* USD Value */}
                    {solPrice && tokenPricesInSol && tokenPricesInSol[token.mint] && (
                      <div
                        className="relative flex-1 min-w-0 text-center"
                        style={{ 
                          fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                          textShadow: "0.5px 0.5px 0 #000000",
                          fontSize: `${12 * scaleFactor}px` 
                        }}
                      >
                        <div
                          className="cursor-pointer casino-text-green-400 font-bold"
                          onClick={() => handleInputFocus(`usd-${tokenIndex}`)}
                        >
                          {getFormattedUSDValue(tokenIndex)}
                        </div>
                      </div>
                    )}
                  </div>

                  {/* FIXED: Slider with proper interaction and closer labels */}
                  <div className="relative w-full px-1 py-1 mb-1"> {/* Reduced mb-2 to mb-1 */}
                    {/* FIXED: Custom visible track background - pointer-events-none to allow slider interaction */}
                    <div 
                      className="absolute top-1/2 left-1 right-1 transform -translate-y-1/2 border border-black pointer-events-none"
                      style={{
                        height: `${8 * scaleFactor}px`, // Scale track height
                        background: 'linear-gradient(90deg, #374151, #4B5563)',
                        borderRadius: `${6 * scaleFactor}px`, // Scale border radius
                        boxShadow: `
                          inset 0 1px 2px rgba(0, 0, 0, 0.3),
                          0 0 4px rgba(255, 215, 0, 0.2)
                        `
                      }}
                    />
                    
                    {/* FIXED: Progress fill - pointer-events-none to allow slider interaction */}
                    <div 
                      className="absolute top-1/2 left-1 transform -translate-y-1/2 pointer-events-none"
                      style={{
                        width: `calc((100% - 8px) * ${percentage / 100})`, // Fixed calculation
                        height: `${8 * scaleFactor}px`, // Scale fill height
                        background: 'linear-gradient(to right, #fbbf24, #f59e0b)',
                        borderRadius: `${6 * scaleFactor}px`, // Scale border radius
                        boxShadow: `
                          inset 0 1px 1px rgba(0, 0, 0, 0.2),
                          0 0 6px rgba(255, 215, 0, 0.4)
                        `
                      }}
                    />
                    
                    <Slider
                      value={[percentage]}
                      max={100}
                      min={0}
                      step={1}
                      onValueChange={([value]) => handleSliderPercentageChange(tokenIndex, value)}
                      className="casino-themed-slider-compact rounded-lg relative z-10"
                    />
                  </div>

                  {/* FIXED: Labels closer to slider */}
                  <div className="flex justify-between text-xs casino-text-yellow font-bold px-1">
                    <span 
                      className="cursor-pointer hover:text-[#FFFF00] transition-colors"
                      onClick={() => handlePercentageClick(tokenIndex, 0)}
                      style={{ fontSize: `${10 * scaleFactor}px` }}
                    >
                      0%
                    </span>
                    <span 
                      className="cursor-pointer hover:text-[#FFFF00] transition-colors"
                      onClick={() => handlePercentageClick(tokenIndex, 50)}
                      style={{ fontSize: `${10 * scaleFactor}px` }}
                    >
                      50%
                    </span>
                    <span 
                      className="cursor-pointer hover:text-[#FFFF00] transition-colors"
                      onClick={() => handlePercentageClick(tokenIndex, 100)}
                      style={{ fontSize: `${10 * scaleFactor}px` }}
                    >
                      100%
                    </span>
                  </div>

                  {/* EXPANDED INPUT FIELDS: Show below basic controls when expanded */}
                  <AnimatePresence>
                    {isExpanded && (
                      <motion.div
                        initial={{ 
                          opacity: 0, 
                          height: 0,
                          scale: 0.9
                        }}
                        animate={{ 
                          opacity: 1, 
                          height: 'auto',
                          scale: 1
                        }}
                        exit={{ 
                          opacity: 0, 
                          height: 0,
                          scale: 0.9
                        }}
                        transition={{
                          type: "spring",
                          stiffness: 300,
                          damping: 30,
                          duration: 0.3
                        }}
                        className="space-y-3 border-t border-[#FFD700]/40 pt-3 mt-3" // Added mt-3 for spacing
                      >
                        {/* Token Count Input Container with Overlay */}
                        <div>
                          <div className="text-xs font-bold text-[#FFD700] leading-none text-center mb-1"
                               style={{ 
                                 fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                 textShadow: "0.5px 0.5px 0 #000000",
                                 fontSize: `${12 * scaleFactor}px` // Scale label font size
                               }}>
                           Token Amount
                          </div>
                          <div 
                            className="w-full px-2 py-2 rounded-lg border border-[#FFD700]/60 shadow-sm backdrop-blur-sm relative"
                            style={{
                              background: 'rgba(74, 14, 78, 0.6)',
                              boxShadow: `
                                0 0 6px rgba(255, 215, 0, 0.4),
                                inset 0 1px 0 rgba(255, 215, 0, 0.2),
                                inset 0 -1px 0 rgba(0, 0, 0, 0.2)
                              `,
                              borderRadius: '8px'
                            }}
                          >
                            {/* ACTUAL INPUT - Always has raw numeric value */}
                            <input
                              type="number"
                              min="0"
                              max={token.amount}
                              step={1 / Math.pow(10, Math.min(token.decimals, 6))}
                              value={getRawTokenCount(tokenIndex, sliderValues, filteredTokens || [])}
                              onChange={(e) => handleTokenInput(tokenIndex, e.target.value)}
                              onFocus={() => handleInputFocus(`token-${tokenIndex}`)}
                              onBlur={() => handleInputBlur(`token-${tokenIndex}`)}
                              className={`w-full bg-transparent border-none outline-none text-center font-bold text-[#FFD700] leading-none ${
                                isInputFocused(`token-${tokenIndex}`) ? 'opacity-100' : 'opacity-0'
                              } transition-opacity duration-150`}
                              style={{ 
                                fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                textShadow: "0.5px 0.5px 0 #000000",
                                fontSize: `${14 * scaleFactor}px` // Scale input font size
                              }}
                              placeholder="0"
                            />
                            
                            {/* OVERLAY - Shows formatted value when not focused */}
                            {!isInputFocused(`token-${tokenIndex}`) && (
                              <div
                                className="absolute inset-0 flex items-center justify-center text-center font-bold text-[#FFD700] leading-none pointer-events-none"
                                style={{ 
                                  fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                  textShadow: "0.5px 0.5px 0 #000000",
                                  fontSize: `${14 * scaleFactor}px` // Scale overlay font size
                                }}
                              >
                                {getFormattedTokenCount(tokenIndex)}
                              </div>
                            )}
                          </div>
                        </div>
                        
                        {/* USD Input Container with Overlay */}
                        <div>
                          <div className="text-xs font-bold text-[#00FFFF] leading-none text-center mb-1"
                               style={{ 
                                 fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                 textShadow: "0.5px 0.5px 0 #000000",
                                 fontSize: `${12 * scaleFactor}px` // Scale label font size
                               }}>
                           USD Value
                          </div>
                          <div 
                            className="w-full px-2 py-2 rounded-lg border border-[#00FFFF]/60 shadow-sm backdrop-blur-sm relative"
                            style={{
                              background: 'rgba(74, 14, 78, 0.6)',
                              boxShadow: `
                                0 0 6px rgba(0, 255, 255, 0.4),
                                inset 0 1px 0 rgba(0, 255, 255, 0.2),
                                inset 0 -2px 0 rgba(0, 0, 0, 0.2)
                              `,
                              borderRadius: '8px'
                            }}
                          >
                            {/* ACTUAL INPUT - Always has raw numeric value */}
                            <input
                              type="number"
                              min="0"
                              step="0.01"
                              value={getRawUSDValue(tokenIndex, getDisplayValues)}
                              onChange={(e) => handleUSDInput(tokenIndex, e.target.value)}
                              onFocus={() => handleInputFocus(`usd-${tokenIndex}`)}
                              onBlur={() => handleInputBlur(`usd-${tokenIndex}`)}
                              className={`w-full bg-transparent border-none outline-none text-center font-bold text-[#00FFFF] leading-none ${
                                isInputFocused(`usd-${tokenIndex}`) ? 'opacity-100' : 'opacity-0'
                              } transition-opacity duration-150`}
                              style={{ 
                                fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                textShadow: "0.5px 0.5px 0 #000000",
                                fontSize: `${14 * scaleFactor}px` // Scale input font size
                              }}
                              placeholder="0"
                            />
                            
                            {/* OVERLAY - Shows formatted value when not focused */}
                            {!isInputFocused(`usd-${tokenIndex}`) && (
                              <div
                                className="absolute inset-0 flex items-center justify-center text-center font-bold text-[#00FFFF] leading-none pointer-events-none"
                                style={{ 
                                  fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                  textShadow: "0.5px 0.5px 0 #000000",
                                  fontSize: `${14 * scaleFactor}px` // Scale overlay font size
                                }}
                              >
                                {getFormattedUSDValue(tokenIndex)}
                              </div>
                            )}
                          </div>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>

                  {/* Chevron Button - always visible, at bottom */}
                  <div className="flex justify-center mt-2"> {/* Increased mt-1 to mt-2 for better spacing */}
                    <button
                      onClick={() => toggleExpansion(tokenIndex)}
                      className="rounded-full hover:bg-[#FFD70020] transition-colors"
                    >
                      <motion.div
                        animate={{ rotate: isExpanded ? 180 : 0 }}
                        transition={{ duration: 0.3 }}
                      >
                        <ChevronDown className="text-[#FFD700]" style={{ width: `${16 * scaleFactor}px`, height: `${16 * scaleFactor}px` }} />
                      </motion.div>
                    </button>
                  </div>
                </div>
              </div>
            </motion.div>
          ) : (
            <div className="text-xs text-white/50 text-center" style={{ fontSize: `${12 * scaleFactor}px` }}>
              Empty Column {columnNumber}
            </div>
          )}
        </div>
      ))}
      
      {/* Enhanced Slider Custom Styles - Compact Version */}
      <style jsx>{`
        :global(.casino-themed-slider-compact [data-radix-slider-track]) {
          background: transparent !important;
          height: ${16 * scaleFactor}px;
          position: relative;
        }
        
        :global(.casino-themed-slider-compact [data-radix-slider-range]) {
          background: transparent !important;
          height: ${16 * scaleFactor}px;
        }
        
        :global(.casino-themed-slider-compact [data-radix-slider-thumb]) {
          width: ${14 * scaleFactor}px;
          height: ${14 * scaleFactor}px;
          background: linear-gradient(45deg, #fbbf24, #f59e0b);
          border: 2px solid #ffffff;
          border-radius: 50%;
          cursor: pointer;
          box-shadow: 
            0 0 0 1px #000000,
            0 2px 4px rgba(0, 0, 0, 0.3), 
            0 0 8px rgba(255, 215, 0, 0.6);
          transition: all 0.15s ease;
        }
        
        :global(.casino-themed-slider-compact [data-radix-slider-thumb]:hover) {
          background: linear-gradient(45deg, #f59e0b, #fbbf24);
          transform: scale(1.1);
          box-shadow: 
            0 0 0 1px #000000,
            0 3px 6px rgba(0, 0, 0, 0.4), 
            0 0 12px rgba(255, 215, 0, 0.8);
        }
        
        :global(.casino-themed-slider-compact [data-radix-slider-thumb]:active) {
          transform: scale(1.05);
          box-shadow: 
            0 0 0 1px #000000,
            0 2px 4px rgba(0, 0, 0, 0.3), 
            0 0 8px rgba(255, 215, 0, 0.6);
        }
        
        :global(.casino-themed-slider-compact [data-radix-slider-thumb]:focus) {
          outline: none;
          box-shadow: 
            0 0 0 1px #000000,
            0 2px 4px rgba(0, 0, 0, 0.3), 
            0 0 8px rgba(255, 215, 0, 0.6),
            0 0 0 3px rgba(255, 215, 0, 0.3);
        }
        
        :global(.casino-themed-slider-compact) {
          width: 100%;
          height: ${16 * scaleFactor}px;
          display: flex;
          align-items: center;
          position: relative;
        }
      `}</style>
    </div>
  );
});

export default TokenControls;
</file>

<file path="components/TokenPortfolioView.tsx">
'use client';

import ChipStack from './ChipStack';
import TokenControls from './TokenControls';
import { useEffect, useRef, useState, memo, useMemo, useCallback } from 'react';
import { 
  TokenRow, 
  percentageToTokenCount, 
  formatCurrencyValue 
} from '@/lib/tokenUtils';
import { 
  getTokenDisplayValues,
  formatCurrencyValue as formatCurrency
} from '@/lib/priceCalculations';
import { useViewportHeight } from '@/hooks/useViewportHeight'; // 🔥 NEW: Import viewport height hook

interface TokenPortfolioViewProps {
  stackValues: number[];
  sliderValues: number[]; // Now represents percentages (0-100)
  onSliderChange: (index: number, percentage: number) => void; // Now takes percentage
  filteredTokens?: TokenRow[];
  totalColumns: number;
  getTokenImage: (index: number) => string;
  getTokenSymbol: (index: number) => string;
  getRawTokenAmount: (index: number) => string;
  getColumnForToken: (tokenIndex: number, totalTokens: number) => number;
  tokenPricesInSol: Record<string, number | null>;
  solPrice: number | null;
}

// 🔥 MEMOIZED: Component to prevent unnecessary re-renders
const TokenPortfolioView = memo(function TokenPortfolioView({
  stackValues,
  sliderValues, // Now percentages 0-100
  onSliderChange,
  filteredTokens,
  totalColumns,
  getTokenImage,
  getTokenSymbol,
  getRawTokenAmount,
  getColumnForToken,
  tokenPricesInSol,
  solPrice
}: TokenPortfolioViewProps) {

  const containerRef = useRef<HTMLDivElement>(null);
  const [shouldCenter, setShouldCenter] = useState(false);

  // 🔥 NEW: Get viewport height for responsive scaling (same logic as ChipStack)
  const viewportHeight = useViewportHeight();
  
  // 🔥 NEW: Calculate scale factor based on viewport height (same as ChipStack)
  const scaleFactor = useMemo(() => {
    if (viewportHeight === 0) return 1; // Default scale while loading
    if (viewportHeight < 820) {
      // Scale down progressively for smaller screens
      // At 820px: scale = 1.0
      // At 700px: scale = 0.85
      // At 600px: scale = 0.75
      const minScale = 0.75;
      const maxScale = 1.0;
      const minHeight = 600;
      const maxHeight = 820;
      
      const clampedHeight = Math.max(minHeight, Math.min(maxHeight, viewportHeight));
      const scale = minScale + (maxScale - minScale) * ((clampedHeight - minHeight) / (maxHeight - minHeight));
      
      return Math.round(scale * 100) / 100; // Round to 2 decimal places
    }
    return 1; // No scaling for heights >= 820px
  }, [viewportHeight]);

  // Check if we should center the grid
  useEffect(() => {
    const checkCentering = () => {
      if (!containerRef.current) return;
      
      const containerWidth = containerRef.current.clientWidth;
      const scaledColumnWidth = 140 * scaleFactor; // 🔥 NEW: Apply scale factor to column width
      const totalGridWidth = totalColumns * scaledColumnWidth; // 🔥 NEW: Use scaled width
      const paddingWidth = 0; // px-12 = 48px on each side
      const availableWidth = containerWidth - paddingWidth;
      
      // Center only if there's at least 40px extra space
      setShouldCenter(availableWidth > totalGridWidth + 40);
    };

    checkCentering();
    window.addEventListener('resize', checkCentering);
    return () => window.removeEventListener('resize', checkCentering);
  }, [totalColumns, scaleFactor]); // 🔥 NEW: Added scaleFactor dependency

  // 🔥 UNIFIED: Calculate display values using shared utility
  const getDisplayValues = useCallback((index: number) => {
    const token = filteredTokens?.[index];
    if (!token) return { selectedValue: 0, remainingValue: 0 };
    
    const percentage = sliderValues[index] ?? 50;
    return getTokenDisplayValues(token, percentage, tokenPricesInSol, solPrice);
  }, [filteredTokens, tokenPricesInSol, solPrice, sliderValues]);

  // 🔥 MEMOIZED: Calculate two-row layout for selected tokens with bottom row always having more
  // ONLY include tokens that have actually been selected (percentage > 0)
  const selectedTokenLayout = useMemo(() => {
    const selectedTokens = stackValues
      .map((value, index) => ({ value, index }))
      .filter((token, index) => {
        const percentage = sliderValues[index] ?? 0;
        return percentage > 0; // Only include tokens with positive percentages
      });
    
    if (selectedTokens.length === 0) {
      return {
        bottomRow: [],
        topRow: []
      };
    }
    
    if (selectedTokens.length <= 5) {
      // Single row for 5 or fewer tokens
      return {
        bottomRow: selectedTokens,
        topRow: []
      };
    }
    
    // Split into two rows ensuring bottom row always has at least 1 more token
    // Fixed calculation: add 1 to total before dividing to ensure bottom row always has more
    const bottomRowSize = Math.ceil((selectedTokens.length + 1) / 2);
    const topRowSize = selectedTokens.length - bottomRowSize;
    
    const bottomRow = selectedTokens.slice(0, bottomRowSize);
    const topRow = selectedTokens.slice(bottomRowSize);
    
    return { bottomRow, topRow };
  }, [stackValues, sliderValues]);

  const { bottomRow, topRow } = selectedTokenLayout;
  const hasTopRow = topRow.length > 0;
  const hasAnySelected = bottomRow.length > 0;

  return (
    <div className="w-full h-full flex flex-col " ref={containerRef}>
      {/* 🔥 DEBUG: SELECTED TOKENS AREA - GREEN BACKGROUND */}
      <div 
        className="relative h-1/2 w-full overflow-visible"
        style={{ 
          backgroundColor: 'rgba(0, 255, 0, 0.1)', // 🟢 DEBUG: Green background
          border: '2px solid rgba(0, 255, 0, 0.3)',
          borderRadius: '8px',
          paddingTop: `${48 * scaleFactor}px` // 🔥 FIXED: Scale padding (was pt-12 = 48px)
        }}
      >
        {/* Only show selected stacks if there are any */}
        {hasAnySelected && (
          <>
            {/* Bottom Row */}
            <div className="absolute inset-x-0 bottom-0 flex items-end justify-center z-20" style={{ minWidth: 'fit-content' }}>
              {bottomRow.map(({ value, index: tokenIndex }, displayIndex) => {
                const { selectedValue } = getDisplayValues(tokenIndex);
                
                return (
                  <div 
                    key={`selected-bottom-${tokenIndex}`} 
                    className="animate-in fade-in duration-300 group relative"
                    style={{
                      // Create extremely tight spacing with heavy overlap
                      marginLeft: displayIndex === 0 ? '0' : `${-60 * scaleFactor}px`, // 🔥 FIXED: Scale overlap
                      zIndex: 100 + bottomRow.length - displayIndex // Higher z-index for bottom row (appears in front)
                    }}
                  >
                    {/* Value card */}
                    <div 
                      className="absolute left-1/2 z-50"
                      style={{ 
                        transform: 'translateX(-50%) scale(1)',
                        bottom: `${32 * scaleFactor}px` // 🔥 FIXED: Scale bottom position
                      }}
                    > 
                      <div 
                        className="rounded-xl border border-[#FFD700]/60 shadow-sm backdrop-blur-sm"
                        style={{
                          background: 'rgba(74, 14, 78, 0.4)',
                          boxShadow: `
                            0 0 4px rgba(255, 215, 0, 0.3),
                            inset 0 0.5px 0 rgba(255, 215, 0, 0.2),
                            inset 0 -0.5px 0 rgba(0, 0, 0, 0.2)
                          `,
                          padding: `${6 * scaleFactor}px ${12 * scaleFactor}px` // 🔥 FIXED: Scale padding
                        }}
                      >
                        <div className="text-center">
                          <div 
                            className="font-bold text-[#FFD700] leading-none"
                            style={{ 
                              fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                              textShadow: "0.5px 0.5px 0 #000000",
                              fontSize: `${10 * scaleFactor}px` // 🔥 FIXED: Scale font size
                            }}
                          >
                            {formatCurrency(selectedValue)}
                          </div>
                        </div>
                      </div>
                    </div>

                    <div
                      style={{
                        transform: `scale(0.5)`,
                        transformOrigin: 'center bottom'
                      }}
                    >
                      <ChipStack
                        value={value}
                        showType="selected"
                        sliderValue={selectedValue}
                        tokenImage={getTokenImage(tokenIndex)}
                        tokenSymbol={getTokenSymbol(tokenIndex)}
                      />
                    </div>
                  </div>
                );
              })}
            </div>

            {/* Top Row - Much closer and overlapping, behind bottom row */}
            {hasTopRow && (
              <div 
                className="absolute inset-x-0 flex items-end justify-center z-10" 
                style={{ 
                  minWidth: 'fit-content',
                  bottom: `${45 * scaleFactor}px` // 🔥 FIXED: Scale bottom position
                }}
              >
                {/* Offset container by 72px (1/2 chip stack width) to the right */}
                <div 
                  className="flex items-end justify-center"
                  style={{ 
                    marginLeft: `${72 * scaleFactor}px` // 🔥 FIXED: Scale margin
                  }}
                >
                  {topRow.map(({ value, index: tokenIndex }, displayIndex) => {
                    const { selectedValue } = getDisplayValues(tokenIndex);
                    
                    return (
                      <div 
                        key={`selected-top-${tokenIndex}`} 
                        className="animate-in fade-in duration-300 group relative"
                        style={{
                          marginLeft: displayIndex === 0 ? '0' : `${-60 * scaleFactor}px`, // 🔥 FIXED: Scale overlap
                          zIndex: topRow.length - displayIndex // Lower z-index to appear behind bottom row
                        }}
                      >
                        {/* Value card */}
                        <div 
                          className="absolute left-1/2 z-50"
                          style={{ 
                            transform: 'translateX(-50%) scale(1)',
                            bottom: `${32 * scaleFactor}px` // 🔥 FIXED: Scale bottom position
                          }}
                        > 
                          <div 
                            className="rounded-xl border border-[#FFD700]/60 shadow-sm backdrop-blur-sm"
                            style={{
                              background: 'rgba(74, 14, 78, 0.4)',
                              boxShadow: `
                                0 0 4px rgba(255, 215, 0, 0.3),
                                inset 0 0.5px 0 rgba(255, 215, 0, 0.2),
                                inset 0 -0.5px 0 rgba(0, 0, 0, 0.2)
                              `,
                              padding: `${6 * scaleFactor}px ${12 * scaleFactor}px` // 🔥 FIXED: Scale padding
                            }}
                          >
                            <div className="text-center">
                              <div 
                                className="font-bold text-[#FFD700] leading-none"
                                style={{ 
                                  fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                  textShadow: "0.5px 0.5px 0 #000000",
                                  fontSize: `${10 * scaleFactor}px` // 🔥 FIXED: Scale font size
                                }}
                              >
                                {formatCurrency(selectedValue)}
                              </div>
                            </div>
                          </div>
                        </div>

                        <div
                          style={{
                            transform: `scale(0.5)`,
                            transformOrigin: 'center bottom'
                          }}
                        >
                          <ChipStack
                            value={value}
                            showType="selected"
                            sliderValue={selectedValue}
                            tokenImage={getTokenImage(tokenIndex)}
                            tokenSymbol={getTokenSymbol(tokenIndex)}
                          />
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
          </>
        )}

        {/* Show message when no tokens are selected */}
        {!hasAnySelected && (
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="text-center">
              <div 
                className="font-bold text-[#FFD700] mb-2"
                style={{ 
                  fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                  textShadow: "0.5px 0.5px 0 #000000",
                  fontSize: `${18 * scaleFactor}px` // 🔥 FIXED: Scale font size
                }}
              >
                No Tokens Selected
              </div>
              <div 
                className="text-[#FFFF00]"
                style={{ 
                  fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                  textShadow: "0.5px 0.5px 0 #000000",
                  fontSize: `${14 * scaleFactor}px` // 🔥 FIXED: Scale font size
                }}
              >
                Use the sliders below to select token amounts
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Combined remaining stacks and controls in single scrollable container */}
      <div className="relative flex-1 w-full">
        {/* Scrollable wrapper */}
        <div className={`h-full  ${shouldCenter ? '' : 'overflow-x-auto'}`}>
          <div
            className="rounded-lg  h-full"
            style={{
              display: 'grid',
              gridTemplateColumns: `repeat(${totalColumns}, ${140 * scaleFactor}px)`, // 🔥 FIXED: Apply scale factor to column width
              gridTemplateRows: `${200 * scaleFactor}px auto`, // 🔥 FIXED: Scale the first row height explicitly
              gap: '0',
              justifyContent: shouldCenter ? 'center' : 'start', // Dynamic centering
              minWidth: shouldCenter ? 'auto' : `${totalColumns * 140 * scaleFactor}px` // 🔥 FIXED: Apply scale factor to min width
            }}
          >
            {/* 🔥 DEBUG: REMAINING STACKS AREA - BLUE BACKGROUND */}
            {Array.from({ length: totalColumns }, (_, columnIndex) => {
              const columnNumber = columnIndex + 1;

              // Find token that should be in this column
              const tokenIndex = stackValues.findIndex((_, index) =>
                getColumnForToken(index, stackValues.length) === columnNumber
              );

              const hasToken = tokenIndex !== -1;
              const value = hasToken ? stackValues[tokenIndex] : 0;
              const { remainingValue } = hasToken ? getDisplayValues(tokenIndex) : { remainingValue: 0 };

              return (
                <div
                  key={`remaining-col-${columnNumber}`}
                  className="flex flex-col items-center justify-end relative"
                  style={{
                    minWidth: `${140 * scaleFactor}px`, // 🔥 FIXED: Apply scale factor
                    maxWidth: `${140 * scaleFactor}px`, // 🔥 FIXED: Apply scale factor
                    gridRow: 1, // First row
                    backgroundColor: 'rgba(0, 0, 255, 0.1)', // 🔵 DEBUG: Blue background
                    border: '2px solid rgba(0, 0, 255, 0.3)',
                    borderRadius: '8px',
                    padding: `${8 * scaleFactor}px` // 🔥 FIXED: Scale padding
                  }}
                >
                  {hasToken ? (
                    <div className="relative">
                      {/* Small semi-transparent value card overlayed on the stack near bottom */}
                      <div 
                        className="absolute left-1/2 z-40"
                        style={{ 
                          transform: 'translateX(-50%) scale(1)',
                          bottom: `${16 * scaleFactor}px` // 🔥 FIXED: Scale bottom position
                        }}
                      > 
                        <div 
                          className="rounded-xl border border-[#FFD700]/60 shadow-sm backdrop-blur-sm"
                          style={{
                            background: 'rgba(74, 14, 78, 0.4)',
                            boxShadow: `
                              0 0 4px rgba(255, 215, 0, 0.3),
                              inset 0 0.5px 0 rgba(255, 215, 0, 0.2),
                              inset 0 -0.5px 0 rgba(0, 0, 0, 0.2)
                            `,
                            padding: `${6 * scaleFactor}px ${12 * scaleFactor}px` // 🔥 FIXED: Scale padding
                          }}
                        >
                          <div className="text-center">
                            <div 
                              className="font-bold text-[#FFD700] leading-none"
                              style={{ 
                                fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                textShadow: "0.5px 0.5px 0 #000000",
                                fontSize: `${10 * scaleFactor}px` // 🔥 FIXED: Scale font size
                              }}
                            >
                              {formatCurrency(remainingValue)}
                            </div>
                          </div>
                        </div>
                      </div>

                      <div
                        style={{
                          transform: `scale(0.5)`,
                          transformOrigin: 'center bottom'
                        }}
                      >
                        <ChipStack
                          value={value}
                          showType="remaining"
                          sliderValue={remainingValue}
                          tokenImage={getTokenImage(tokenIndex)}
                          tokenSymbol={getTokenSymbol(tokenIndex)}
                        />
                      </div>
                    </div>
                  ) : (
                    <div 
                      className="text-black/50 text-center"
                      style={{ fontSize: `${12 * scaleFactor}px` }} // 🔥 FIXED: Scale font size
                    >
                      Empty Column {columnNumber}
                    </div>
                  )}
                </div>
              );
            })}

            {/* 🔥 DEBUG: CONTROLS AREA - PURPLE BACKGROUND */}
            <div 
              className="col-span-full"
              style={{
                gridRow: 2,
                gridColumn: `1 / -1`, // Span all columns
                backgroundColor: 'rgba(128, 0, 128, 0.1)', // 🟣 DEBUG: Purple background
                border: '2px solid rgba(128, 0, 128, 0.3)',
                borderRadius: '8px',
                padding: `${0 * scaleFactor}px` // 🔥 FIXED: Scale padding
              }}
            >
              <TokenControls
                totalColumns={totalColumns}
                stackValues={stackValues}
                filteredTokens={filteredTokens}
                sliderValues={sliderValues} // Now percentages
                onSliderChange={onSliderChange}
                getTokenSymbol={getTokenSymbol}
                getColumnForToken={getColumnForToken}
                getDisplayValues={getDisplayValues}
                tokenPricesInSol={tokenPricesInSol}
                solPrice={solPrice}
                shouldCenter={shouldCenter}
                scaleFactor={scaleFactor} // 🔥 NEW: Pass scale factor to controls
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
});

export default TokenPortfolioView;
</file>

<file path="components/TokenPortfolioWrapper.tsx">
'use client';

import { useState, useEffect, useMemo, useCallback } from 'react';
import { usePrivy } from '@privy-io/react-auth';
import { useTokenBalances } from '@/hooks/useTokenBalances';
import { useSolPriceUSD } from '@/hooks/useSolPriceUSD';
import { useTokenPricesSol } from '@/hooks/useTokenPriceSol';
import { useTokenData } from '@/hooks/useTokenData';
import { formatAmountAbbreviated } from '@/utils/tokenUtils';
import TokenPortfolioView from './TokenPortfolioView';
import { WalletConnect } from './WalletConnect';
import { useTokenStore } from '@/stores/tokenStore';
import { useDebugStore } from '@/stores/debugStore';

export function TokenPortfolioWrapper() {
    const { authenticated, user } = usePrivy();
    
    // Get debug wallet address
    const { debugWalletAddress } = useDebugStore();
    
    // Use debug address if available, otherwise use connected wallet
    const effectiveWalletAddress = debugWalletAddress || user?.wallet?.address;
    const isUsingDebugWallet = !!debugWalletAddress;
    
    const { tokens, loading, error } = useTokenBalances(effectiveWalletAddress);

    // Get SOL price
    const { price: solPrice } = useSolPriceUSD();

    // Memoize stable mint addresses to prevent unnecessary re-fetches
    const mintAddresses = useMemo(() => {
        return tokens?.map(token => token.mint) || [];
    }, [tokens]);
    
    const { prices: tokenPricesInSol } = useTokenPricesSol(mintAddresses);

    // Fetch token data from DexScreener to filter tokens with trading pairs
    const { data: dexScreenerData, error: dexScreenerError, isLoading: dexScreenerLoading } = useTokenData({
        chainId: "solana",
        tokenAddresses: mintAddresses,
        enabled: mintAddresses.length > 0
    });

    // Filter tokens to only include those with DexScreener trading data
    const filteredTokens = useMemo(() => {
        if (!tokens || !dexScreenerData) return [];
        
        const dexScreenerTokens = new Set(
            dexScreenerData.map(pair => pair.baseToken.address)
        );

        const filtered = tokens.filter(token => dexScreenerTokens.has(token.mint));
        
        // Only log in development and when data actually changes
        if (process.env.NODE_ENV === 'development' && filtered.length > 0) {
            console.log("TokenPortfolio: Filtered tokens with trading data:", filtered.length, "from wallet:", isUsingDebugWallet ? "DEBUG" : "CONNECTED");
        }
        
        return filtered;
    }, [tokens, dexScreenerData, isUsingDebugWallet]);

    // Calculate USD values for each token - with TRUNCATION
    const stackValues = useMemo(() => {
        if (!filteredTokens || !solPrice) return [];
        
        const values = filteredTokens.map(token => {
            const tokenPriceInSol = tokenPricesInSol[token.mint];
            if (tokenPriceInSol) {
                const valueInSol = token.amount * tokenPriceInSol;
                return valueInSol * solPrice;
            }
            return 0;
        });
        
        return values;
    }, [filteredTokens, tokenPricesInSol, solPrice]);

    // Zustand store for slider percentages
    const { 
        sliderPercentages, 
        setSliderPercentages, 
        updateSliderPercentage 
    } = useTokenStore();

    // Initialize slider percentages only when needed
    const initializeSliderPercentages = useCallback(() => {
        if (filteredTokens.length > 0 && sliderPercentages.length !== filteredTokens.length) {
            const newSliderPercentages = filteredTokens.map(() => 50); // Default to 50%
            setSliderPercentages(newSliderPercentages);
        }
    }, [filteredTokens.length, sliderPercentages.length, setSliderPercentages]);

    // Initialize slider percentages when filteredTokens change
    useEffect(() => {
        initializeSliderPercentages();
    }, [initializeSliderPercentages]);

    // Memoized slider change handler
    const handleSliderChange = useCallback((index: number, percentage: number) => {
        updateSliderPercentage(index, percentage);
    }, [updateSliderPercentage]);

    // Helper functions to prevent recreation on every render
    const getTokenImage = useCallback((index: number) => {
        return filteredTokens[index]?.image || "/jackpotlogo.png";
    }, [filteredTokens]);

    const getTokenSymbol = useCallback((index: number) => {
        return filteredTokens[index]?.symbol || "Unknown";
    }, [filteredTokens]);

    const getRawTokenAmount = useCallback((index: number) => {
        const token = filteredTokens[index];
        if (!token) return "0";
        return formatAmountAbbreviated(token.amount, token.decimals);
    }, [filteredTokens]);

    // Calculate which column a token should be in (1-based)
    const getColumnForToken = useCallback((tokenIndex: number, totalTokens: number) => {
        return tokenIndex + 1; // Simple 1-to-1 mapping for now
    }, []);

    // Calculate total columns needed - exactly match the number of tokens
    const totalColumns = filteredTokens.length;

    // Show loading state
    if (loading) {
        return (
            <div className="relative text-[#FFD700] w-full h-full flex flex-col font-bold text-[1.2rem] items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#FFD700] mx-auto"></div>
                    <div className="mt-2 text-sm">
                        Loading tokens{isUsingDebugWallet ? " (Debug Mode)" : ""}...
                    </div>
                </div>
            </div>
        );
    }

    // Show error state
    if (error) {
        return (
            <div className="relative text-[#FFD700] w-full h-full flex flex-col font-bold text-[1.2rem] items-center justify-center">
                <div className="text-center text-red-400">
                    <div className="text-sm">Error loading tokens:</div>
                    <div className="text-xs mt-1">{error}</div>
                </div>
            </div>
        );
    }

    // Show connect wallet state (only if not using debug mode)
    if (!authenticated && !isUsingDebugWallet) {
        return (
            <div className="relative text-[#FFD700] w-full h-full flex flex-col font-bold text-[1.2rem] items-center justify-center">
                <div className="text-center">
                    <WalletConnect />
                </div>
            </div>
        );
    }

    // Show no tokens state
    if (!filteredTokens.length) {
        return (
            <div className="relative text-[#FFD700] w-full h-full flex flex-col font-bold text-[1.2rem] items-center justify-center">
                <div className="text-center">
                    <div className="text-sm">
                        {dexScreenerLoading ? "Loading trading data..." : "No tokens with trading data found"}
                    </div>
                    {dexScreenerError && (
                        <div className="text-xs text-red-400 font-bold mt-1">
                            Error loading trading data
                        </div>
                    )}
                </div>
            </div>
        );
    }

    // Show loading if we don't have price data yet
    if (!solPrice || Object.keys(tokenPricesInSol).length === 0) {
        return (
            <div className="relative text-[#FFD700] w-full h-full flex flex-col font-bold text-[1.2rem] items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#FFD700] mx-auto"></div>
                    <div className="mt-2 text-sm">Loading price data...</div>
                </div>
            </div>
        );
    }

    return (
        <TokenPortfolioView
            stackValues={stackValues}
            sliderValues={sliderPercentages}
            onSliderChange={handleSliderChange}
            filteredTokens={filteredTokens}
            totalColumns={totalColumns}
            getTokenImage={getTokenImage}
            getTokenSymbol={getTokenSymbol}
            getRawTokenAmount={getRawTokenAmount}
            getColumnForToken={getColumnForToken}
            tokenPricesInSol={tokenPricesInSol}
            solPrice={solPrice}
        />
    );
}
</file>

<file path="components/TokenSelector.tsx">
/* components/TokenSelector.tsx - Mobile List-based Token Selector */
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  motion,
  AnimatePresence,
  LayoutGroup,
} from "framer-motion";
import {
  Wallet,
  Check,
  Coins,
  X,
  Star,
  ChevronDown,
  Plus,
  Minus,
  Edit
} from "lucide-react";
import { useState, useEffect, useMemo, useCallback } from "react";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { usePrivy } from "@privy-io/react-auth";
import { useSolPriceUSD } from "@/hooks/useSolPriceUSD";
import { useTokenPricesSol } from "@/hooks/useTokenPriceSol";
import { useTokenBalances } from "@/hooks/useTokenBalances";
import { useTokenData } from "@/hooks/useTokenData"; // 🔥 NEW: Add DexScreener data
import { useTokenStore } from "@/stores/tokenStore";
import { useUIStore } from "@/stores/uiStore";
import { useDebugStore } from "@/stores/debugStore"; // 🔥 NEW: Import debug store

// 🔥 UNIFIED: Import shared utilities
import { 
  TokenRow,
  formatAmount,
  formatAmountAbbreviated,
  formatUSDValue,
  formatUSDValueSmart
} from '@/lib/tokenUtils';
import {
  calculateMaxUSDValue,
  calculateTokenUSDValue
} from '@/lib/priceCalculations';
import {
  handleTokenAmountInput,
  handleUSDAmountInput,
  createFocusHandlers,
  getRawTokenCount,
  getRawUSDValue
} from '@/lib/inputHandlers';

interface TokenSelectorProps {
  selectedTokens: TokenRow[]; // Still used for reading current selection
  onSelectedTokensChange: (tokens: TokenRow[]) => void; // Deprecated but kept for compatibility
  delayedExpandToken?: string | null;
  onClearDelayedExpand?: () => void;
  isMobile?: boolean;
}

/* ---------- Mobile List Row Component ---------- */
interface MobileTokenRowProps {
  token: TokenRow;
  isSelected: boolean;
  isExpanded?: boolean;
  onSelect?: () => void;
  onRemove?: () => void;
  onAmountChange?: (amount: number) => void;
  onToggleExpand?: () => void;
  selectedAmount?: number;
  usdValue?: number | null;
  solPrice?: number | null;
  tokenPriceInSol?: number | null;
}

function MobileTokenRow({
  token,
  isSelected,
  isExpanded = false,
  onSelect,
  onRemove,
  onAmountChange,
  onToggleExpand,
  selectedAmount,
  usdValue,
  solPrice,
  tokenPriceInSol,
}: MobileTokenRowProps) {
  const [tempAmount, setTempAmount] = useState(
    selectedAmount ?? (isSelected ? token.amount * 0.5 : token.amount)
  );

  // 🔥 UNIFIED: State for USD input and last modified input tracking
  const [tempUSDAmount, setTempUSDAmount] = useState(0);
  const [lastModified, setLastModified] = useState<'token' | 'usd'>('token');

  // 🔥 UNIFIED: Focus tracking for inputs using shared utility
  const { setInputFocus, focusedInputs } = useUIStore();
  const { handleInputFocus, handleInputBlur, isInputFocused } = createFocusHandlers(
    setInputFocus,
    focusedInputs
  );

  // 🔥 UNIFIED: Calculate max USD value using shared utility
  const maxUSDValue = useMemo(() => {
    return calculateMaxUSDValue(token, tokenPriceInSol, solPrice);
  }, [token, tokenPriceInSol, solPrice]);

  useEffect(() => {
    if (selectedAmount !== undefined) setTempAmount(selectedAmount);
  }, [selectedAmount]);

  // 🔥 UNIFIED: Calculate USD value when token amount changes or prices change
  useEffect(() => {
    if (lastModified === 'token' && solPrice && tokenPriceInSol) {
      const usdFromToken = calculateTokenUSDValue(token, tempAmount, tokenPriceInSol, solPrice);
      if (usdFromToken !== null) {
        // 🔥 TRUNCATE to 2 decimal places
        setTempUSDAmount(Math.floor(usdFromToken * 100) / 100);
      }
    }
  }, [tempAmount, solPrice, tokenPriceInSol, token, lastModified]);

  // 🔥 UNIFIED: Calculate token amount when USD amount changes
  useEffect(() => {
    if (lastModified === 'usd' && solPrice && tokenPriceInSol && tempUSDAmount > 0) {
      let tokenFromUSD = 0;
      if (token.mint === 'So11111111111111111111111111111111111111112') {
        // SOL: direct calculation
        tokenFromUSD = tempUSDAmount / solPrice;
      } else {
        // Other tokens: convert through SOL
        const valueInSol = tempUSDAmount / solPrice;
        tokenFromUSD = valueInSol / tokenPriceInSol;
      }
      setTempAmount(Math.min(tokenFromUSD, token.amount)); // Clamp to max available
    }
  }, [tempUSDAmount, solPrice, tokenPriceInSol, token.mint, token.amount, lastModified]);

  const sliderChange = (v: number) => {
    const pct = v / token.amount;
    const snap = [0, 0.25, 0.5, 0.75, 1].find(
      (p) => Math.abs(pct - p) <= 0.01
    );
    const newAmount = (snap ?? pct) * token.amount;
    setTempAmount(newAmount);
    setLastModified('token'); // Slider change should update USD
  };

  // 🔥 UNIFIED: Handle token amount input changes using shared utility
  const handleTokenAmountChange = (value: string) => {
    const dummySliderValues = [0]; // Not used in this context
    const dummyOnChange = () => {}; // We handle the change directly
    
    // We'll manually handle the logic since we need to update local state
    if (value === '' || value === '.') {
      setTempAmount(0);
      setLastModified('token');
      return;
    }

    if (value.endsWith('.') && !isNaN(parseFloat(value.slice(0, -1)))) {
      const numValue = parseFloat(value.slice(0, -1));
      const clampedValue = Math.min(Math.max(0, numValue), token.amount);
      setTempAmount(clampedValue);
      setLastModified('token');
      return;
    }

    const numValue = parseFloat(value);
    if (isNaN(numValue) && value !== '') return;

    const finalValue = isNaN(numValue) ? 0 : numValue;
    const clampedValue = Math.min(Math.max(0, finalValue), token.amount);
    setTempAmount(clampedValue);
    setLastModified('token');
  };

  // 🔥 UNIFIED: Handle USD amount input changes with shared max USD calculation
  const handleUSDAmountChange = (value: string) => {
    // Handle empty string or strings that start with decimal point
    if (value === '' || value === '.') {
      setTempUSDAmount(0);
      setLastModified('usd');
      return;
    }

    // Handle partial decimal inputs like "5." or "0."
    if (value.endsWith('.') && !isNaN(parseFloat(value.slice(0, -1)))) {
      const usdValue = parseFloat(value.slice(0, -1));
      // 🔥 UNIFIED: Clamp to max USD value and TRUNCATE to 2 decimal places
      const clampedValue = Math.min(Math.max(0, usdValue), maxUSDValue);
      setTempUSDAmount(Math.floor(clampedValue * 100) / 100);
      setLastModified('usd');
      return;
    }

    const usdValue = parseFloat(value);
    if (isNaN(usdValue) && value !== '') return;

    const finalUsdValue = isNaN(usdValue) ? 0 : usdValue;
    // 🔥 UNIFIED: Clamp to max USD value and TRUNCATE to 2 decimal places
    const clampedValue = Math.min(Math.max(0, finalUsdValue), maxUSDValue);
    setTempUSDAmount(Math.floor(clampedValue * 100) / 100);
    setLastModified('usd');
  };

  // 🔥 UNIFIED: Get raw values for inputs (always numeric)
  const getRawTokenAmount = () => {
    return tempAmount;
  };

  const getRawUSDAmount = () => {
    return tempUSDAmount;
  };

  // 🔥 UNIFIED: Get formatted values for overlay display using shared utilities
  const getFormattedTokenAmount = () => {
    return formatAmount(tempAmount, token.decimals);
  };

  // 🔥 UNIFIED: USD formatting with shared utility
  const getFormattedUSDAmount = () => {
    return formatUSDValueSmart(tempUSDAmount);
  };

  const confirm = () => {
    if (tempAmount === 0) {
      onRemove?.();
    } else {
      onAmountChange?.(tempAmount);
    }
    onToggleExpand?.(); // Close after confirming
  };

  // 🔥 UNIFIED: Calculate USD value for the current amount using shared utility
  const displayAmount = isSelected ? (selectedAmount ?? token.amount) : token.amount;
  const displayUSDValue = usdValue !== null && usdValue !== undefined ? 
    Math.floor((displayAmount / token.amount) * usdValue * 100) / 100 : null;

  return (
    <motion.div
      layoutId={token.mint}
      layout
      initial={{ opacity: 0, y: -10 }}
      animate={{ 
        opacity: 1, 
        y: 0,
        backgroundColor: isSelected ? "rgba(255, 215, 0, 0.1)" : "rgba(74, 14, 78, 0.3)"
      }}
      exit={{ opacity: 0, y: -10 }}
      transition={{ 
        type: "spring", 
        stiffness: 300, 
        damping: 25,
        duration: 0.3
      }}
      className={`relative overflow-hidden transition-all duration-300 mb-2 ${
        isSelected
          ? "bg-[#FFD700]/10 border-2 border-[#FFD700]"
          : "border-2 border-transparent hover:border-[#FFD700]/50 hover:bg-[#FFD700]/5"
      }`}
      style={{
        borderRadius: "12px" // 🔥 FIXED: Fully rounded corners on all sides
      }}
    >
      {/* Main Row Content */}
      <div className="p-3">
        {/* Token Info Row */}
        <div className="flex items-center gap-3">
          {/* Token Image & Info */}
          <div className="flex items-center gap-3 flex-1 min-w-0">
            <div className="relative w-10 h-10 flex-shrink-0">
              <Image
                src={token.image}
                alt={token.symbol}
                fill
                className="rounded-full object-cover"
                onError={(e) =>
                  ((e.target as HTMLImageElement).src = "/jackpotlogo.png")
                }
              />
              {isSelected && (
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="absolute -top-1 -right-1 w-5 h-5 bg-[#FFD700] rounded-full flex items-center justify-center border-2 border-[#2D0A30]"
                >
                  <Check className="h-2.5 w-2.5 text-black" />
                </motion.div>
              )}
            </div>
            
            <div className="flex-1 min-w-0">
              <div
                className="text-base font-black casino-text-gold truncate"
                style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}
              >
                {token.symbol}
              </div>
              
              {/* Token Amount */}
              <div className="text-sm casino-text-yellow font-bold truncate">
                {isSelected 
                  ? `Selected: ${formatAmountAbbreviated(selectedAmount ?? token.amount, token.decimals)}`
                  : `Balance: ${formatAmountAbbreviated(token.amount, token.decimals)}`
                }
              </div>
              
              {/* USD Value - Using truncated display value */}
              {displayUSDValue !== null && displayUSDValue > 0 && (
                <div className="text-xs casino-text-gold font-semibold truncate opacity-80">
                  {formatUSDValue(displayUSDValue)}
                </div>
              )}
            </div>
          </div>

          {/* Action Buttons - 🔥 ENHANCED: Better rounded corners with style override */}
          <div className="flex items-center gap-2 flex-shrink-0">
            {isSelected && (
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Button
                  onClick={onToggleExpand}
                  className={`px-3 py-2 transition-all duration-200 font-black text-xs border-2 ${
                    isExpanded 
                      ? "bg-[#FFFF00] hover:bg-[#FFD700] text-black border-[#FFD700]" 
                      : "casino-button border-[#FFD700]"
                  }`}
                  style={{ 
                    fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                    boxShadow: "0 0 8px rgba(255, 215, 0, 0.6)",
                    borderRadius: "12px" // 🔥 EXPLICIT: Force rounded corners
                  }}
                >
                  <Edit className={`h-4 w-4 ${isExpanded ? 'rotate-180' : ''} transition-transform duration-200`} />
                </Button>
              </motion.div>
            )}
            
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Button
                onClick={isSelected ? onRemove : onSelect}
                className={`px-3 py-2 font-black text-xs border-2 transition-all duration-200 ${
                  isSelected 
                    ? "bg-[#FF1493] hover:bg-[#DC143C] text-white border-[#FF1493]" 
                    : "casino-button border-[#FFD700]"
                }`}
                style={{ 
                  fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                  boxShadow: isSelected 
                    ? "0 0 8px rgba(255, 20, 147, 0.6)" 
                    : "0 0 8px rgba(255, 215, 0, 0.6)",
                  borderRadius: "12px" // 🔥 EXPLICIT: Force rounded corners
                }}
              >
                {isSelected ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
              </Button>
            </motion.div>
          </div>
        </div>

        {/* Collapsible Edit Area */}
        <AnimatePresence>
          {isSelected && isExpanded && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              transition={{ 
                type: "spring", 
                stiffness: 300, 
                damping: 25,
                duration: 0.3 
              }}
              className="overflow-hidden"
            >
              <div className="border-t border-[#FFD700]/30 pt-4 mt-3 space-y-4">
                
                {/* 🔥 UNIFIED: Input areas with shared styling */}
                <div>
                  <div className="text-xs casino-text-yellow font-bold mb-3 text-center">
                    Select Amount
                  </div>
                  
                  {/* Side-by-side inputs with 70/30 split */}
                  <div className="flex gap-3">
                    {/* Token Count Input - 70% width */}
                    <div className="flex-[0.7]">
                      <div className="text-xs casino-text-yellow font-bold mb-2 flex items-center gap-1">
                        <Coins className="h-3 w-3" />
                        Token Amount
                      </div>
                      <div className="space-y-2">
                        {/* 🔥 UNIFIED: Container styling */}
                        <div 
                          className="relative casino-input text-center font-black text-sm"
                          style={{ 
                            background: 'var(--casino-dark-purple)',
                            border: '2px solid var(--casino-gold)',
                            borderRadius: '6px',
                            color: 'var(--casino-gold)',
                            fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                            fontWeight: 600,
                            fontSize: "13px",
                            minHeight: '36px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center'
                          }}
                        >
                          {/* ACTUAL INPUT - Always present but visibility controlled */}
                          <Input
                            type="number"
                            value={getRawTokenAmount().toString()}
                            onChange={(e) => handleTokenAmountChange(e.target.value)}
                            onFocus={() => handleInputFocus(`token-${token.mint}`)}
                            onBlur={() => handleInputBlur(`token-${token.mint}`)}
                            min={0}
                            max={token.amount}
                            step={1 / 10 ** Math.min(token.decimals, 6)}
                            className={`absolute inset-0 w-full h-full text-center font-black bg-transparent border-none outline-none ${
                              isInputFocused(`token-${token.mint}`) ? 'opacity-100 text-[#FFD700]' : 'opacity-0'
                            } transition-opacity duration-150`}
                            style={{ 
                              fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                              fontSize: '13px',
                              color: 'var(--casino-gold)'
                            }}
                            placeholder="0"
                          />
                          
                          {/* OVERLAY - Shows formatted value when not focused */}
                          {!isInputFocused(`token-${token.mint}`) && (
                            <div
                              className="absolute inset-0 flex items-center justify-center text-center font-black leading-none pointer-events-none"
                              style={{ 
                                fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                textShadow: "0.5px 0.5px 0 #000000",
                                fontSize: '13px',
                                color: 'var(--casino-gold)'
                              }}
                            >
                              {getFormattedTokenAmount()}
                            </div>
                          )}
                        </div>
                        <div className="text-xs casino-text-gold font-bold text-center">
                          {((tempAmount / token.amount) * 100).toFixed(0)}% of balance
                        </div>
                      </div>
                    </div>

                    {/* USD Value Input - 30% width */}
                    <div className="flex-[0.3]">
                      <div className="text-xs casino-text-yellow font-bold mb-2 flex items-center gap-1">
                        <span className="text-green-400">$</span>
                        USD Value
                      </div>
                      <div className="space-y-2">
                        {/* 🔥 UNIFIED: Container styling */}
                        <div 
                          className="relative casino-input text-center font-black text-sm"
                          style={{ 
                            background: 'var(--casino-dark-purple)',
                            border: '2px solid var(--casino-gold)',
                            borderRadius: '6px',
                            color: 'var(--casino-gold)',
                            fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                            fontWeight: 600,
                            fontSize: "13px",
                            minHeight: '36px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            opacity: (!solPrice || !tokenPriceInSol) ? 0.5 : 1
                          }}
                        >
                          {/* 🔥 UNIFIED: ACTUAL INPUT - Raw numeric value without forced formatting */}
                          <Input
                            type="number"
                            value={getRawUSDAmount().toString()}
                            onChange={(e) => handleUSDAmountChange(e.target.value)}
                            onFocus={() => handleInputFocus(`usd-${token.mint}`)}
                            onBlur={() => handleInputBlur(`usd-${token.mint}`)}
                            min={0}
                            max={maxUSDValue}
                            step={0.01}
                            className={`absolute inset-0 w-full h-full text-center font-black bg-transparent border-none outline-none ${
                              isInputFocused(`usd-${token.mint}`) ? 'opacity-100 text-[#FFD700]' : 'opacity-0'
                            } transition-opacity duration-150`}
                            style={{ 
                              fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                              fontSize: '13px',
                              color: 'var(--casino-gold)'
                            }}
                            placeholder="0"
                            disabled={!solPrice || !tokenPriceInSol}
                          />
                          
                          {/* 🔥 UNIFIED: OVERLAY - Shows formatted value when not focused */}
                          {!isInputFocused(`usd-${token.mint}`) && (
                            <div
                              className="absolute inset-0 flex items-center justify-center text-center font-black leading-none pointer-events-none"
                              style={{ 
                                fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                                textShadow: "0.5px 0.5px 0 #000000",
                                fontSize: '13px',
                                color: 'var(--casino-gold)'
                              }}
                            >
                              {getFormattedUSDAmount()}
                            </div>
                          )}
                        </div>
                        {(!solPrice || !tokenPriceInSol) ? (
                          <div className="text-xs text-red-400 text-center leading-tight">
                            Price unavailable
                          </div>
                        ) : (
                          <div className="text-xs casino-text-green-400 font-bold text-center">
                            Max: {formatUSDValue(maxUSDValue)}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>

                {/* 🔥 Enhanced Slider with Visible Track */}
                <div>
                  <div className="text-xs casino-text-yellow font-bold mb-2">Quick Select</div>
                  <div className="px-2 py-2">
                    <div className="relative">
                      {/* 🎯 Custom visible track background - always visible */}
                      <div 
                        className="absolute top-1/2 left-0 right-0 h-3 bg-gradient-to-r from-[#FFD700] to-[#FFFF00] rounded-full border-2 border-[#000000] transform -translate-y-1/2"
                        style={{
                          boxShadow: `
                            inset 0 2px 4px rgba(0, 0, 0, 0.5),
                            0 0 8px rgba(255, 215, 0, 0.6)
                          `
                        }}
                      />
                      
                      {/* Snap point indicators */}
                      <div className="absolute top-1/2 left-0 right-0 transform -translate-y-1/2 flex justify-between px-1">
                        {[0, 25, 50, 75, 100].map((percent) => (
                          <div
                            key={percent}
                            className="w-2 h-2 bg-[#000000] border border-[#FFD700] rounded-full"
                            style={{
                              boxShadow: '0 0 4px rgba(255, 215, 0, 0.8)'
                            }}
                          />
                        ))}
                      </div>
                      
                      {/* Actual slider on top - now invisible track */}
                      <Slider
                        value={[tempAmount]}
                        min={0}
                        max={token.amount}
                        step={1 / 10 ** Math.min(token.decimals, 6)}
                        onValueChange={([v]) => sliderChange(v)}
                        className="mobile-custom-slider relative z-10"
                      />
                    </div>
                    
                    {/* Percentage markers instead of range indicators */}
                    <div className="flex justify-between text-xs casino-text-yellow font-bold mt-2 px-1">
                      <span>0</span>
                      <span>25%</span>
                      <span>50%</span>
                      <span>75%</span>
                      <span>100%</span>
                    </div>
                  </div>
                </div>

                {/* Selected Amount Summary & Action Buttons - 🔥 UNIFIED: Better rounded corners */}
                <div 
                  className="flex items-center justify-between p-3 border border-[#FFD700]/40"
                  style={{
                    background: 'rgba(74, 14, 78, 0.3)',
                    borderRadius: '16px', // 🔥 UNIFIED: More explicit and consistent rounding
                    backdropFilter: 'blur(10px)'
                  }}
                >
                  <div>
                    <div className="text-base font-black casino-text-gold" 
                         style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}>
                      {formatAmountAbbreviated(tempAmount, token.decimals)} {token.symbol}
                    </div>
                    <div className="text-xs casino-text-yellow font-bold">Selected Amount</div>
                    {/* USD value for temp amount - 🔥 UNIFIED display */}
                    {tempUSDAmount > 0 && (
                      <div className="text-xs casino-text-green-400 font-semibold">
                        ≈ {formatUSDValue(tempUSDAmount)}
                      </div>
                    )}
                  </div>
                  
                  <div className="flex gap-2">
                    <motion.div
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <Button
                        onClick={onToggleExpand}
                        className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white text-xs font-black border-2 border-gray-500 transition-all duration-200"
                        style={{ 
                          fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                          boxShadow: "0 0 8px rgba(100, 100, 100, 0.6)",
                          borderRadius: "12px" // 🔥 EXPLICIT: Force rounded corners
                        }}
                      >
                        Cancel
                      </Button>
                    </motion.div>
                    
                    <motion.div
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <Button
                        onClick={confirm}
                        className={`px-4 py-2 font-black uppercase text-xs border-2 transition-all duration-200 ${
                          tempAmount === 0
                            ? "bg-[#FF1493] hover:bg-[#DC143C] text-white border-[#FF1493]"
                            : "casino-button border-[#FFD700]"
                        }`}
                        style={{ 
                          fontFamily: "Visby Round CF, SF Pro Display, sans-serif",
                          boxShadow: tempAmount === 0
                            ? "0 0 12px rgba(255, 20, 147, 0.8)"
                            : "0 0 12px rgba(255, 215, 0, 0.8)",
                          borderRadius: "12px" // 🔥 EXPLICIT: Force rounded corners
                        }}
                      >
                        {tempAmount === 0 ? (
                          <>
                            <X className="h-3 w-3 mr-1" />
                            Remove
                          </>
                        ) : (
                          <>
                            <Check className="h-3 w-3 mr-1" />
                            Update
                          </>
                        )}
                      </Button>
                    </motion.div>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.div>
  );
}

/* ---------- Mobile List-based TokenSelector ---------- */
export function TokenSelector({
  selectedTokens, // Still used for reading current selection
  onSelectedTokensChange, // Deprecated but kept for compatibility
  delayedExpandToken,
  onClearDelayedExpand,
  isMobile = false,
}: TokenSelectorProps) {
  const { authenticated, user } = usePrivy();
  const publicKey = user?.wallet?.address;
  
  // 🔥 NEW: Get debug wallet address
  const { debugWalletAddress } = useDebugStore();
  
  // 🔥 NEW: Use debug address if available, otherwise use connected wallet
  const effectiveWalletAddress = debugWalletAddress || publicKey;
  const isUsingDebugWallet = !!debugWalletAddress;
  
  const { tokens, loading, error } = useTokenBalances(effectiveWalletAddress); // 🔥 Get all tokens
  
  // 🔥 NEW: Get all mint addresses for DexScreener filtering
  const mintAddresses = useMemo(() => tokens?.map(token => token.mint) || [], [tokens]);
  const { data: dexScreenerData, error: dexScreenerError, isLoading: dexScreenerLoading } = useTokenData({
    chainId: "solana",
    tokenAddresses: mintAddresses,
    enabled: mintAddresses.length > 0
  });

  // 🔥 NEW: Filter tokens to only include those with DexScreener trading data (same as portfolio view)
  const filteredTokens = useMemo(() => {
    if (!tokens || !dexScreenerData) return [];
    
    const dexScreenerTokens = new Set(
      dexScreenerData.map(pair => pair.baseToken.address)
    );

    const filtered = tokens.filter(token => dexScreenerTokens.has(token.mint));
    
    // Only log in development and when data actually changes
    if (process.env.NODE_ENV === 'development' && filtered.length > 0) {
      console.log("TokenSelector: Filtered tokens with trading data:", filtered.length, "from wallet:", isUsingDebugWallet ? "DEBUG" : "CONNECTED");
    }
    
    return filtered;
  }, [tokens, dexScreenerData, isUsingDebugWallet]);

  const { prices: tokenPricesInSol } = useTokenPricesSol(mintAddresses);

  // 🔥 UNIFIED: Use Zustand store for token operations instead of props
  const { 
    selectedTokens: zustandSelectedTokens,
    expandedToken,
    setExpandedToken,
    addToken,
    removeToken,
    updateTokenAmount
  } = useTokenStore();

  // 🔥 UNIFIED: Add price hooks for USD values
  const { price: solPrice } = useSolPriceUSD();

  // 🔥 UNIFIED: Calculate USD values for each token using shared utility
  const tokenUSDValues = useMemo(() => {
    const valuesMap: Record<string, number | null> = {};

    filteredTokens.forEach(token => {
      const usdValue = calculateTokenUSDValue(token, token.amount, tokenPricesInSol[token.mint], solPrice);
      valuesMap[token.mint] = usdValue;
    });

    return valuesMap;
  }, [filteredTokens, tokenPricesInSol, solPrice]);

  useEffect(() => {
    if (delayedExpandToken) {
      setExpandedToken(delayedExpandToken);
      onClearDelayedExpand?.();
    }
  }, [delayedExpandToken, onClearDelayedExpand, setExpandedToken]);

  // 🔥 UNIFIED: Use Zustand selected tokens instead of props
  const selectedMints = new Set(zustandSelectedTokens.map(t => t.mint));
  const availableTokens = filteredTokens.filter(t => !selectedMints.has(t.mint)); // 🔥 Use filteredTokens instead of tokens
  
  // Combine lists: selected first, then available
  const allTokens = [
    ...zustandSelectedTokens.map(st => ({
      ...st,
      // Make sure we have the latest balance data
      amount: filteredTokens.find(t => t.mint === st.mint)?.amount ?? st.amount, // 🔥 Use filteredTokens
      selected: true
    })),
    ...availableTokens.map(at => ({ ...at, selected: false }))
  ];

  // 🔥 UNIFIED: Use Zustand actions instead of prop-based callbacks
  const select = (token: TokenRow) => {
    addToken(token);
    // Auto-expand the newly selected token for editing
    setExpandedToken(token.mint);
  };

  const remove = (mint: string) => {
    removeToken(mint);
  };

  const update = (mint: string, amt: number) => {
    updateTokenAmount(mint, amt);
  };

  const toggleExpand = (mint: string) => {
    setExpandedToken(expandedToken === mint ? null : mint);
  };

  return (
    <div className="w-full h-full flex flex-col">
      {/* Header */}
      <div className="flex-shrink-0 mb-3">
        <h3
          className="text-lg font-black uppercase casino-text-gold text-center"
          style={{ fontFamily: "Visby Round CF, SF Pro Display, sans-serif" }}
        >
          {zustandSelectedTokens.length > 0 
            ? `AVAILABLE TOKENS (${allTokens.length})`
            : `AVAILABLE TOKENS (${allTokens.length})`
          }
          {/* 🔥 REMOVED: Debug mode indicator - too intrusive */}
        </h3>
        {/* 🔥 REMOVED: Show loading status for DexScreener filtering - too intrusive */}
      </div>

      {/* 🔥 UNIFIED: Fill ALL available space with proper flex layout */}
      <div 
        className="flex-1 min-h-0 scrollable-list-container"
        style={{ 
          overflowY: 'auto',
          overflowX: 'hidden',
          WebkitOverflowScrolling: 'touch', // iOS smooth scrolling
        }}
      >
        {loading ? (
          <div className="flex flex-col items-center justify-center h-full">
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            >
              <Coins className="h-8 w-8 casino-text-gold" />
            </motion.div>
            <span className="text-sm casino-text-gold font-bold mt-2">
              Loading tokens{isUsingDebugWallet ? " (Debug)" : ""}...
            </span>
            {/* 🔥 REMOVED: Debug address display - too intrusive */}
          </div>
        ) : error ? (
          <div className="text-center py-8">
            <span className="text-sm text-red-400 font-bold">
              Error: {error}
            </span>
            {/* 🔥 REMOVED: Debug address display - too intrusive */}
          </div>
        ) : !allTokens.length ? (
          <div className="flex flex-col items-center justify-center h-full">
            <Wallet className="h-8 w-8 casino-text-gold mb-2" />
            <span className="text-sm casino-text-gold font-bold">
              {/* 🔥 NEW: Updated message for DexScreener filtering */}
              {dexScreenerLoading ? "Loading trading data..." : "No tokens with trading data found"}
            </span>
            {/* 🔥 REMOVED: Debug address display - too intrusive */}
          </div>
        ) : (
          <div className="px-2"> {/* Removed excessive bottom padding */}
            <LayoutGroup id="tokens">
              <AnimatePresence>
                {allTokens.map((token) => (
                  <MobileTokenRow
                    key={token.mint}
                    token={token}
                    isSelected={token.selected || false}
                    isExpanded={expandedToken === token.mint}
                    onSelect={() => select(token)}
                    onRemove={() => remove(token.mint)}
                    onAmountChange={(amount) => update(token.mint, amount)}
                    onToggleExpand={() => toggleExpand(token.mint)}
                    selectedAmount={token.selectedAmount}
                    usdValue={tokenUSDValues[token.mint]}
                    solPrice={solPrice}
                    tokenPriceInSol={tokenPricesInSol[token.mint]}
                  />
                ))}
              </AnimatePresence>
            </LayoutGroup>
          </div>
        )}
      </div>

      {/* 🔥 ENHANCED SLIDER STYLES - Added mobile-custom-slider */}
      <style jsx>{`
        /* 🎯 WEBKIT SCROLLBAR - Ultra visible with animations */
        .scrollable-list-container::-webkit-scrollbar {
          width: 16px !important;
          background: linear-gradient(180deg, #FF1493 0%, #FFD700 50%, #FF1493 100%) !important;
          border-radius: 8px !important;
          border: 3px solid #FFFF00 !important;
          box-shadow: 0 0 20px rgba(255, 215, 0, 1) !important;
        }
        
        .scrollable-list-container::-webkit-scrollbar-track {
          background: linear-gradient(180deg, #000000 0%, #2D0A30 50%, #000000 100%) !important;
          border-radius: 8px !important;
          border: 2px solid #FFD700 !important;
          box-shadow: 
            inset 0 0 20px rgba(255, 215, 0, 0.5),
            0 0 30px rgba(255, 215, 0, 1) !important;
        }
        
        .scrollable-list-container::-webkit-scrollbar-thumb {
          background: linear-gradient(180deg, #FFFF00 0%, #FFD700 25%, #FF1493 50%, #FFD700 75%, #FFFF00 100%) !important;
          border-radius: 8px !important;
          border: 3px solid #FFFF00 !important;
          box-shadow: 
            0 0 30px rgba(255, 215, 0, 1),
            inset 0 2px 0 rgba(255, 255, 255, 0.8),
            inset 0 -2px 0 rgba(0, 0, 0, 0.8),
            0 0 40px rgba(255, 20, 147, 0.8) !important;
          min-height: 40px !important;
          animation: pulse-glow 2s infinite !important;
        }
        
        @keyframes pulse-glow {
          0%, 100% { 
            box-shadow: 
              0 0 30px rgba(255, 215, 0, 1),
              0 0 40px rgba(255, 20, 147, 0.8);
          }
          50% { 
            box-shadow: 
              0 0 50px rgba(255, 255, 0, 1),
              0 0 60px rgba(255, 20, 147, 1);
          }
        }
        
        .scrollable-list-container::-webkit-scrollbar-thumb:hover {
          background: linear-gradient(180deg, #FFFFFF 0%, #FFFF00 25%, #FF69B4 50%, #FFFF00 75%, #FFFFFF 100%) !important;
          transform: scale(1.2) !important;
          box-shadow: 
            0 0 50px rgba(255, 255, 255, 1),
            0 0 70px rgba(255, 20, 147, 1) !important;
        }
        
        .scrollable-list-container::-webkit-scrollbar-thumb:active {
          background: linear-gradient(180deg, #FF0000 0%, #FFFF00 25%, #00FFFF 50%, #FFFF00 75%, #FF0000 100%) !important;
          transform: scale(1.1) !important;
          box-shadow: 
            0 0 60px rgba(255, 0, 0, 1),
            0 0 80px rgba(0, 255, 255, 1) !important;
        }

        /* 🔥 FIREFOX FALLBACK */
        .scrollable-list-container {
          scrollbar-width: thick !important;
          scrollbar-color: #FFD700 #2D0A30 !important;
        }

        /* 🎯 MOBILE CUSTOM SLIDER STYLES - Updated with transparent track */
        :global(.mobile-custom-slider [data-radix-slider-track]) {
          background: transparent !important;
          height: 16px !important;
          position: relative;
        }
        
        :global(.mobile-custom-slider [data-radix-slider-range]) {
          background: linear-gradient(90deg, #FFD700, #FFFF00) !important;
          height: 16px !important;
          border-radius: 8px !important;
          box-shadow: 
            0 0 12px rgba(255, 215, 0, 0.9),
            inset 0 1px 0 rgba(255, 255, 255, 0.4),
            inset 0 -1px 0 rgba(0, 0, 0, 0.3) !important;
          border: 2px solid #000000 !important;
          position: relative;
        }
        
        :global(.mobile-custom-slider [data-radix-slider-thumb]) {
          width: 28px !important;
          height: 28px !important;
          background: linear-gradient(145deg, #FFD700, #DAA520) !important;
          border: 4px solid #FFFF00 !important;
          border-radius: 50% !important;
          box-shadow: 
            0 0 0 3px #000000,
            0 0 20px rgba(255, 215, 0, 1),
            0 6px 12px rgba(0, 0, 0, 0.4) !important;
          cursor: pointer !important;
          transition: all 0.2s ease !important;
          position: relative !important;
          z-index: 20 !important;
        }
        
        :global(.mobile-custom-slider [data-radix-slider-thumb]:hover) {
          background: linear-gradient(145deg, #FFFF00, #FFD700) !important;
          transform: scale(1.2) !important;
          box-shadow: 
            0 0 0 3px #000000,
            0 0 25px rgba(255, 215, 0, 1),
            0 8px 16px rgba(0, 0, 0, 0.5) !important;
        }
        
        :global(.mobile-custom-slider [data-radix-slider-thumb]:focus) {
          outline: none !important;
          background: linear-gradient(145deg, #FFFF00, #FFD700) !important;
          transform: scale(1.2) !important;
        }
        
        :global(.mobile-custom-slider) {
          width: 100% !important;
          height: 28px !important;
          display: flex !important;
          align-items: center !important;
          position: relative !important;
        }
      `}</style>
    </div>
  );
}
</file>

<file path="components/TopChip.tsx">
'use client';

import React, { memo, useMemo } from 'react';
import { getChipStyle } from '@/constants/denominations';

interface TopChipProps {
  imageUrl: string;
  text: string;
  chipValue: number;
  position: { top: number; left: number };
  zIndex: number;
  isSelected?: boolean;
  stackHeight: number;
  gapBetweenLayers: number;
  tokenSymbol?: string;
  scaleFactorProp?: number; // 🔥 NEW: Optional scale factor prop
}

// 🔥 MEMOIZED: Component to prevent unnecessary re-renders
const TopChip = memo(function TopChip({
  imageUrl,
  text,
  chipValue,
  position,
  zIndex,
  isSelected = false,
  stackHeight,
  gapBetweenLayers,
  tokenSymbol = "TOKEN",
  scaleFactorProp = 1 // 🔥 NEW: Default to 1 (no scaling)
}: TopChipProps) {
  const chipStyle = getChipStyle(chipValue);
  
  // 🔥 NEW: Apply scale factor to chip dimensions
  const scaledChipSize = 144 * scaleFactorProp; // Base size is 144px (w-36 h-36)
  const scaledImageSize = 80 * scaleFactorProp;  // Base image size is 80px (w-20 h-20)
  const scaledRadius = 54 * scaleFactorProp;     // SVG circle radius
  
  // 🔥 MEMOIZED: Border colors to prevent recalculation
  const borderColors = useMemo(() => ({
    main: isSelected ? 'border-yellow-400' : 'border-black',
    image: isSelected ? 'border-yellow-400' : 'border-black'
  }), [isSelected]);

  // 🔥 MEMOIZED: Background color calculation
  const bgColor = useMemo(() => {
    if (chipValue < 1) return 'bg-gray-300'; // Light grey for penny chips
    if (chipValue >= 1000000) return 'bg-amber-500'; // Golden $1M chips
    if (chipValue >= 500000) return 'bg-violet-600'; // Royal purple $500K chips
    if (chipValue >= 100000) return 'bg-rose-600'; // Rich red $100K chips
    if (chipValue >= 50000) return 'bg-emerald-600'; // Rich green $50K chips
    if (chipValue >= 10000) return 'bg-orange-600'; // Rich orange $10K chips
    if (chipValue >= 5000) return 'bg-yellow-500'; // Golden $5K chips
    if (chipValue >= 1000) return 'bg-gray-900';
    if (chipValue >= 500) return 'bg-purple-600';
    if (chipValue >= 100) return 'bg-red-500';
    if (chipValue >= 50) return 'bg-orange-500';
    if (chipValue >= 20) return 'bg-green-500';
    if (chipValue >= 10) return 'bg-blue-500';
    if (chipValue >= 5) return 'bg-yellow-400';
    if (chipValue >= 1) return 'bg-cyan-400';
    return 'bg-gray-300'; // Fallback to light grey
  }, [chipValue]);

  // 🔥 MEMOIZED: Connecting line height calculation
  const connectingLineHeight = useMemo(() => {
    return stackHeight * gapBetweenLayers;
  }, [stackHeight, gapBetweenLayers]);

  // 🔥 MEMOIZED: Text distribution calculation (expensive operation)
  const textDistribution = useMemo(() => {
    // Clean the symbol and ensure it starts with $
    const cleanSymbol = tokenSymbol.startsWith('$') ? tokenSymbol : `$${tokenSymbol}`;
    
    // Calculate how many times we can fit the symbol around the circle
    const fontSize = 14 * scaleFactorProp; // 🔥 NEW: Scale font size
    const circumference = 2 * Math.PI * scaledRadius; // 🔥 NEW: Use scaled radius
    
    // Estimate character width (using worst-case for consistency)
    const avgCharWidth = fontSize * 0.6; // Conservative estimate
    const symbolWidth = cleanSymbol.length * avgCharWidth;
    const separatorWidth = 1.5 * avgCharWidth; // " • " width (reduced)
    
    // Find optimal number of repetitions
    let bestReps = 3;
    for (let reps = 8; reps >= 3; reps--) {
      const totalContentWidth = reps * (symbolWidth + separatorWidth);
      if (totalContentWidth <= circumference * 0.9) { // Leave 10% margin
        bestReps = reps;
        break;
      }
    }
    
    // Calculate positions for symbols and dots
    const totalElements = bestReps * 2; // symbols + dots
    const elementAngle = 360 / totalElements; // Degrees per element
    
    return {
      repetitions: bestReps,
      elementAngle,
      symbol: cleanSymbol,
      fontSize // 🔥 NEW: Include scaled font size
    };
  }, [tokenSymbol, scaleFactorProp, scaledRadius]);

  // 🔥 MEMOIZED: Unique ID for SVG path
  const uniqueId = useMemo(() => {
    return `circle-${isSelected ? 'selected' : 'original'}-${chipValue}-${position.top}-${tokenSymbol}-${scaleFactorProp}`;
  }, [isSelected, chipValue, position.top, tokenSymbol, scaleFactorProp]);

  // 🔥 MEMOIZED: Style objects to prevent recreation
  const styles = useMemo(() => ({
    topCircle: {
      top: `${position.top}px`,
      left: `${position.left}px`,
      zIndex: zIndex + 200,
      width: `${scaledChipSize}px`, // 🔥 NEW: Scaled width
      height: `${scaledChipSize}px` // 🔥 NEW: Scaled height
    },
    bottomCircle: {
      top: `${position.top + gapBetweenLayers}px`,
      left: `${position.left}px`,
      zIndex: zIndex,
      width: `${scaledChipSize}px`, // 🔥 NEW: Scaled width
      height: `${scaledChipSize}px` // 🔥 NEW: Scaled height
    },
    bottomCircleStroke: {
      top: `${position.top + gapBetweenLayers}px`,
      left: `${position.left}px`,
      zIndex: zIndex + 100,
      clipPath: 'polygon(0 50%, 100% 50%, 100% 100%, 0 100%)',
      width: `${scaledChipSize}px`, // 🔥 NEW: Scaled width
      height: `${scaledChipSize}px` // 🔥 NEW: Scaled height
    },
    leftLine: {
      left: `${position.left}px`,
      top: `${position.top + (72 * scaleFactorProp)}px`, // 🔥 NEW: Scale line position
      height: `${connectingLineHeight}px`,
      zIndex: zIndex + 150
    },
    rightLine: {
      left: `${position.left + (140 * scaleFactorProp)}px`, // 🔥 FIXED: Use scaled 140px instead of scaledChipSize
      top: `${position.top + (72 * scaleFactorProp)}px`, // 🔥 NEW: Scale line position
      height: `${connectingLineHeight}px`,
      zIndex: zIndex + 150
    }
  }), [position.top, position.left, zIndex, gapBetweenLayers, connectingLineHeight, scaledChipSize, scaleFactorProp]);

  // 🔥 MEMOIZED: Generate text elements
  const textElements = useMemo(() => {
    const elements = [];
    
    for (let index = 0; index < textDistribution.repetitions; index++) {
      const symbolPosition = (index * 2) * textDistribution.elementAngle; // Even positions for symbols
      const dotPosition = (index * 2 + 1) * textDistribution.elementAngle; // Odd positions for dots
      
      const symbolOffset = (symbolPosition / 360) * 100; // Convert to percentage
      const dotOffset = (dotPosition / 360) * 100; // Convert to percentage
      
      // Symbol
      elements.push(
        <text 
          key={`symbol-${index}`}
          fontSize={textDistribution.fontSize} // 🔥 NEW: Use scaled font size
          fontWeight="bold" 
          fill={chipStyle.textColor}
          fontFamily="Arial, sans-serif"
          letterSpacing="0px"
        >
          <textPath 
            href={`#${uniqueId}`} 
            startOffset={`${symbolOffset}%`}
          >
            {textDistribution.symbol}
          </textPath>
        </text>
      );
      
      // Dot
      elements.push(
        <text 
          key={`dot-${index}`}
          fontSize={textDistribution.fontSize} // 🔥 NEW: Use scaled font size
          fontWeight="bold" 
          fill={chipStyle.textColor}
          fontFamily="Arial, sans-serif"
        >
          <textPath 
            href={`#${uniqueId}`} 
            startOffset={`${dotOffset}%`}
            textAnchor="middle"
          >
            •
          </textPath>
        </text>
      );
    }
    
    return elements;
  }, [textDistribution, uniqueId, chipStyle.textColor]);

  return (
    <div className="absolute">
      {/* Top circle with image and evenly distributed text */}
      <div 
        className={`absolute border-4 ${borderColors.main} rounded-full flex items-center justify-center ${bgColor} transition-all duration-300`}
        style={styles.topCircle}
      >
        <img 
          src={imageUrl}
          alt="Token"
          className={`border-4 ${borderColors.image} rounded-full object-cover transition-all duration-300`}
          style={{
            width: `${scaledImageSize}px`, // 🔥 NEW: Scaled image size
            height: `${scaledImageSize}px`
          }}
        />
        
        {/* Evenly distributed circular text SVG */}
        <svg 
          className="absolute inset-0 w-full h-full"
          viewBox={`0 0 ${scaledChipSize} ${scaledChipSize}`} // 🔥 NEW: Scaled viewBox
          style={{ overflow: 'visible' }}
        >
          <defs>
            <path 
              id={uniqueId}
              d={`M ${scaledChipSize/2} ${scaledChipSize/2 - scaledRadius} A ${scaledRadius} ${scaledRadius} 0 1 1 ${(scaledChipSize/2) - 0.2} ${scaledChipSize/2 - scaledRadius}`} // 🔥 NEW: Scaled path
              fill="none"
            />
          </defs>
          
          {textElements}
        </svg>
      </div>

      {/* Bottom circle for TopChip's 3D effect - this is part of the same logical chip */}
      <div 
        className={`absolute rounded-full ${bgColor} transition-all duration-300`}
        style={styles.bottomCircle}
      />
      
      {/* Bottom circle stroke for TopChip's 3D effect */}
      <div 
        className={`absolute border-4 ${borderColors.main} rounded-full bg-transparent transition-all duration-300`}
        style={styles.bottomCircleStroke}
      />

      {/* Connecting lines - Always render for 3D cylinder effect */}
      {/* Left connecting line */}
      <div 
        className={`absolute border-l-4 ${borderColors.main} transition-all duration-300`}
        style={styles.leftLine}
      />
      
      {/* Right connecting line */}
      <div 
        className={`absolute border-l-4 ${borderColors.main} transition-all duration-300`}
        style={styles.rightLine}
      />
    </div>
  );
});

export default TopChip;
</file>

<file path="components/UnifiedAudioControl.tsx">
"use client";

import { motion, AnimatePresence } from "framer-motion";
import { Volume2, VolumeX } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { useState, useRef, useEffect } from "react";
import { createPortal } from "react-dom";
import { useAudioStore } from "@/stores/audioStore";

export function UnifiedAudioControl() {
  const { isMuted, volume, toggleMute, setVolume } = useAudioStore();
  const [showVolumeSlider, setShowVolumeSlider] = useState(false);
  const [popupPosition, setPopupPosition] = useState<{top: number, left: number} | null>(null);
  const buttonRef = useRef<HTMLButtonElement>(null);

  // Calculate popup position when showing
  useEffect(() => {
    if (showVolumeSlider && buttonRef.current) {
      const rect = buttonRef.current.getBoundingClientRect();
      setPopupPosition({
        top: rect.top - 10, // 10px above the button
        left: rect.left + rect.width / 2, // Center horizontally
      });
    } else {
      setPopupPosition(null);
    }
  }, [showVolumeSlider]);

  // Close popup when clicking outside
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (
        showVolumeSlider && 
        buttonRef.current && 
        !buttonRef.current.contains(e.target as Node)
      ) {
        // Check if the click is inside the popup
        const popupElements = document.querySelectorAll('.volume-popup');
        let clickedInside = false;
        
        popupElements.forEach(popup => {
          if (popup.contains(e.target as Node)) {
            clickedInside = true;
          }
        });
        
        if (!clickedInside) {
          setShowVolumeSlider(false);
        }
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showVolumeSlider]);

  // Volume slider popup content
  const volumePopup = showVolumeSlider && popupPosition && (
    <motion.div
      initial={{ opacity: 0, y: 20, scale: 0.9 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      exit={{ opacity: 0, y: 20, scale: 0.9 }}
      transition={{ type: "spring", stiffness: 200, damping: 20 }}
      className="casino-box casino-box-gold p-3 rounded-lg min-w-[140px] shadow-2xl pointer-events-auto volume-popup"
      style={{
        position: 'fixed',
        top: popupPosition.top,
        left: popupPosition.left,
        transform: 'translate(-50%, -100%)', // Center horizontally and position above
        zIndex: 999999, // Extremely high z-index to ensure it's above everything
      }}
    >
      <div className="flex items-center gap-2">
        <VolumeX className="h-3 w-3 casino-text-gold" />
        <Slider
          value={[volume * 100]}
          onValueChange={([value]) => setVolume(value / 100)}
          max={100}
          step={5}
          className="flex-1"
        />
        <Volume2 className="h-3 w-3 casino-text-gold" />
      </div>
      <div className="text-center mt-2">
        <span className="text-xs casino-text-gold font-bold">
          {Math.round(volume * 100)}%
        </span>
      </div>
      
      {/* Popup arrow pointing down */}
      <div 
        className="absolute top-full left-1/2 transform -translate-x-1/2"
        style={{
          width: 0,
          height: 0,
          borderLeft: '8px solid transparent',
          borderRight: '8px solid transparent',
          borderTop: '8px solid #FFD700',
        }}
      />
    </motion.div>
  );

  return (
    <div>
      {/* Portal the popup to document body */}
      {typeof window !== 'undefined' && createPortal(
        <AnimatePresence>
          {volumePopup}
        </AnimatePresence>,
        document.body
      )}

      {/* Unified Mute/Volume Button */}
      <motion.div 
        whileHover={{ scale: 1.1 }} 
        whileTap={{ scale: 0.9 }}
        animate={{
          boxShadow: isMuted 
            ? '0 0 20px rgba(255, 20, 147, 0.8)' 
            : '0 0 20px rgba(255, 215, 0, 0.8)'
        }}
      >
        <Button
          ref={buttonRef}
          onClick={(e) => {
            e.preventDefault();
            // Right click or long press opens volume slider
            if (e.type === 'contextmenu' || e.detail === 0) {
              setShowVolumeSlider(!showVolumeSlider);
            } else {
              // Regular click toggles mute
              toggleMute();
            }
          }}
          onContextMenu={(e) => {
            e.preventDefault();
            setShowVolumeSlider(!showVolumeSlider);
          }}
          onMouseEnter={() => {
            // Show volume slider on hover after a small delay
            setTimeout(() => setShowVolumeSlider(true), 300);
          }}
          className={`p-3 rounded-full border-2 transition-all duration-300 ${
            isMuted 
              ? 'border-[#FF1493] casino-box-pink' 
              : 'border-[#FFD700] casino-box-gold'
          }`}
          style={{
            background: isMuted 
              ? 'linear-gradient(145deg, #FF1493, #DC143C)' 
              : 'linear-gradient(145deg, #FFD700, #DAA520)',
            boxShadow: isMuted 
              ? `
                  0 0 25px rgba(255, 20, 147, 0.8),
                  inset 0 2px 0 rgba(255, 255, 255, 0.3),
                  inset 0 -2px 0 rgba(0, 0, 0, 0.3)
                `
              : `
                  0 0 25px rgba(255, 215, 0, 0.8),
                  inset 0 2px 0 rgba(255, 255, 255, 0.3),
                  inset 0 -2px 0 rgba(0, 0, 0, 0.3)
                `
          }}
          title={`${isMuted ? 'Unmute' : 'Mute'} audio (hover for volume)`}
        >
          <motion.div
            animate={{
              rotate: isMuted ? [0, -10, 10, 0] : 0,
              scale: isMuted ? [1, 1.1, 1] : 1
            }}
            transition={{
              duration: 0.5,
              repeat: isMuted ? Infinity : 0,
              repeatDelay: 1
            }}
          >
            {isMuted ? (
              <VolumeX className="h-4 w-4 text-white" />
            ) : (
              <Volume2 className="h-4 w-4 text-black" />
            )}
          </motion.div>
        </Button>
      </motion.div>
    </div>
  );
}
</file>

<file path="components/WalletConnect.tsx">
import { usePrivy } from '@privy-io/react-auth';
import { Button } from '@/components/ui/button';
import { Wallet, LogOut } from 'lucide-react';

export function WalletConnect() {
  const { login, authenticated, logout, user } = usePrivy();

  const handleClick = () => {
    if (authenticated) {
      logout();
    } else {
      login();
    }
  };

  const formatAddress = (address: string) => {
    return `${address.slice(0, 4)}...${address.slice(-4)}`;
  };

  return (
    <Button
      onClick={handleClick}
      className="relative group overflow-hidden px-8 py-4 rounded-xl font-black uppercase tracking-wider text-black text-lg shadow-2xl border-3 border-[#FFD700] hover:scale-105 transition-all duration-300 ease-out"
      style={{
        background: 'linear-gradient(145deg, #FFD700, #FFA500)',
        fontFamily: 'Visby Round CF, SF Pro Display, sans-serif',
        fontWeight: 900,
        letterSpacing: '1.2px',
        boxShadow: '0 8px 32px rgba(255, 215, 0, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.2)',
        borderWidth: '3px',
        borderColor: '#FFD700',
        minHeight: '60px',
        minWidth: '280px'
      }}
    >
      {/* Animated background gradient on hover */}
      <div 
        className="absolute inset-0 bg-gradient-to-r from-[#FFD700] via-[#FFFF00] to-[#FFD700] opacity-0 group-hover:opacity-100 transition-opacity duration-300"
        style={{
          background: 'linear-gradient(45deg, #FFD700, #FFFF00, #FFD700, #FFFF00)',
          backgroundSize: '400% 400%',
          animation: 'gradient 3s ease infinite'
        }}
      />
      
      {/* Content */}
      <div className="relative z-10 flex items-center justify-center gap-3">
        {authenticated ? (
          <>
            <LogOut className="h-6 w-6" />
            <div className="flex flex-col items-center leading-tight">
              <span className="text-sm">Connected</span>
              <span className="text-xs font-bold opacity-80">
                {user?.wallet?.address ? formatAddress(user.wallet.address) : 'Wallet'}
              </span>
            </div>
          </>
        ) : (
          <>
            <Wallet className="h-6 w-6" />
            <span>Connect Wallet to Play</span>
          </>
        )}
      </div>

      {/* Shine effect */}
      <div className="absolute top-0 left-[-100%] w-full h-full bg-gradient-to-r from-transparent via-white/20 to-transparent group-hover:left-[100%] transition-all duration-700 ease-out" />
      
      <style jsx>{`
        @keyframes gradient {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
      `}</style>
    </Button>
  );
}
</file>

<file path="constants/denominations.ts">
export const CHIP_DENOMINATIONS = [
  // High rollers
  { value: 1000000, color: 'bg-amber-700',  textColor: 'black', name: '$1M'   },
  { value: 500000,  color: 'bg-violet-700', textColor: 'white', name: '$500K' },
  { value: 100000,  color: 'bg-rose-600',   textColor: 'white', name: '$100K' },
  { value: 50000,   color: 'bg-emerald-700',textColor: 'white', name: '$50K'  },
  { value: 25000,   color: 'bg-emerald-500',textColor: 'white', name: '$25K'  },
  { value: 20000,   color: 'bg-teal-600',   textColor: 'white', name: '$20K'  },

  // Thousands
  { value: 10000,   color: 'bg-orange-600', textColor: 'white', name: '$10K'  },
  { value: 5000,    color: 'bg-amber-400',  textColor: 'black', name: '$5K'   },
  { value: 2500,    color: 'bg-lime-500',   textColor: 'black', name: '$2.5K' },
  { value: 1000,    color: 'bg-gray-900',   textColor: 'white', name: '$1K'   },

  // Hundreds
  { value: 500,     color: 'bg-purple-600', textColor: 'white', name: '$500'  },
  { value: 250,     color: 'bg-indigo-500', textColor: 'white', name: '$250'  },
  { value: 100,     color: 'bg-red-600',    textColor: 'white', name: '$100'  },

  // Pocket change
  { value: 50,      color: 'bg-orange-400', textColor: 'black', name: '$50'   },
  { value: 25,      color: 'bg-green-600',  textColor: 'white', name: '$25'   },
  { value: 10,      color: 'bg-blue-500',   textColor: 'white', name: '$10'   },
  { value: 5,       color: 'bg-yellow-400', textColor: 'black', name: '$5'    },
  { value: 1,       color: 'bg-cyan-400',   textColor: 'black', name: '$1'    }
];

export const getChipStyle = (value: number) => {
  // Handle penny chips (any value less than $1)
  if (value < 1) {
    return { value, color: 'bg-gray-300', textColor: 'black', name: `${Math.round(value * 100)}¢` };
  }
  
  const found = CHIP_DENOMINATIONS.find(d => d.value === value);
  if (!found) {
    console.warn(`No chip style found for value: ${value}`);
    return CHIP_DENOMINATIONS[17]; // 🔥 FIXED: $1 chip is now at index 17
  }
  return found;
};
</file>

<file path="hooks/use-audio.ts">
"use client";

// Re-export the Zustand audio store as a hook for compatibility
export { useAudioStore as useAudio } from '@/stores/audioStore';
</file>

<file path="hooks/use-toast.ts">
'use client';

// Inspired by react-hot-toast library
import * as React from 'react';

import type { ToastActionElement, ToastProps } from '@/components/ui/toast';

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType['ADD_TOAST'];
      toast: ToasterToast;
    }
  | {
      type: ActionType['UPDATE_TOAST'];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType['DISMISS_TOAST'];
      toastId?: ToasterToast['id'];
    }
  | {
      type: ActionType['REMOVE_TOAST'];
      toastId?: ToasterToast['id'];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case 'DISMISS_TOAST': {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, 'id'>;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  };
}

export { useToast, toast };
</file>

<file path="hooks/useSolPriceUSD.ts">
import useSWR from 'swr';

const fetcher = (url: string) => fetch(url).then(res => res.json());

export function useSolPriceUSD() {
    const { data, error } = useSWR(
        'https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd',
        fetcher,
        { refreshInterval: 60000 } // Changed to 60 seconds to sync with token prices
    );

    return {
        price: data?.solana?.usd,
        isLoading: !error && !data,
        isError: error
    };
}
</file>

<file path="hooks/useTokenBalances.ts">
"use client";

import { useState, useEffect, useMemo } from "react";

const RPC_ENDPOINT = process.env.NEXT_PUBLIC_HELIUS_RPC ?? "";

interface TokenRow {
  mint: string;
  amount: number;
  decimals: number;
  symbol: string;
  name: string;
  image: string;
  selected?: boolean;
  selectedAmount?: number;
}

interface JupiterBalance {
  amount: string;
  uiAmount: number;
  slot: number;
  isFrozen: boolean;
}

interface JupiterBalanceResponse {
  [mintAddress: string]: JupiterBalance;
}

interface TokenMetadata {
  symbol: string;
  name: string;
  image: string;
}

interface HeliusAsset {
  id: string;
  token_info?: { symbol?: string; decimals?: number };
  content?: {
    metadata?: { name?: string; symbol?: string };
    links?: { image?: string };
    files?: Array<{ cdn_uri?: string; uri?: string }>;
  };
}

// DexScreener types
interface DexScreenerTokenInfo {
  address: string;
  name: string;
  symbol: string;
}

interface DexScreenerTokenPairInfo {
  imageUrl?: string;
  websites?: Array<{ url: string }>;
  socials?: Array<{ platform: string; handle: string }>;
}

interface DexScreenerTokenPair {
  chainId: string;
  dexId: string;
  url: string;
  pairAddress: string;
  baseToken: DexScreenerTokenInfo;
  quoteToken: DexScreenerTokenInfo;
  info?: DexScreenerTokenPairInfo;
}

function getTokenDecimals(mint: string): number {
  const map: Record<string, number> = {
    So11111111111111111111111111111111111111112: 9,
    EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: 6,
    Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB: 6,
  };
  return map[mint] ?? 6;
}

// 🔥 MEMOIZED: Cache to prevent excessive API calls
const dexScreenerCache = new Map<string, DexScreenerTokenPair[]>();
const cacheExpiry = new Map<string, number>();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

// Fetch DexScreener data for tokens with caching
async function fetchDexScreenerData(mints: string[]): Promise<Record<string, DexScreenerTokenPair[]>> {
  if (!mints.length) return {};
  
  // Check cache first
  const cacheKey = mints.sort().join(',');
  const now = Date.now();
  const cachedExpiry = cacheExpiry.get(cacheKey);
  
  if (cachedExpiry && now < cachedExpiry && dexScreenerCache.has(cacheKey)) {
    console.log('📦 Using cached DexScreener data for', mints.length, 'tokens');
    const cachedData = dexScreenerCache.get(cacheKey);
    if (cachedData) {
      // Convert array back to grouped format
      const groupedData: Record<string, DexScreenerTokenPair[]> = {};
      cachedData.forEach(pair => {
        const mint = pair.baseToken.address;
        if (!groupedData[mint]) {
          groupedData[mint] = [];
        }
        groupedData[mint].push(pair);
      });
      return groupedData;
    }
  }
  
  try {
    const addressesString = mints.join(',');
    console.log('🔍 Fetching fresh DexScreener data for', mints.length, 'tokens...');
    
    const response = await fetch(`https://api.dexscreener.com/tokens/v1/solana/${addressesString}`, {
      headers: { 'Accept': 'application/json' },
    });
    
    if (!response.ok) {
      console.warn('DexScreener API request failed:', response.status, response.statusText);
      return {};
    }
    
    const data: DexScreenerTokenPair[] = await response.json();
    
    // Cache the results
    dexScreenerCache.set(cacheKey, data);
    cacheExpiry.set(cacheKey, now + CACHE_DURATION);
    
    // Group pairs by base token address
    const groupedData: Record<string, DexScreenerTokenPair[]> = {};
    data.forEach(pair => {
      const mint = pair.baseToken.address;
      if (!groupedData[mint]) {
        groupedData[mint] = [];
      }
      groupedData[mint].push(pair);
    });
    
    console.log('✅ DexScreener data cached for', Object.keys(groupedData).length, 'tokens');
    return groupedData;
  } catch (error) {
    console.warn('Failed to fetch DexScreener data:', error);
    return {};
  }
}

// Extract best metadata from DexScreener data
function extractDexScreenerMetadata(pairs: DexScreenerTokenPair[]): Partial<TokenMetadata> {
  if (!pairs.length) return {};
  
  // Use the first pair with the most complete info
  const bestPair = pairs.find(p => p.info?.imageUrl && p.baseToken.symbol && p.baseToken.name) || pairs[0];
  
  return {
    symbol: bestPair.baseToken.symbol,
    name: bestPair.baseToken.name,
    image: bestPair.info?.imageUrl,
  };
}

// Extract metadata from Helius asset (fallback)
function extractHeliusMetadata(asset: HeliusAsset): TokenMetadata {
  const symbol = 
    asset.token_info?.symbol ||
    asset.content?.metadata?.symbol ||
    asset.id.slice(0, 4);

  const name = 
    asset.content?.metadata?.name ||
    symbol;

  const image = 
    asset.content?.links?.image ||
    asset.content?.files?.[0]?.cdn_uri ||
    asset.content?.files?.[0]?.uri ||
    "/solana-logo.png";

  return { symbol, name, image };
}

// 🔥 MEMOIZED: RPC metadata cache
const rpcMetadataCache = new Map<string, TokenMetadata>();
const rpcCacheExpiry = new Map<string, number>();

export function useTokenBalances(publicKey: string | undefined) {
  const [tokens, setTokens] = useState<TokenRow[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // 🔥 MEMOIZE: Stable publicKey to prevent unnecessary re-runs
  const stablePublicKey = useMemo(() => publicKey, [publicKey]);

  useEffect(() => {
    if (!stablePublicKey) {
      setTokens([]);
      setLoading(false);
      return;
    }

    // 🔥 DEBOUNCE: Prevent rapid consecutive calls
    let isCancelled = false;
    const timeoutId = setTimeout(async () => {
      if (isCancelled) return;
      
      try {
        setLoading(true);
        setError(null);

        // 1️⃣ Fetch balances from Jupiter API
        const balanceRes = await fetch(
          `https://lite-api.jup.ag/ultra/v1/balances/${stablePublicKey}`
        );
        if (!balanceRes.ok) throw new Error("Failed to fetch balances");
        const balances: JupiterBalanceResponse = await balanceRes.json();
        
        if (isCancelled) return;
        
        const nonZero = Object.entries(balances).filter(
          ([, b]) => b.uiAmount > 0
        );
        if (!nonZero.length) {
          setTokens([]);
          return;
        }

        // 2️⃣ Get non-SOL mints for metadata fetching
        const mints = nonZero
          .filter(([m]) => m !== "SOL")
          .map(([m]) => m);

        // 3️⃣ First try DexScreener for metadata (with caching)
        const dexScreenerData = await fetchDexScreenerData(mints);
        
        if (isCancelled) return;
        
        // 4️⃣ Build initial metadata map from DexScreener
        const metadataMap: Record<string, TokenMetadata> = {};
        const mintsNeedingRpcData: string[] = [];
        
        mints.forEach(mint => {
          const dexPairs = dexScreenerData[mint];
          if (dexPairs && dexPairs.length > 0) {
            const dexMetadata = extractDexScreenerMetadata(dexPairs);
            // Only use DexScreener data if we have at least symbol and image
            if (dexMetadata.symbol && dexMetadata.image) {
              metadataMap[mint] = {
                symbol: dexMetadata.symbol,
                name: dexMetadata.name || dexMetadata.symbol,
                image: dexMetadata.image,
              };
            } else {
              // Partial data, still need RPC fallback
              mintsNeedingRpcData.push(mint);
              if (dexMetadata.symbol || dexMetadata.name) {
                // Store partial data and we'll fill in missing pieces from RPC
                metadataMap[mint] = {
                  symbol: dexMetadata.symbol || mint.slice(0, 4),
                  name: dexMetadata.name || dexMetadata.symbol || mint.slice(0, 4),
                  image: "/solana-logo.png", // Will be overridden by RPC if available
                };
              }
            }
          } else {
            // No DexScreener data, need RPC
            mintsNeedingRpcData.push(mint);
          }
        });

        // 5️⃣ Fetch missing metadata from Helius RPC (fallback) with caching
        if (RPC_ENDPOINT && mintsNeedingRpcData.length > 0) {
          console.log('🔄 Fetching RPC data for', mintsNeedingRpcData.length, 'tokens missing from DexScreener...');
          
          // Check RPC cache first
          const now = Date.now();
          const uncachedMints: string[] = [];
          
          mintsNeedingRpcData.forEach(mint => {
            const cacheExpiry = rpcCacheExpiry.get(mint);
            if (cacheExpiry && now < cacheExpiry && rpcMetadataCache.has(mint)) {
              // Use cached data
              const cachedMetadata = rpcMetadataCache.get(mint)!;
              const existingMetadata = metadataMap[mint];
              
              if (existingMetadata) {
                // Merge with existing DexScreener data
                metadataMap[mint] = {
                  symbol: existingMetadata.symbol || cachedMetadata.symbol,
                  name: existingMetadata.name || cachedMetadata.name,
                  image: existingMetadata.image !== "/solana-logo.png" 
                    ? existingMetadata.image 
                    : cachedMetadata.image,
                };
              } else {
                metadataMap[mint] = cachedMetadata;
              }
            } else {
              uncachedMints.push(mint);
            }
          });
          
          // Only fetch uncached mints
          if (uncachedMints.length > 0) {
            const chunks = Array.from(
              { length: Math.ceil(uncachedMints.length / 100) },
              (_, i) => uncachedMints.slice(i * 100, i * 100 + 100)
            );

            await Promise.all(
              chunks.map(async (ids) => {
                if (isCancelled) return;
                
                try {
                  const body = {
                    jsonrpc: "2.0",
                    id: "asset-batch",
                    method: "getAssetBatch",
                    params: { ids },
                  };
                  const res = await fetch(RPC_ENDPOINT, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(body),
                  });
                  const { result } = await res.json();
                  result?.forEach((asset: HeliusAsset) => {
                    if (asset && !isCancelled) {
                      const heliusMetadata = extractHeliusMetadata(asset);
                      
                      // Cache the metadata
                      rpcMetadataCache.set(asset.id, heliusMetadata);
                      rpcCacheExpiry.set(asset.id, now + CACHE_DURATION);
                      
                      const existingMetadata = metadataMap[asset.id];
                      
                      if (existingMetadata) {
                        // Merge with existing DexScreener data, prioritizing DexScreener image
                        metadataMap[asset.id] = {
                          symbol: existingMetadata.symbol || heliusMetadata.symbol,
                          name: existingMetadata.name || heliusMetadata.name,
                          image: existingMetadata.image !== "/solana-logo.png" 
                            ? existingMetadata.image 
                            : heliusMetadata.image,
                        };
                      } else {
                        // Use RPC data as complete fallback
                        metadataMap[asset.id] = heliusMetadata;
                      }
                    }
                  });
                } catch (chunkError) {
                  console.warn('Failed to fetch RPC metadata chunk:', chunkError);
                }
              })
            );
          }
        }

        if (isCancelled) return;

        // 6️⃣ Build final token array
        const rows: TokenRow[] = nonZero.map(([mint, bal]) => {
          if (mint === "SOL") {
            return {
              mint: "So11111111111111111111111111111111111111112",
              amount: bal.uiAmount, // 🔥 REVERTED: Use real SOL balance instead of hardcoded 6373
              decimals: 9,
              symbol: "SOL",
              name: "Solana",
              image: "https://solana.com/src/img/branding/solanaLogoMark.png",
            };
          }

          const metadata = metadataMap[mint] || {
            symbol: mint.slice(0, 4),
            name: mint.slice(0, 8),
            image: "/solana-logo.png",
          };

          return {
            mint,
            amount: bal.uiAmount,
            decimals: getTokenDecimals(mint),
            ...metadata,
          };
        });

        // Sort by amount (highest first)
        rows.sort((a, b) => b.amount - a.amount);
        
        // Only log summary in development
        if (process.env.NODE_ENV === 'development') {
          console.log('🎯 Token balance fetch complete:', {
            totalTokens: rows.length,
            dexScreenerImages: rows.filter(r => r.image && r.image !== '/solana-logo.png' && !r.image.includes('helius')).length,
            rpcFallbackImages: rows.filter(r => r.image && r.image.includes('helius')).length
          });
        }
        
        setTokens(rows);

      } catch (err) {
        if (!isCancelled) {
          console.error("Token fetch error:", err);
          setError(err instanceof Error ? err.message : "Failed to fetch tokens");
          setTokens([]);
        }
      } finally {
        if (!isCancelled) {
          setLoading(false);
        }
      }
    }, 100); // 100ms debounce

    return () => {
      isCancelled = true;
      clearTimeout(timeoutId);
    };
  }, [stablePublicKey]);

  return { tokens, loading, error };
}
</file>

<file path="hooks/useTokenData.ts">
import useSWR from 'swr';

// TypeScript interfaces for the API response
interface TokenInfo {
  address: string;
  name: string;
  symbol: string;
}

interface Website {
  url: string;
}

interface Social {
  platform: string;
  handle: string;
}

interface TokenPairInfo {
  imageUrl?: string;
  websites?: Website[];
  socials?: Social[];
}

interface Liquidity {
  usd?: number;
  base?: number;
  quote?: number;
}

interface TransactionData {
  buys: number;
  sells: number;
}

interface Boosts {
  active?: number;
}

interface TokenPair {
  chainId: string;
  dexId: string;
  url: string;
  pairAddress: string;
  labels?: string[];
  baseToken: TokenInfo;
  quoteToken: TokenInfo;
  priceNative: string;
  priceUsd: string;
  txns?: Record<string, TransactionData>;
  volume?: Record<string, number>;
  priceChange?: Record<string, number>;
  liquidity?: Liquidity;
  fdv?: number;
  marketCap?: number;
  pairCreatedAt?: number;
  info?: TokenPairInfo;
  boosts?: Boosts;
}

interface UseTokenDataParams {
  chainId: string;
  tokenAddresses: string | string[];
  enabled?: boolean;
}

interface UseTokenDataResponse {
  data: TokenPair[] | undefined;
  error: any;
  isLoading: boolean;
  isValidating: boolean;
  mutate: () => void;
}

// Fetcher function for the DexScreener API
const fetcher = async (url: string): Promise<TokenPair[]> => {
  const response = await fetch(url, {
    headers: {
      'Accept': 'application/json',
    },
  });

  if (!response.ok) {
    throw new Error(`API request failed: ${response.status} ${response.statusText}`);
  }

  const data = await response.json();
  return data;
};

// Main SWR hook for fetching token data
export const useTokenData = ({
  chainId = "solana",
  tokenAddresses,
  enabled = true,
}: UseTokenDataParams): UseTokenDataResponse => {
  // Convert tokenAddresses to comma-separated string if it's an array
  const addressesString = Array.isArray(tokenAddresses) 
    ? tokenAddresses.join(',') 
    : tokenAddresses;

  // Validate inputs
  const shouldFetch = enabled && chainId && addressesString;

  // Build the API URL
  const url = shouldFetch 
    ? `https://api.dexscreener.com/tokens/v1/${chainId}/${addressesString}`
    : null;

  // Use SWR with the fetcher
  const { data, error, isLoading, isValidating, mutate } = useSWR<TokenPair[]>(
    url,
    fetcher,
    {
      revalidateOnFocus: false,
      revalidateOnReconnect: true,
      dedupingInterval: 60000, // 1 minute deduping to respect rate limits
      errorRetryCount: 3,
      errorRetryInterval: 5000, // 5 seconds between retries
    }
  );

  return {
    data,
    error,
    isLoading,
    isValidating,
    mutate,
  };
};

// Helper hook for single token
export const useSingleTokenData = (
  chainId: string,
  tokenAddress: string,
  enabled?: boolean
) => {
  return useTokenData({
    chainId,
    tokenAddresses: tokenAddress,
    enabled,
  });
};

// Helper hook for multiple tokens
export const useMultipleTokenData = (
  chainId: string,
  tokenAddresses: string[],
  enabled?: boolean
) => {
  return useTokenData({
    chainId,
    tokenAddresses,
    enabled,
  });
};

export default useTokenData;
</file>

<file path="hooks/useTokenPriceSol.ts">
import useSWR from 'swr';

interface JupiterPriceResponse {
  data: {
    [mintAddress: string]: {
      id: string;
      mintSymbol: string;
      vsToken: string;
      vsTokenSymbol: string;
      price: string; // v2 API returns prices as strings
    };
  };
}

// Single fetcher to be shared by both hooks
const fetcher = async (url: string): Promise<JupiterPriceResponse> => {
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error('Failed to fetch token price');
  }
  return response.json();
};

// Hook for a single token price
export function useTokenPriceSol(mintAddress: string | undefined) {
  const solMint = 'So11111111111111111111111111111111111111112';
  
  const { data, error, isLoading, mutate } = useSWR(
    mintAddress && mintAddress !== solMint 
      ? `https://lite-api.jup.ag/price/v2?ids=${mintAddress}&vsToken=${solMint}`
      : null,
    fetcher,
    {
      refreshInterval: 60000, // 1 minute
      dedupingInterval: 10000,
      errorRetryCount: 3,
      errorRetryInterval: 5000,
    }
  );

  // For SOL itself, price is always 1 SOL
  if (mintAddress === solMint) {
    return {
      price: 1,
      isLoading: false,
      isError: false,
      mutate: () => {},
    };
  }

  const tokenPriceString = mintAddress && data?.data?.[mintAddress]?.price;
  const tokenPrice = tokenPriceString ? parseFloat(tokenPriceString) : null;

  return {
    price: tokenPrice,
    isLoading,
    isError: !!error,
    mutate,
  };
}

// Hook for fetching multiple token prices at once
export function useTokenPricesSol(mintAddresses: string[]) {
  const solMint = 'So11111111111111111111111111111111111111112';
  
  // Filter out SOL mint and empty addresses
  const nonSolMints = mintAddresses.filter(mint => mint && mint !== solMint);
  
  const { data, error, isLoading, mutate } = useSWR(
    nonSolMints.length > 0 
      ? `https://lite-api.jup.ag/price/v2?ids=${nonSolMints.join(',')}&vsToken=${solMint}`
      : null,
    fetcher,
    {
      refreshInterval: 60000,
      dedupingInterval: 10000,
      errorRetryCount: 3,
      errorRetryInterval: 5000,
    }
  );

  // Create prices object with all mints
  const prices: Record<string, number | null> = {};
  
  mintAddresses.forEach(mint => {
    if (mint === solMint) {
      prices[mint] = 1; // SOL price is always 1 SOL
    } else if (data?.data?.[mint]?.price) {
      // Convert string price to number
      prices[mint] = parseFloat(data.data[mint].price);
    } else {
      prices[mint] = null;
    }
  });

  return {
    prices,
    isLoading,
    isError: !!error,
    mutate,
  };
}
</file>

<file path="hooks/useViewportHeight.ts">
import { useState, useEffect } from 'react';

export function useViewportHeight() {
  const [viewportHeight, setViewportHeight] = useState(0);

  useEffect(() => {
    // Function to update viewport height
    const updateViewportHeight = () => {
      setViewportHeight(window.innerHeight);
    };

    // Set initial value
    updateViewportHeight();

    // Add event listener for resize
    window.addEventListener('resize', updateViewportHeight);

    // Cleanup
    return () => window.removeEventListener('resize', updateViewportHeight);
  }, []);

  return viewportHeight;
}
</file>

<file path="lib/confetti.ts">
// Confetti celebration effects
import confetti from 'canvas-confetti';

export const triggerJackpotConfetti = () => {
  const duration = 5000;
  const animationEnd = Date.now() + duration;
  const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

  function randomInRange(min: number, max: number) {
    return Math.random() * (max - min) + min;
  }

  // Multiple confetti bursts
  const interval: NodeJS.Timeout = setInterval(function() {
    const timeLeft = animationEnd - Date.now();

    if (timeLeft <= 0) {
      return clearInterval(interval);
    }

    const particleCount = 50 * (timeLeft / duration);

    // Gold confetti from left
    confetti({
      ...defaults,
      particleCount,
      origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },
      colors: ['#FFD700', '#FFFF00', '#FFA500', '#FF8C00']
    });

    // Pink confetti from right
    confetti({
      ...defaults,
      particleCount,
      origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },
      colors: ['#FF1493', '#FF69B4', '#DC143C', '#FF6347']
    });

    // Center burst
    confetti({
      ...defaults,
      particleCount: particleCount * 2,
      origin: { x: 0.5, y: 0.3 },
      colors: ['#FFD700', '#FF1493', '#00FFFF', '#FFFF00', '#FF69B4']
    });
  }, 250);

  // Initial big burst
  confetti({
    particleCount: 100,
    spread: 70,
    origin: { y: 0.6 },
    colors: ['#FFD700', '#FF1493', '#00FFFF', '#FFFF00', '#FF69B4']
  });

  // Side cannons
  setTimeout(() => {
    confetti({
      particleCount: 50,
      angle: 60,
      spread: 55,
      origin: { x: 0 },
      colors: ['#FFD700', '#FFFF00', '#FFA500']
    });
    confetti({
      particleCount: 50,
      angle: 120,
      spread: 55,
      origin: { x: 1 },
      colors: ['#FF1493', '#FF69B4', '#DC143C']
    });
  }, 500);

  // Final celebration burst
  setTimeout(() => {
    confetti({
      particleCount: 200,
      spread: 100,
      origin: { y: 0.4 },
      colors: ['#FFD700', '#FF1493', '#00FFFF', '#FFFF00', '#FF69B4', '#32CD32']
    });
  }, 2000);
};
</file>

<file path="lib/constants.ts">
export const jackpotAddr = '4nxd9dc9DVTQt2rWwdsBmE9RNYgdViTMM6qN8Ei1pnGS';
</file>

<file path="lib/emoji-map.ts">
// Map of emoji shortcodes to GIF URLs
export const emojiMap: Record<string, string> = {
  // Japanese
  "jap": "http://www.mysmiley.net/imgs/smile/japanese/jap.gif",
  
  // Party
  "party": "http://www.mysmiley.net/imgs/smile/party/party0011.gif",
  "party2": "http://www.mysmiley.net/imgs/smile/party/party0014.gif",
  
  // Cool
  "cool": "http://www.mysmiley.net/imgs/smile/cool/cool0012.gif",
  "cool2": "http://www.mysmiley.net/imgs/smile/cool/cool0044.gif",
  
  // Fighting
  "fight": "http://www.mysmiley.net/imgs/smile/fighting/fighting0004.gif",
  
  // Evil grin
  "evil": "http://www.mysmiley.net/imgs/smile/evilgrin/evilgrin0002.gif",
  
  // Happy
  "happy": "http://www.mysmiley.net/imgs/smile/happy/happy0071.gif",
  "happy2": "http://www.mysmiley.net/imgs/smile/happy/happy0126.gif",
  
  // Love
  "love": "http://www.mysmiley.net/imgs/smile/love/love0042.gif",
};

// Reverse lookup map for getting shortcodes from URLs
const reverseEmojiMap: Record<string, string> = {};
Object.entries(emojiMap).forEach(([code, url]) => {
  reverseEmojiMap[url] = code;
});

// Helper function to find emoji code by URL
export function getEmojiCodeByUrl(url: string): string | null {
  const code = reverseEmojiMap[url];
  return code ? `:${code}:` : null;
}

export interface MessageSegment {
  type: 'text' | 'emoji';
  content: string;
}

// Helper function to parse message into segments of text and emojis
export function parseMessageWithEmojis(text: string): MessageSegment[] {
  const segments: MessageSegment[] = [];
  const shortcodeRegex = /:([a-z0-9]+):/g;
  
  let lastIndex = 0;
  let match;
  
  while ((match = shortcodeRegex.exec(text)) !== null) {
    // Add text before the emoji
    const beforeText = text.substring(lastIndex, match.index);
    if (beforeText) {
      segments.push({ type: 'text', content: beforeText });
    }
    
    // Add the emoji if it exists in our map
    const emojiCode = match[1];
    const emojiUrl = emojiMap[emojiCode];
    if (emojiUrl) {
      segments.push({ type: 'emoji', content: emojiUrl });
    } else {
      // If emoji code doesn't exist, treat it as text
      segments.push({ type: 'text', content: match[0] });
    }
    
    lastIndex = match.index + match[0].length;
  }
  
  // Add any remaining text
  const remainingText = text.substring(lastIndex);
  if (remainingText) {
    segments.push({ type: 'text', content: remainingText });
  }
  
  return segments;
}

// For backward compatibility
export function replaceShortcodes(text: string): { text: string, gifs: string[] } {
  const shortcodeRegex = /:([a-z0-9]+):/g;
  const foundGifs: string[] = [];
  
  // Replace shortcodes with empty strings and collect the GIFs
  const cleanText = text.replace(shortcodeRegex, (match, code) => {
    const gifUrl = emojiMap[code];
    if (gifUrl) {
      foundGifs.push(gifUrl);
      return "";
    }
    return match; // Keep the text if no match found
  });
  
  return {
    text: cleanText.trim(),
    gifs: foundGifs
  };
}
</file>

<file path="lib/inputHandlers.ts">
// Shared input handling utilities

import { TokenRow, parseInputValue, clampValue, tokenCountToPercentage } from './tokenUtils';
import { calculateTokenAmountFromUSD } from './priceCalculations';

// 🔥 UNIFIED: Handle token amount input changes
export function handleTokenAmountInput(
  tokenIndex: number,
  inputValue: string,
  token: TokenRow,
  onPercentageChange: (index: number, percentage: number) => void
): void {
  const numValue = parseInputValue(inputValue);
  const clampedValue = clampValue(numValue, 0, token.amount);
  const percentage = tokenCountToPercentage(clampedValue, token.amount);
  onPercentageChange(tokenIndex, percentage);
}

// 🔥 UNIFIED: Handle USD amount input changes
export function handleUSDAmountInput(
  tokenIndex: number,
  inputValue: string,
  token: TokenRow,
  tokenPricesInSol: Record<string, number | null>,
  solPrice: number | null,
  onPercentageChange: (index: number, percentage: number) => void
): void {
  if (!tokenPricesInSol || !solPrice) return;

  const usdValue = parseInputValue(inputValue);
  const tokenCount = calculateTokenAmountFromUSD(token, usdValue, tokenPricesInSol[token.mint], solPrice);
  
  if (tokenCount !== null) {
    const clampedTokenCount = clampValue(tokenCount, 0, token.amount);
    const percentage = tokenCountToPercentage(clampedTokenCount, token.amount);
    onPercentageChange(tokenIndex, percentage);
  }
}

// 🔥 UNIFIED: Handle percentage button clicks
export function handlePercentageButtonClick(
  tokenIndex: number,
  percentage: number,
  onPercentageChange: (index: number, percentage: number) => void
): void {
  onPercentageChange(tokenIndex, percentage);
}

// 🔥 UNIFIED: Handle slider changes with snapping
export function handleSliderChange(
  tokenIndex: number,
  percentage: number,
  onPercentageChange: (index: number, percentage: number) => void,
  enableSnapping: boolean = true
): void {
  let finalPercentage = percentage;
  
  if (enableSnapping) {
    // Define snap thresholds (within 2% of target) - only for 0 and 100
    const snapThreshold = 2;
    const snapPoints = [0, 100];
    
    // Find the closest snap point
    for (const snapPoint of snapPoints) {
      if (Math.abs(percentage - snapPoint) <= snapThreshold) {
        finalPercentage = snapPoint;
        break;
      }
    }
  }
  
  onPercentageChange(tokenIndex, finalPercentage);
}

// 🔥 UNIFIED: Focus/blur handling for inputs
export interface FocusHandlers {
  handleInputFocus: (inputKey: string) => void;
  handleInputBlur: (inputKey: string) => void;
  isInputFocused: (inputKey: string) => boolean;
}

export function createFocusHandlers(
  setInputFocus: (inputKey: string, focused: boolean) => void,
  focusedInputs: Record<string, boolean>
): FocusHandlers {
  return {
    handleInputFocus: (inputKey: string) => {
      setInputFocus(inputKey, true);
    },
    
    handleInputBlur: (inputKey: string) => {
      setInputFocus(inputKey, false);
    },
    
    isInputFocused: (inputKey: string) => {
      return !!focusedInputs[inputKey];
    }
  };
}

// 🔥 UNIFIED: Get raw values for inputs (always numeric)
export function getRawTokenCount(
  tokenIndex: number,
  sliderPercentages: number[],
  filteredTokens: TokenRow[]
): number {
  const percentage = sliderPercentages[tokenIndex] ?? 0;
  const token = filteredTokens[tokenIndex];
  if (!token) return 0;
  return (token.amount * percentage) / 100;
}

export function getRawUSDValue(
  tokenIndex: number,
  getDisplayValues: (index: number) => { selectedValue: number; remainingValue: number }
): number {
  const { selectedValue } = getDisplayValues(tokenIndex);
  return selectedValue;
}
</file>

<file path="lib/mock-data.ts">
import { PastDraw, Deposit, ChatMessage, UserGifs } from './types';

export const userGifs: UserGifs = {
  'Skylar': [
    'http://www.mysmiley.net/imgs/smile/cool/cool0012.gif',
    'http://www.mysmiley.net/imgs/smile/cool/cool0044.gif'
  ],
  'Luna': [
    'http://www.mysmiley.net/imgs/smile/party/party0011.gif',
    'http://www.mysmiley.net/imgs/smile/party/party0014.gif'
  ],
  'SolanaBull': [
    'http://www.mysmiley.net/imgs/smile/fighting/fighting0004.gif',
    'http://www.mysmiley.net/imgs/smile/evilgrin/evilgrin0002.gif'
  ],
  'Eclipse': [
    'http://www.mysmiley.net/imgs/smile/happy/happy0071.gif',
    'http://www.mysmiley.net/imgs/smile/happy/happy0126.gif'
  ],
  'Nebula': [
    'http://www.mysmiley.net/imgs/smile/japanese/jap.gif',
    'http://www.mysmiley.net/imgs/smile/love/love0042.gif'
  ]
};

const mockMessages: ChatMessage[] = [
  { id: '1', user: 'Skylar', message: 'gm', timestamp: '5:22 PM', gif: userGifs['Skylar'][0] },
  { id: '2', user: 'Luna', message: 'I deposited even more...', timestamp: '5:23 PM', gif: userGifs['Luna'][0] },
  { id: '3', user: 'SolanaBull', message: 'what a pot!', timestamp: '5:24 PM', gif: userGifs['SolanaBull'][0] },
  { id: '4', user: 'Eclipse', message: 'when is it drawing?', timestamp: '5:25 PM', gif: userGifs['Eclipse'][0] },
  { id: '5', user: 'Nebula', message: 'gm', timestamp: '5:26 PM', gif: userGifs['Nebula'][0] }
];

export const pastDraws: PastDraw[] = [
  { id: '1', name: 'Nova', amount: 1532.6 },
  { id: '2', name: 'Astro', amount: 920.1 },
  { id: '3', name: 'Orion', amount: 1088.5 },
];

export const currentDeposits: Deposit[] = [
  { id: '1', user: 'SolanaBull', token: 'SOL', amount: 250.5, color: 'hsl(var(--chart-1))', timestamp: new Date(Date.now() - 1800000) },
  { id: '2', user: 'Luna', token: 'RAY', amount: 320.8, color: 'hsl(var(--chart-2))', timestamp: new Date(Date.now() - 2700000) },
  { id: '3', user: 'Nebula', token: 'BONK', amount: 178.2, color: 'hsl(var(--chart-3))', timestamp: new Date(Date.now() - 1200000) },
  { id: '4', user: 'Eclipse', token: 'USDC', amount: 217.9, color: 'hsl(var(--chart-4))', timestamp: new Date(Date.now() - 900000) },
  { id: '5', user: 'Comet', token: 'WIF', amount: 145.3, color: 'hsl(var(--chart-1))', timestamp: new Date(Date.now() - 600000) },
  { id: '6', user: 'Meteor', token: 'SWIF', amount: 198.7, color: 'hsl(var(--chart-2))', timestamp: new Date(Date.now() - 300000) },
  { id: '7', user: 'Galaxy', token: 'JUP', amount: 263.4, color: 'hsl(var(--chart-3))', timestamp: new Date(Date.now() - 120000) },
];

export const chatMessages = mockMessages;

export const totalPotAmount = () => {
  return currentDeposits.reduce((sum, deposit) => sum + deposit.amount, 0);
};
</file>

<file path="lib/priceCalculations.ts">
// Shared price calculation utilities

import { TokenRow } from './tokenUtils';

// 🔥 UNIFIED: Calculate USD value from token amount
export function calculateTokenUSDValue(
  token: TokenRow,
  tokenAmount: number,
  tokenPriceInSol: number | null,
  solPrice: number | null
): number | null {
  if (!tokenPriceInSol || !solPrice) return null;
  
  if (token.mint === 'So11111111111111111111111111111111111111112') {
    // SOL: direct USD calculation
    return tokenAmount * solPrice;
  } else {
    // Other tokens: convert through SOL
    const valueInSol = tokenAmount * tokenPriceInSol;
    return valueInSol * solPrice;
  }
}

// 🔥 UNIFIED: Calculate token amount from USD value
export function calculateTokenAmountFromUSD(
  token: TokenRow,
  usdValue: number,
  tokenPriceInSol: number | null,
  solPrice: number | null
): number | null {
  if (!tokenPriceInSol || !solPrice) return null;
  
  if (token.mint === 'So11111111111111111111111111111111111111112') {
    // SOL: direct calculation
    return usdValue / solPrice;
  } else {
    // Other tokens: convert through SOL
    const valueInSol = usdValue / solPrice;
    return valueInSol / tokenPriceInSol;
  }
}

// 🔥 UNIFIED: Calculate max USD value for a token
export function calculateMaxUSDValue(
  token: TokenRow,
  tokenPriceInSol: number | null,
  solPrice: number | null
): number {
  if (!solPrice || !tokenPriceInSol) return 0;
  
  if (token.mint === 'So11111111111111111111111111111111111111112') {
    // SOL: direct USD calculation - truncate instead of round
    return Math.floor(token.amount * solPrice * 100) / 100;
  } else {
    // Other tokens: convert through SOL - truncate instead of round
    const valueInSol = token.amount * tokenPriceInSol;
    return Math.floor(valueInSol * solPrice * 100) / 100;
  }
}

// 🔥 UNIFIED: Get display values for token selection (selected vs remaining)
export function getTokenDisplayValues(
  token: TokenRow,
  percentage: number,
  tokenPricesInSol: Record<string, number | null>,
  solPrice: number | null
): { selectedValue: number; remainingValue: number; selectedTokenCount: number; remainingTokenCount: number } {
  const selectedTokenCount = (token.amount * percentage) / 100;
  const remainingTokenCount = token.amount - selectedTokenCount;
  
  const tokenPriceInSol = tokenPricesInSol[token.mint];
  if (!tokenPriceInSol || !solPrice) {
    return { 
      selectedValue: 0, 
      remainingValue: 0,
      selectedTokenCount,
      remainingTokenCount
    };
  }

  // Convert token counts to USD values for display
  const selectedValueInSol = selectedTokenCount * tokenPriceInSol;
  const remainingValueInSol = remainingTokenCount * tokenPriceInSol;
  
  const selectedValue = selectedValueInSol * solPrice;
  const remainingValue = remainingValueInSol * solPrice;

  return {
    selectedValue: Math.round(selectedValue * 100) / 100,
    remainingValue: Math.round(remainingValue * 100) / 100,
    selectedTokenCount,
    remainingTokenCount
  };
}

// 🔥 UNIFIED: Currency value formatting for display
export function formatCurrencyValue(value: number): string {
  if (value >= 1000000) {
    return `$${(value / 1000000).toFixed(1)}M`;
  } else if (value >= 1000) {
    return `$${(value / 1000).toFixed(1)}K`;
  } else {
    return `$${value.toFixed(0)}`;
  }
}
</file>

<file path="lib/tokenSelectorConstants.ts">
// Constants and types for token selector components

export interface TokenSelectorMode {
  id: 'chip' | 'desktop';
  name: string;
  description: string;
  icon: string;
}

export const TOKEN_SELECTOR_MODES: TokenSelectorMode[] = [
  {
    id: 'chip',
    name: 'Chip View',
    description: 'Visual chip stacks with 3D representation',
    icon: '🎰'
  },
  {
    id: 'desktop',
    name: 'Pro Mode',
    description: 'Compact desktop-style token selector',
    icon: '💼'
  }
];

// Quick percentage options for token selection
export const QUICK_PERCENTAGES = [0, 25, 50, 75, 100];

// Sample wallet addresses for testing
export const SAMPLE_WALLETS = [
  {
    name: "Rich Whale 🐋",
    address: "5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1",
    description: "Jupiter Labs wallet with many tokens"
  },
  {
    name: "DeFi Trader 📈", 
    address: "DyMJhkmE7VTvn8RTPAQ8SBDjJV7Y9UX8pGYMDPuq8CUP",
    description: "Active trader with diverse portfolio"
  },
  {
    name: "NFT Collector 🎨",
    address: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM", 
    description: "Heavy NFT and token holder"
  }
];
</file>

<file path="lib/tokenSelectorHandlers.ts">
// Event handlers and state management for token selector components

import { TokenRow } from './tokenUtils';
import { calculateTokenAmountFromUSD } from './priceCalculations';

// 🔥 UNIFIED: Handle token amount input changes
export function handleTokenAmountChange(
  token: TokenRow,
  inputValue: string,
  setTempAmount: (amount: number) => void,
  setLastModified: (type: 'token' | 'usd') => void
): void {
  if (inputValue === '' || inputValue === '.') {
    setTempAmount(0);
    setLastModified('token');
    return;
  }

  if (inputValue.endsWith('.') && !isNaN(parseFloat(inputValue.slice(0, -1)))) {
    const numValue = parseFloat(inputValue.slice(0, -1));
    const clampedValue = Math.min(Math.max(0, numValue), token.amount);
    setTempAmount(clampedValue);
    setLastModified('token');
    return;
  }

  const numValue = parseFloat(inputValue);
  if (isNaN(numValue) && inputValue !== '') return;

  const finalValue = isNaN(numValue) ? 0 : numValue;
  const clampedValue = Math.min(Math.max(0, finalValue), token.amount);
  setTempAmount(clampedValue);
  setLastModified('token');
}

// 🔥 UNIFIED: Handle USD amount input changes
export function handleUSDAmountChange(
  token: TokenRow,
  inputValue: string,
  maxUSDValue: number,
  setTempUSDAmount: (amount: number) => void,
  setLastModified: (type: 'token' | 'usd') => void
): void {
  if (inputValue === '' || inputValue === '.') {
    setTempUSDAmount(0);
    setLastModified('usd');
    return;
  }

  if (inputValue.endsWith('.') && !isNaN(parseFloat(inputValue.slice(0, -1)))) {
    const usdValue = parseFloat(inputValue.slice(0, -1));
    const clampedValue = Math.min(Math.max(0, usdValue), maxUSDValue);
    setTempUSDAmount(Math.floor(clampedValue * 100) / 100);
    setLastModified('usd');
    return;
  }

  const usdValue = parseFloat(inputValue);
  if (isNaN(usdValue) && inputValue !== '') return;

  const finalUsdValue = isNaN(usdValue) ? 0 : usdValue;
  const clampedValue = Math.min(Math.max(0, finalUsdValue), maxUSDValue);
  setTempUSDAmount(Math.floor(clampedValue * 100) / 100);
  setLastModified('usd');
}

// 🔥 UNIFIED: Handle slider changes with snapping
export function handleSliderChange(
  token: TokenRow,
  value: number,
  setTempAmount: (amount: number) => void,
  setLastModified: (type: 'token' | 'usd') => void
): void {
  const percentage = value / token.amount;
  const snapThreshold = 0.01;
  const snapPoints = [0, 0.25, 0.5, 0.75, 1.0];
  
  let snappedPercentage = percentage;
  for (const snapPoint of snapPoints) {
    if (Math.abs(percentage - snapPoint) <= snapThreshold) {
      snappedPercentage = snapPoint;
      break;
    }
  }
  
  const snappedValue = snappedPercentage * token.amount;
  setTempAmount(snappedValue);
  setLastModified('token');
}

// 🔥 UNIFIED: Update token amounts based on USD/SOL price changes
export function updateTokenAmountFromUSD(
  token: TokenRow,
  tempUSDAmount: number,
  tokenPriceInSol: number | null,
  solPrice: number | null,
  setTempAmount: (amount: number) => void
): void {
  if (!solPrice || !tokenPriceInSol || tempUSDAmount <= 0) return;
  
  let tokenFromUSD = 0;
  if (token.mint === 'So11111111111111111111111111111111111111112') {
    tokenFromUSD = tempUSDAmount / solPrice;
  } else {
    const valueInSol = tempUSDAmount / solPrice;
    tokenFromUSD = valueInSol / tokenPriceInSol;
  }
  
  setTempAmount(Math.min(tokenFromUSD, token.amount));
}

// 🔥 UNIFIED: Update USD amount based on token amount changes
export function updateUSDAmountFromToken(
  token: TokenRow,
  tempAmount: number,
  tokenPriceInSol: number | null,
  solPrice: number | null,
  setTempUSDAmount: (amount: number) => void
): void {
  if (!solPrice || !tokenPriceInSol) return;
  
  let usdFromToken = 0;
  if (token.mint === 'So11111111111111111111111111111111111111112') {
    usdFromToken = tempAmount * solPrice;
  } else {
    const valueInSol = tempAmount * tokenPriceInSol;
    usdFromToken = valueInSol * solPrice;
  }
  
  if (usdFromToken !== null) {
    setTempUSDAmount(Math.floor(usdFromToken * 100) / 100);
  }
}

// 🔥 UNIFIED: Quick percentage selection handler
export function handleQuickPercentageSelect(
  token: TokenRow,
  percentage: number,
  setTempAmount: (amount: number) => void,
  setLastModified: (type: 'token' | 'usd') => void
): void {
  const amount = (token.amount * percentage) / 100;
  setTempAmount(amount);
  setLastModified('token');
}
</file>

<file path="lib/tokenSelectorUtils.ts">
// Shared utilities for token selector components

import { TokenRow } from './tokenUtils';
import { calculateTokenUSDValue, calculateTokenAmountFromUSD, calculateMaxUSDValue } from './priceCalculations';

// 🔥 UNIFIED: Token amount formatting for display overlays
export function formatTokenAmountForDisplay(amount: number, decimals: number): string {
  if (amount === 0) return '0';
  if (amount >= 1000000) return `${(amount / 1000000).toFixed(2)}M`;
  if (amount >= 100000) return `${(amount / 1000).toFixed(2)}K`;
  if (amount >= 100) return amount.toLocaleString(undefined, {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });
  if (amount >= 10) return amount.toFixed(2);
  return amount.toFixed(3);
}

// 🔥 UNIFIED: USD value formatting for display overlays
export function formatUSDValueForDisplay(usdValue: number): string {
  if (usdValue === 0) return '$0';
  if (usdValue >= 1000000) {
    const truncated = Math.floor((usdValue / 1000000) * 10) / 10;
    return `$${truncated}M`;
  }
  if (usdValue >= 1000) {
    const truncated = Math.floor((usdValue / 1000) * 10) / 10;
    return `$${truncated}K`;
  }
  if (usdValue >= 1) {
    const truncated = Math.floor(usdValue * 100) / 100;
    const fixed = truncated.toFixed(2);
    return fixed.endsWith('.00') ? `$${truncated.toFixed(0)}` : `$${fixed}`;
  }
  const truncated = Math.floor(usdValue * 10000) / 10000;
  return `$${truncated.toFixed(4)}`;
}

// 🔥 UNIFIED: Calculate USD value from token amount with error handling
export function calculateTokenUSDValueSafe(
  token: TokenRow,
  tokenAmount: number,
  tokenPriceInSol: number | null | undefined, // Added undefined as possible type
  solPrice: number | null
): number {
  // 🔥 FIXED: Check if tokenPriceInSol is undefined before using it
  if (tokenPriceInSol === undefined || tokenPriceInSol === null || solPrice === null) {
    return 0; // Return 0 if we don't have valid price data
  }
  
  const usdValue = calculateTokenUSDValue(token, tokenAmount, tokenPriceInSol, solPrice);
  return usdValue !== null ? Math.floor(usdValue * 100) / 100 : 0;
}

// 🔥 UNIFIED: Calculate max USD value with error handling
export function calculateMaxUSDValueSafe(
  token: TokenRow,
  tokenPriceInSol: number | null | undefined, // Added undefined as possible type
  solPrice: number | null
): number {
  // 🔥 FIXED: Check if tokenPriceInSol is undefined before using it
  if (!solPrice || tokenPriceInSol === undefined || tokenPriceInSol === null) return 0;
  
  if (token.mint === 'So11111111111111111111111111111111111111112') {
    return Math.floor(token.amount * solPrice * 100) / 100;
  } else {
    const valueInSol = token.amount * tokenPriceInSol;
    return Math.floor(valueInSol * solPrice * 100) / 100;
  }
}

// 🔥 UNIFIED: Validate Solana wallet address
export function isValidSolanaAddress(address: string): boolean {
  if (!address || typeof address !== 'string') return false;
  
  // Basic validation - Solana addresses are typically 32-44 characters
  if (address.length < 32 || address.length > 44) return false;
  
  // Check if it's base58 encoded (roughly)
  const base58Regex = /^[1-9A-HJ-NP-Za-km-z]+$/;
  return base58Regex.test(address);
}

// 🔥 UNIFIED: Sort tokens by USD value (highest first)
export function sortTokensByUSDValue(
  tokens: TokenRow[],
  tokenPricesInSol: Record<string, number | null> = {}, // Default empty object
  solPrice: number | null
): TokenRow[] {
  if (!tokenPricesInSol || Object.keys(tokenPricesInSol).length === 0) {
    // If no price data is available, just return the original order
    return [...tokens];
  }

  return [...tokens].sort((a, b) => {
    // Safely access tokenPricesInSol with null coalescence
    const aPriceInSol = tokenPricesInSol[a.mint] ?? 0;
    const bPriceInSol = tokenPricesInSol[b.mint] ?? 0;
    
    // Calculate USD values safely
    const aUSD = calculateTokenUSDValueSafe(a, a.amount, aPriceInSol, solPrice);
    const bUSD = calculateTokenUSDValueSafe(b, b.amount, bPriceInSol, solPrice);
    
    return bUSD - aUSD;
  });
}

// 🔥 UNIFIED: Filter tokens by search term
export function filterTokensBySearch(tokens: TokenRow[], searchTerm: string): TokenRow[] {
  if (!searchTerm.trim()) return tokens;
  
  const search = searchTerm.toLowerCase().trim();
  return tokens.filter(token => 
    token.symbol.toLowerCase().includes(search) ||
    token.name.toLowerCase().includes(search) ||
    token.mint.toLowerCase().includes(search)
  );
}

// 🔥 UNIFIED: Calculate total USD value of selected tokens
export function calculateTotalSelectedUSD(
  selectedTokens: TokenRow[],
  tokenPricesInSol: Record<string, number | null> = {}, // Default empty object
  solPrice: number | null
): number {
  if (!tokenPricesInSol || Object.keys(tokenPricesInSol).length === 0 || !solPrice) {
    return 0; // Return 0 if no price data
  }

  return selectedTokens.reduce((total, token) => {
    const selectedAmount = token.selectedAmount ?? 0;
    if (selectedAmount <= 0) return total;
    
    // Safely access tokenPricesInSol with null coalescence
    const priceInSol = tokenPricesInSol[token.mint] ?? 0;
    const usdValue = calculateTokenUSDValueSafe(token, selectedAmount, priceInSol, solPrice);
    
    return total + usdValue;
  }, 0);
}
</file>

<file path="lib/tokenUtils.ts">
// Shared token utility functions

export interface TokenRow {
  mint: string;
  amount: number;
  decimals: number;
  symbol: string;
  name: string;
  image: string;
  selected?: boolean;
  selectedAmount?: number;
}

// 🔥 UNIFIED: Token decimals mapping
export function getTokenDecimals(mint: string): number {
  const map: Record<string, number> = {
    So11111111111111111111111111111111111111112: 9, // SOL
    EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: 6, // USDC
    Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB: 6, // USDT
  };
  return map[mint] ?? 6;
}

// 🔥 UNIFIED: Basic amount formatting
export function formatAmount(amount: number, decimals: number): string {
  if (amount === 0) return "0";
  if (amount < 0.000001) return amount.toExponential(Math.min(decimals, 3));
  return amount.toLocaleString(undefined, {
    maximumFractionDigits: Math.min(decimals, 6),
    minimumFractionDigits: 0,
  });
}

// 🔥 UNIFIED: Abbreviated amount formatting with suffixes
export function formatAmountAbbreviated(amount: number, decimals: number): string {
  if (amount === 0) return "0";
  if (amount < 0.000001) return amount.toExponential(Math.min(decimals, 3));

  const abs = Math.abs(amount);
  let value: number, suffix: string;

  if (abs >= 1_000_000_000) {
    value = amount / 1_000_000_000;
    suffix = "b";
  } else if (abs >= 1_000_000) {
    value = amount / 1_000_000;
    suffix = "m";
  } else if (abs >= 1_000) {
    value = amount / 1_000;
    suffix = "k";
  } else {
    return amount.toLocaleString(undefined, {
      maximumFractionDigits: Math.min(decimals, 6),
      minimumFractionDigits: 0,
    });
  }

  // Show up to 2 decimal places, but trim trailing zeros
  let str = value.toLocaleString(undefined, {
    minimumFractionDigits: 0,
    maximumFractionDigits: 2,
  });

  // Remove trailing .00 or .0
  str = str.replace(/\.0+$|(\.[0-9]*[1-9])0+$/, "$1");

  return str + suffix;
}

// 🔥 UNIFIED: USD formatting with truncation instead of rounding
export function formatUSDValue(usdValue: number): string {
  if (usdValue >= 1000000) {
    const truncated = Math.floor((usdValue / 1000000) * 10) / 10;
    return `$${truncated}M`;
  } else if (usdValue >= 1000) {
    const truncated = Math.floor((usdValue / 1000) * 10) / 10;
    return `$${truncated}K`;
  } else if (usdValue >= 1) {
    const truncated = Math.floor(usdValue * 100) / 100;
    return `$${truncated.toFixed(2)}`;
  } else if (usdValue >= 0.01) {
    const truncated = Math.floor(usdValue * 100) / 100;
    return `$${truncated.toFixed(2)}`;
  } else {
    const truncated = Math.floor(usdValue * 10000) / 10000;
    return `$${truncated.toFixed(4)}`;
  }
}

// 🔥 UNIFIED: Smart USD formatting for overlay display (removes .00 for whole numbers)
export function formatUSDValueSmart(usdValue: number): string {
  if (usdValue === 0) return '0';
  if (usdValue >= 1000000) {
    const truncated = Math.floor((usdValue / 1000000) * 10) / 10;
    return `${truncated}M`;
  }
  if (usdValue >= 1000) {
    const truncated = Math.floor((usdValue / 1000) * 10) / 10;
    return `${truncated}K`;
  }
  if (usdValue >= 1) {
    const truncated = Math.floor(usdValue * 100) / 100;
    const fixed = truncated.toFixed(2);
    return fixed.endsWith('.00') ? truncated.toFixed(0) : fixed;
  }
  const truncated = Math.floor(usdValue * 10000) / 10000;
  return truncated.toFixed(4);
}

// 🔥 UNIFIED: Smart token amount formatting (abbreviated for display)
export function formatTokenAmountSmart(amount: number): string {
  if (amount >= 1000000) {
    return `${(amount / 1000000).toFixed(2)}m`;
  } else if (amount >= 100000) {
    return `${(amount / 1000).toFixed(2)}k`;
  } else if (amount >= 100) {
    return amount.toLocaleString(undefined, {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    });
  } else if (amount >= 10) {
    return amount.toFixed(2);
  } else {
    return amount.toFixed(3);
  }
}

// 🔥 UNIFIED: Convert percentage to token count
export function percentageToTokenCount(percentage: number, totalAmount: number): number {
  return (totalAmount * percentage) / 100;
}

// 🔥 UNIFIED: Convert token count to percentage
export function tokenCountToPercentage(tokenCount: number, totalAmount: number): number {
  if (totalAmount === 0) return 0;
  return (tokenCount / totalAmount) * 100;
}

// 🔥 UNIFIED: Clamp value between min and max
export function clampValue(value: number, min: number, max: number): number {
  return Math.min(Math.max(min, value), max);
}

// 🔥 UNIFIED: Check if input string is partial decimal (like "5." or "0.")
export function isPartialDecimal(inputValue: string): boolean {
  return inputValue.endsWith('.') && !isNaN(parseFloat(inputValue.slice(0, -1)));
}

// 🔥 UNIFIED: Parse input value safely
export function parseInputValue(inputValue: string): number {
  if (inputValue === '' || inputValue === '.') return 0;
  
  if (isPartialDecimal(inputValue)) {
    return parseFloat(inputValue.slice(0, -1));
  }
  
  const numValue = parseFloat(inputValue);
  return isNaN(numValue) ? 0 : numValue;
}

// 🔥 UNIFIED: Snap percentage to common values
export function snapPercentage(percentage: number, snapThreshold: number = 2): number {
  const snapPoints = [0, 100]; // Common snap points
  
  for (const snapPoint of snapPoints) {
    if (Math.abs(percentage - snapPoint) <= snapThreshold) {
      return snapPoint;
    }
  }
  
  return percentage;
}
</file>

<file path="lib/transaction-builder.ts">
import {
  Connection,
  PublicKey,
  Transaction,
  SystemProgram,
  LAMPORTS_PER_SOL,
} from '@solana/web3.js';
import {
  getAssociatedTokenAddressSync,
  createAssociatedTokenAccountInstruction,
  createTransferInstruction,
} from '@solana/spl-token';

interface TokenRow {
  mint: string;
  amount: number;
  decimals: number;
  symbol: string;
  name: string;
  image: string;
  selected?: boolean;
  selectedAmount?: number;
}

export async function buildDepositTransaction(
  selectedTokens: TokenRow[],
  walletAddress: string,
  jackpotAddress: string,
  connection: Connection
): Promise<Transaction> {
  if (!walletAddress) throw new Error('Wallet not connected');
  
  const publicKey = new PublicKey(walletAddress);
  const tx = new Transaction();

  for (const token of selectedTokens) {
    const amount = token.selectedAmount ?? 0;
    if (amount <= 0) continue;

    if (token.mint === 'So11111111111111111111111111111111111111112') {
      // SOL transfer
      tx.add(
        SystemProgram.transfer({
          fromPubkey: publicKey,
          toPubkey: new PublicKey(jackpotAddress),
          lamports: Math.round(amount * LAMPORTS_PER_SOL),
        }),
      );
    } else {
      // SPL Token transfer
      const mint = new PublicKey(token.mint);
      const fromAta = getAssociatedTokenAddressSync(mint, publicKey);
      const toAta = getAssociatedTokenAddressSync(mint, new PublicKey(jackpotAddress), true);
      
      // Create destination ATA if it doesn't exist
      if (!(await connection.getAccountInfo(toAta))) {
        tx.add(
          createAssociatedTokenAccountInstruction(
            publicKey,
            toAta,
            new PublicKey(jackpotAddress),
            mint,
          ),
        );
      }
      
      // Add transfer instruction
      tx.add(
        createTransferInstruction(
          fromAta,
          toAta,
          publicKey,
          BigInt(Math.round(amount * 10 ** token.decimals)),
        ),
      );
    }
  }

  // Set transaction metadata
  tx.feePayer = publicKey;
  tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;
  
  return tx;
}
</file>

<file path="lib/types.ts">
export interface PastDraw {
  id: string;
  name: string;
  amount: number;
}

export interface Deposit {
  id: string;
  user: string;
  token: string;
  amount: number;
  color: string;
  timestamp: Date;
}

export interface ChatMessage {
  id: string;
  user: string;
  message: string;
  timestamp: string;
  gif?: string;
  messageSegments?: MessageSegment[];
}

export interface UserGifs {
  [key: string]: string[];
}

export interface MessageSegment {
  type: 'text' | 'emoji';
  content: string;
}
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatTimeAgo(date: Date): string {
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
  
  if (diffInSeconds < 60) {
    return `${diffInSeconds}s ago`;
  }
  
  const diffInMinutes = Math.floor(diffInSeconds / 60);
  if (diffInMinutes < 60) {
    return `${diffInMinutes}m ago`;
  }
  
  const diffInHours = Math.floor(diffInMinutes / 60);
  if (diffInHours < 24) {
    return `${diffInHours}h ago`;
  }
  
  const diffInDays = Math.floor(diffInHours / 24);
  return `${diffInDays}d ago`;
}
</file>

<file path="lib/wheel-utils.ts">
/* -------------------------------------------------------------------------- */
/*                                   TYPES                                    */
/* -------------------------------------------------------------------------- */

export interface Deposit {
  id: string;
  user: string;
  token: string;
  amount: number;
  timestamp: Date;
}

export interface ChartSlice {
  value: number;
  color: string;
  /** Unique identifier for React keys and animations */
  key: string;
  /** present on the "capacity-left" slice only */
  isRemaining?: true;
  deposit?: Deposit;
}

/* -------------------------------------------------------------------------- */
/*                            STABLE COLOR SYSTEM                            */
/* -------------------------------------------------------------------------- */

/**
 * 🎰 FIXED CASINO COLOR PALETTE
 * Each deposit gets assigned a color based on its chronological order
 * Colors NEVER change once assigned - new deposits get the next color in sequence
 */
const CASINO_COLOR_PALETTE = [
  '#FFD700', // 1st deposit: Gold (classic casino)
  '#FF8C00', // 2nd deposit: Orange  
  '#FF1493', // 3rd deposit: Hot Pink
  '#9932CC', // 4th deposit: Purple
  '#FF4500', // 5th deposit: Red Orange
  '#00FFFF', // 6th deposit: Cyan
  '#32CD32', // 7th deposit: Lime Green
  '#FF6347', // 8th deposit: Tomato Red
  '#1E90FF', // 9th deposit: Dodger Blue
  '#FF69B4', // 10th deposit: Hot Pink variant
  '#8A2BE2', // 11th deposit: Blue Violet
  '#00FA9A', // 12th deposit: Medium Spring Green
  '#DC143C', // 13th deposit: Crimson
  '#40E0D0', // 14th deposit: Turquoise
  '#FFA500', // 15th deposit: Orange variant
  '#DA70D6', // 16th deposit: Orchid
  '#98FB98', // 17th deposit: Pale Green
  '#F0E68C', // 18th deposit: Khaki
  '#DDA0DD', // 19th deposit: Plum
  '#FFFF00', // 20th deposit: Yellow
];

/**
 * Get stable color for a deposit based on its chronological position
 * Colors are assigned once and never change
 */
function getStableColorForDeposit(depositIndex: number): string {
  // Cycle through the palette if we have more deposits than colors
  return CASINO_COLOR_PALETTE[depositIndex % CASINO_COLOR_PALETTE.length];
}

/* -------------------------------------------------------------------------- */
/*                              ANGLE CALCULATIONS                            */
/* -------------------------------------------------------------------------- */

// Calculate the angle for a specific deposit in the pie chart
export function calculateDepositAngle(
  deposits: Deposit[], 
  targetDeposit: Deposit, 
  totalAmount: number
): { startAngle: number; endAngle: number; sliceAngle: number } {
  const remainingCap = Math.max(2000 - totalAmount, 0);
  // 🔥 KEEP CHRONOLOGICAL ORDER - no sorting!
  const chronological = [...deposits];
  
  let cumulativeAngle = 0;
  
  // Start from remaining capacity (first slice) - starts at 90 degrees (top)
  const remainingSliceAngle = (remainingCap / (totalAmount + remainingCap)) * 360;
  cumulativeAngle += remainingSliceAngle;
  
  // Find our target deposit and calculate its angle range
  for (const deposit of chronological) {
    const sliceAngle = (deposit.amount / (totalAmount + remainingCap)) * 360;
    
    if (deposit.id === targetDeposit.id) {
      // Return the angle info for this slice
      return {
        startAngle: cumulativeAngle,
        endAngle: cumulativeAngle + sliceAngle,
        sliceAngle: sliceAngle
      };
    }
    
    cumulativeAngle += sliceAngle;
  }
  
  return { startAngle: 0, endAngle: 0, sliceAngle: 0 }; // Fallback
}

// Generate dramatic spinning angle with near-miss effects
export function generateSpinningAngle(
  deposits: Deposit[],
  winner: Deposit,
  totalAmount: number
): number {
  const angleInfo = calculateDepositAngle(deposits, winner, totalAmount);
  const { startAngle, endAngle, sliceAngle } = angleInfo;
  
  // Create different spinning scenarios for drama
  const scenarios = [
    'barely_made_it',    // Just barely crosses into winner's section
    'almost_missed',     // Almost went to next section but stopped just before
    'center_hit',        // Lands right in the center of winner's section  
    'close_call_before', // Almost lands on previous section
    'close_call_after'   // Almost lands on next section
  ];
  
  const scenario = scenarios[Math.floor(Math.random() * scenarios.length)];
  
  // Base rotations: 6-12 full spins for maximum drama
  const baseRotations = 6 + Math.random() * 6;
  let targetPosition: number;
  
  switch (scenario) {
    case 'barely_made_it':
      // Land just 2-8% into the winner's slice
      targetPosition = startAngle + (sliceAngle * (0.02 + Math.random() * 0.06));
      break;
      
    case 'almost_missed': 
      // Land just 2-8% before the end of winner's slice
      targetPosition = endAngle - (sliceAngle * (0.02 + Math.random() * 0.06));
      break;
      
    case 'center_hit':
      // Land in the middle 40% of the winner's slice
      const centerStart = startAngle + (sliceAngle * 0.3);
      const centerEnd = startAngle + (sliceAngle * 0.7);
      targetPosition = centerStart + Math.random() * (centerEnd - centerStart);
      break;
      
    case 'close_call_before':
      // Land very close to the start, creating tension
      targetPosition = startAngle + (sliceAngle * (0.01 + Math.random() * 0.04));
      break;
      
    case 'close_call_after':
      // Land very close to the end, creating tension
      targetPosition = endAngle - (sliceAngle * (0.01 + Math.random() * 0.04));
      break;
      
    default:
      targetPosition = (startAngle + endAngle) / 2; // Center fallback
  }
  
  // Add some wobble for realism (±1 degree)
  targetPosition += (Math.random() - 0.5) * 2;
  
  // The pointer is at the top (0 degrees), so we need to position the winner's section there
  // Convert from pie chart angles (starting at 90 degrees) to wheel rotation
  const finalAngle = (baseRotations * 360) + (90 - targetPosition);
  
  console.log(`🎰 Spinning scenario: ${scenario}`);
  console.log(`🎯 Winner slice: ${startAngle.toFixed(1)}° to ${endAngle.toFixed(1)}° (${sliceAngle.toFixed(1)}° wide)`);
  console.log(`📍 Landing at: ${targetPosition.toFixed(1)}°`);
  console.log(`🌀 Total spin: ${finalAngle.toFixed(1)}° (${(finalAngle/360).toFixed(1)} rotations)`);
  
  return finalAngle;
}

/* -------------------------------------------------------------------------- */
/*                            CHART DATA GENERATION                          */
/* -------------------------------------------------------------------------- */

export function generateChartData(
  deposits: Deposit[],
  totalAmount: number
): ChartSlice[] {
  const remainingCap = Math.max(2000 - totalAmount, 0);
  const bgColor = '#1A0B2E';

  // 🔥 CRITICAL: Keep deposits in chronological order - NO SORTING!
  // This ensures deposits maintain their position and color assignment
  const chronological = [...deposits];

  // Create chart data in correct order: remaining capacity first, then deposits in chronological order
  const slices: ChartSlice[] = [
    {
      key: 'remaining-capacity',
      value: remainingCap,
      color: bgColor,
      isRemaining: true,
    },
    // 🎰 STABLE COLOR ASSIGNMENT: Each deposit gets color based on its chronological index
    ...chronological.map((d, index) => ({
      key: d.id, // Use deposit ID as stable key
      value: d.amount,
      color: getStableColorForDeposit(index), // 🔥 FIXED: Stable color based on order
      deposit: d,
    }))
  ];

  return slices;
}
</file>

<file path="stores/audioStore.ts">
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';

interface AudioStore {
  // Audio state
  isMuted: boolean;
  volume: number;
  
  // Actions
  toggleMute: () => void;
  setVolume: (volume: number) => void;
  playSound: (soundName: 'deposit' | 'userDeposit' | 'win') => void;
}

export const useAudioStore = create<AudioStore>()(
  devtools(
    persist(
      (set, get) => {
        // Audio references - initialized once
        const audioRefs: { [key: string]: HTMLAudioElement } = {};
        
        // Initialize audio elements
        if (typeof window !== 'undefined') {
          audioRefs.deposit = new Audio('/audio/deposit.wav');
          audioRefs.userDeposit = new Audio('/audio/userDeposit.wav');
          audioRefs.win = new Audio('/audio/win.wav');
          
          Object.values(audioRefs).forEach(audio => {
            audio.preload = 'auto';
          });
        }
        
        // Update audio volumes when state changes
        const updateAudioVolumes = (isMuted: boolean, volume: number) => {
          Object.values(audioRefs).forEach(audio => {
            audio.volume = isMuted ? 0 : volume;
          });
        };
        
        return {
          // Initial state
          isMuted: false,
          volume: 0.7,
          
          // Actions
          toggleMute: () => {
            set((state) => {
              const newMuted = !state.isMuted;
              updateAudioVolumes(newMuted, state.volume);
              return { isMuted: newMuted };
            }, false, 'toggleMute');
          },
          
          setVolume: (volume) => {
            const clampedVolume = Math.max(0, Math.min(1, volume));
            set((state) => {
              updateAudioVolumes(state.isMuted, clampedVolume);
              return { volume: clampedVolume };
            }, false, 'setVolume');
          },
          
          playSound: (soundName) => {
            const state = get();
            if (state.isMuted) return;
            
            const audio = audioRefs[soundName];
            if (audio) {
              audio.currentTime = 0;
              audio.play().catch(error => {
                console.warn('Audio play failed:', error);
              });
            }
          },
        };
      },
      {
        name: 'audio-store',
        partialize: (state) => ({
          isMuted: state.isMuted,
          volume: state.volume,
        }),
      }
    ),
    { name: 'audio-store' }
  )
);
</file>

<file path="stores/chatStore.ts">
import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

interface MessageSegment {
  type: 'text' | 'emoji';
  content: string;
}

interface ChatMessage {
  id: string;
  user: string;
  message: string;
  timestamp: string;
  gif?: string;
  messageSegments?: MessageSegment[];
}

interface ChatStore {
  // Chat state
  messages: ChatMessage[];
  newMessage: string;
  isEmojiPickerOpen: boolean;
  
  // Actions
  addMessage: (message: ChatMessage) => void;
  setMessages: (messages: ChatMessage[]) => void;
  setNewMessage: (message: string) => void;
  setIsEmojiPickerOpen: (open: boolean) => void;
  clearNewMessage: () => void;
}

export const useChatStore = create<ChatStore>()(
  devtools(
    (set) => ({
      // Initial state
      messages: [],
      newMessage: "",
      isEmojiPickerOpen: false,
      
      // Actions
      addMessage: (message) => {
        set((state) => ({
          messages: [...state.messages.slice(-19), message] // Keep only last 20 messages
        }), false, 'addMessage');
      },
      
      setMessages: (messages) => {
        set({ messages }, false, 'setMessages');
      },
      
      setNewMessage: (newMessage) => {
        set({ newMessage }, false, 'setNewMessage');
      },
      
      setIsEmojiPickerOpen: (isEmojiPickerOpen) => {
        set({ isEmojiPickerOpen }, false, 'setIsEmojiPickerOpen');
      },
      
      clearNewMessage: () => {
        set({ newMessage: "" }, false, 'clearNewMessage');
      },
    }),
    { name: 'chat-store' }
  )
);
</file>

<file path="stores/debugStore.ts">
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';

interface DebugStore {
  // Debug wallet address
  debugWalletAddress: string;
  
  // Actions
  setDebugWalletAddress: (address: string) => void;
  clearDebugWalletAddress: () => void;
}

export const useDebugStore = create<DebugStore>()(
  devtools(
    persist(
      (set) => ({
        // Initial state
        debugWalletAddress: "",
        
        // Actions
        setDebugWalletAddress: (debugWalletAddress) => {
          set({ debugWalletAddress }, false, 'setDebugWalletAddress');
        },
        
        clearDebugWalletAddress: () => {
          set({ debugWalletAddress: "" }, false, 'clearDebugWalletAddress');
        },
      }),
      {
        name: 'debug-store',
        partialize: (state) => ({
          debugWalletAddress: state.debugWalletAddress,
        }),
      }
    ),
    { name: 'debug-store' }
  )
);
</file>

<file path="stores/gameStore.ts">
import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

interface Deposit {
  id: string;
  user: string;
  token: string;
  amount: number;
  timestamp: Date;
}

type RoundState = 'active' | 'ending' | 'ended' | 'starting';

interface GameStore {
  // Round state
  currentRoundDeposits: Deposit[];
  roundState: RoundState;
  winner: string | null;
  winAmount: number;
  seconds: number;
  newRoundCountdown: number;
  
  // Spinning wheel state
  isSpinning: boolean;
  finalSpinAngle: number;
  selectedWinner: Deposit | null;
  shouldResetWheel: boolean;
  
  // Animation state
  isAnimating: boolean;
  
  // Computed values
  totalAmount: number;
  
  // Actions
  addDeposit: (deposit: Deposit) => void;
  setDeposits: (deposits: Deposit[]) => void;
  updateDeposits: (updater: (deposits: Deposit[]) => Deposit[]) => void;
  
  // Round management
  setRoundState: (state: RoundState) => void;
  setWinner: (winner: string | null, amount?: number) => void;
  setSeconds: (seconds: number) => void;
  setNewRoundCountdown: (countdown: number) => void;
  
  // Spinning wheel
  startSpinning: (angle: number, winner: Deposit) => void;
  stopSpinning: () => void;
  setIsAnimating: (animating: boolean) => void;
  setShouldResetWheel: (reset: boolean) => void;
  
  // Reset
  resetRound: () => void;
}

export const useGameStore = create<GameStore>()(
  devtools(
    (set, get) => ({
      // Initial state
      currentRoundDeposits: [],
      roundState: 'active',
      winner: null,
      winAmount: 0,
      seconds: 54,
      newRoundCountdown: 10,
      isSpinning: false,
      finalSpinAngle: 0,
      selectedWinner: null,
      shouldResetWheel: false,
      isAnimating: false,
      totalAmount: 0,
      
      // Deposit actions
      addDeposit: (deposit) => {
        set((state) => {
          const newDeposits = [...state.currentRoundDeposits, deposit];
          const newTotal = newDeposits.reduce((sum, d) => sum + d.amount, 0);
          return {
            currentRoundDeposits: newDeposits,
            totalAmount: newTotal
          };
        }, false, 'addDeposit');
      },
      
      setDeposits: (deposits) => {
        const newTotal = deposits.reduce((sum, d) => sum + d.amount, 0);
        set({
          currentRoundDeposits: deposits,
          totalAmount: newTotal
        }, false, 'setDeposits');
      },
      
      updateDeposits: (updater) => {
        set((state) => {
          const newDeposits = updater(state.currentRoundDeposits);
          const newTotal = newDeposits.reduce((sum, d) => sum + d.amount, 0);
          return {
            currentRoundDeposits: newDeposits,
            totalAmount: newTotal
          };
        }, false, 'updateDeposits');
      },
      
      // Round management
      setRoundState: (roundState) => {
        set({ roundState }, false, 'setRoundState');
      },
      
      setWinner: (winner, amount = 0) => {
        set({ winner, winAmount: amount }, false, 'setWinner');
      },
      
      setSeconds: (seconds) => {
        set({ seconds }, false, 'setSeconds');
      },
      
      setNewRoundCountdown: (newRoundCountdown) => {
        set({ newRoundCountdown }, false, 'setNewRoundCountdown');
      },
      
      // Spinning wheel
      startSpinning: (finalSpinAngle, selectedWinner) => {
        set({
          isSpinning: true,
          finalSpinAngle,
          selectedWinner,
          isAnimating: true
        }, false, 'startSpinning');
      },
      
      stopSpinning: () => {
        set({ isSpinning: false }, false, 'stopSpinning');
      },
      
      setIsAnimating: (isAnimating) => {
        set({ isAnimating }, false, 'setIsAnimating');
      },
      
      setShouldResetWheel: (shouldResetWheel) => {
        set({ shouldResetWheel }, false, 'setShouldResetWheel');
      },
      
      // Reset
      resetRound: () => {
        set({
          currentRoundDeposits: [],
          roundState: 'active',
          winner: null,
          winAmount: 0,
          seconds: 54,
          newRoundCountdown: 10,
          isSpinning: false,
          finalSpinAngle: 0,
          selectedWinner: null,
          shouldResetWheel: false,
          isAnimating: false,
          totalAmount: 0
        }, false, 'resetRound');
      },
    }),
    { name: 'game-store' }
  )
);
</file>

<file path="stores/settingsStore.ts">
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';

type TokenSelectorMode = 'chip' | 'desktop';

interface SettingsStore {
  // Token selector mode
  tokenSelectorMode: TokenSelectorMode;
  
  // Pro Mode features
  isProModeEnabled: boolean;
  
  // UI preferences
  showAdvancedControls: boolean;
  autoSelectOptimalAmounts: boolean;
  
  // Actions
  setTokenSelectorMode: (mode: TokenSelectorMode) => void;
  setProModeEnabled: (enabled: boolean) => void;
  setShowAdvancedControls: (show: boolean) => void;
  setAutoSelectOptimalAmounts: (auto: boolean) => void;
  toggleProMode: () => void;
}

export const useSettingsStore = create<SettingsStore>()(
  devtools(
    persist(
      (set, get) => ({
        // Initial state
        tokenSelectorMode: 'chip',
        isProModeEnabled: false,
        showAdvancedControls: false,
        autoSelectOptimalAmounts: false,
        
        // Actions
        setTokenSelectorMode: (tokenSelectorMode) => {
          set({ tokenSelectorMode }, false, 'setTokenSelectorMode');
        },
        
        setProModeEnabled: (isProModeEnabled) => {
          set({ 
            isProModeEnabled,
            // When enabling Pro Mode, automatically switch to desktop selector
            tokenSelectorMode: isProModeEnabled ? 'desktop' : 'chip'
          }, false, 'setProModeEnabled');
        },
        
        setShowAdvancedControls: (showAdvancedControls) => {
          set({ showAdvancedControls }, false, 'setShowAdvancedControls');
        },
        
        setAutoSelectOptimalAmounts: (autoSelectOptimalAmounts) => {
          set({ autoSelectOptimalAmounts }, false, 'setAutoSelectOptimalAmounts');
        },
        
        toggleProMode: () => {
          const { isProModeEnabled } = get();
          const newProMode = !isProModeEnabled;
          set({ 
            isProModeEnabled: newProMode,
            tokenSelectorMode: newProMode ? 'desktop' : 'chip'
          }, false, 'toggleProMode');
        },
      }),
      {
        name: 'settings-store',
        partialize: (state) => ({
          tokenSelectorMode: state.tokenSelectorMode,
          isProModeEnabled: state.isProModeEnabled,
          showAdvancedControls: state.showAdvancedControls,
          autoSelectOptimalAmounts: state.autoSelectOptimalAmounts,
        }),
      }
    ),
    { name: 'settings-store' }
  )
);
</file>

<file path="stores/tokenStore.ts">
import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

interface TokenRow {
  mint: string;
  amount: number;
  decimals: number;
  symbol: string;
  name: string;
  image: string;
  selected?: boolean;
  selectedAmount?: number;
}

interface TokenStore {
  // Selected tokens for deposit
  selectedTokens: TokenRow[];
  
  // Token portfolio state (for desktop view)
  sliderPercentages: number[];
  
  // UI state
  expandedToken: string | null;
  delayedExpandToken: string | null;
  
  // Actions
  addToken: (token: TokenRow) => void;
  removeToken: (mint: string) => void;
  updateTokenAmount: (mint: string, amount: number) => void;
  clearSelectedTokens: () => void;
  
  // Portfolio actions
  setSliderPercentages: (percentages: number[]) => void;
  updateSliderPercentage: (index: number, percentage: number) => void;
  
  // UI actions
  setExpandedToken: (mint: string | null) => void;
  setDelayedExpandToken: (mint: string | null) => void;
  clearDelayedExpand: () => void;
}

export const useTokenStore = create<TokenStore>()(
  devtools(
    (set, get) => ({
      // Initial state
      selectedTokens: [],
      sliderPercentages: [],
      expandedToken: null,
      delayedExpandToken: null,
      
      // Token selection actions
      addToken: (token) => {
        set((state) => ({
          selectedTokens: [
            ...state.selectedTokens,
            { ...token, selected: true, selectedAmount: token.amount * 0.5 }
          ]
        }), false, 'addToken');
      },
      
      removeToken: (mint) => {
        set((state) => ({
          selectedTokens: state.selectedTokens.filter(token => token.mint !== mint),
          expandedToken: state.expandedToken === mint ? null : state.expandedToken
        }), false, 'removeToken');
      },
      
      updateTokenAmount: (mint, amount) => {
        set((state) => ({
          selectedTokens: state.selectedTokens.map(token =>
            token.mint === mint ? { ...token, selectedAmount: amount } : token
          )
        }), false, 'updateTokenAmount');
      },
      
      clearSelectedTokens: () => {
        set({ 
          selectedTokens: [],
          expandedToken: null,
          delayedExpandToken: null 
        }, false, 'clearSelectedTokens');
      },
      
      // Portfolio actions
      setSliderPercentages: (percentages) => {
        set({ sliderPercentages: percentages }, false, 'setSliderPercentages');
      },
      
      updateSliderPercentage: (index, percentage) => {
        set((state) => {
          const newPercentages = [...state.sliderPercentages];
          newPercentages[index] = percentage;
          return { sliderPercentages: newPercentages };
        }, false, 'updateSliderPercentage');
      },
      
      // UI actions
      setExpandedToken: (mint) => {
        set({ expandedToken: mint }, false, 'setExpandedToken');
      },
      
      setDelayedExpandToken: (mint) => {
        set({ delayedExpandToken: mint }, false, 'setDelayedExpandToken');
      },
      
      clearDelayedExpand: () => {
        set({ delayedExpandToken: null }, false, 'clearDelayedExpand');
      },
    }),
    { name: 'token-store' }
  )
);
</file>

<file path="stores/uiStore.ts">
import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

interface UIStore {
  // Mobile state
  isMobile: boolean;
  activeTab: 'deposits' | 'chat';
  
  // Layout state
  isExpanded: boolean; // For mobile deposit bar
  showVolumeSlider: boolean;
  
  // Focus states
  focusedInputs: Record<string, boolean>;
  
  // Actions
  setIsMobile: (isMobile: boolean) => void;
  setActiveTab: (tab: 'deposits' | 'chat') => void;
  setIsExpanded: (expanded: boolean) => void;
  setShowVolumeSlider: (show: boolean) => void;
  setInputFocus: (inputKey: string, focused: boolean) => void;
  clearAllFocus: () => void;
}

export const useUIStore = create<UIStore>()(
  devtools(
    (set) => ({
      // Initial state
      isMobile: false,
      activeTab: 'deposits',
      isExpanded: false,
      showVolumeSlider: false,
      focusedInputs: {},
      
      // Actions
      setIsMobile: (isMobile) => {
        set({ isMobile }, false, 'setIsMobile');
      },
      
      setActiveTab: (activeTab) => {
        set({ activeTab }, false, 'setActiveTab');
      },
      
      setIsExpanded: (isExpanded) => {
        set({ isExpanded }, false, 'setIsExpanded');
      },
      
      setShowVolumeSlider: (showVolumeSlider) => {
        set({ showVolumeSlider }, false, 'setShowVolumeSlider');
      },
      
      setInputFocus: (inputKey, focused) => {
        set((state) => ({
          focusedInputs: {
            ...state.focusedInputs,
            [inputKey]: focused
          }
        }), false, 'setInputFocus');
      },
      
      clearAllFocus: () => {
        set({ focusedInputs: {} }, false, 'clearAllFocus');
      },
    }),
    { name: 'ui-store' }
  )
);
</file>

<file path="styles/slider.css">
/* FIXED SLIDER STYLES - Complete redesign */
.casino-slider {
  /* Remove default styling */
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: transparent;
  outline: none;
  margin: 0;
  padding: 0;
}

/* WebKit (Chrome, Safari, Edge) thumb styling */
.casino-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  height: 16px;
  width: 16px;
  border-radius: 50%;
  background: linear-gradient(45deg, #fbbf24, #f59e0b);
  border: 2px solid #ffffff;
  cursor: pointer;
  box-shadow: 
    0 0 0 1px #000000,
    0 2px 4px rgba(0, 0, 0, 0.4), 
    0 0 8px rgba(255, 215, 0, 0.6);
  transition: all 0.15s ease;
  /* Ensure thumb appears above everything */
  position: relative;
  z-index: 1000;
}

.casino-slider::-webkit-slider-thumb:hover {
  background: linear-gradient(45deg, #f59e0b, #fbbf24);
  transform: scale(1.15);
  box-shadow: 
    0 0 0 1px #000000,
    0 4px 8px rgba(0, 0, 0, 0.5), 
    0 0 12px rgba(255, 215, 0, 0.8);
}

.casino-slider::-webkit-slider-thumb:active {
  transform: scale(1.05);
  box-shadow: 
    0 0 0 1px #000000,
    0 2px 6px rgba(0, 0, 0, 0.4), 
    0 0 10px rgba(255, 215, 0, 0.7);
}

/* WebKit track styling */
.casino-slider::-webkit-slider-track {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  height: 20px; /* Full height to capture clicks */
  border: none;
  outline: none;
}

/* Firefox thumb styling */
.casino-slider::-moz-range-thumb {
  height: 16px;
  width: 16px;
  border-radius: 50%;
  background: linear-gradient(45deg, #fbbf24, #f59e0b);
  border: 2px solid #ffffff;
  cursor: pointer;
  box-shadow: 
    0 0 0 1px #000000,
    0 2px 4px rgba(0, 0, 0, 0.4), 
    0 0 8px rgba(255, 215, 0, 0.6);
  /* Remove default Firefox styling */
  -moz-appearance: none;
  border-radius: 50%;
}

.casino-slider::-moz-range-thumb:hover {
  background: linear-gradient(45deg, #f59e0b, #fbbf24);
  transform: scale(1.15);
}

/* Firefox track styling */
.casino-slider::-moz-range-track {
  background: transparent;
  height: 20px;
  border: none;
  border-radius: 0;
}

/* Focus styles */
.casino-slider:focus {
  outline: none;
}

.casino-slider:focus::-webkit-slider-thumb {
  box-shadow: 
    0 0 0 1px #000000,
    0 2px 4px rgba(0, 0, 0, 0.4), 
    0 0 8px rgba(255, 215, 0, 0.6),
    0 0 0 2px rgba(255, 215, 0, 0.3);
}

.casino-slider:focus::-moz-range-thumb {
  box-shadow: 
    0 0 0 1px #000000,
    0 2px 4px rgba(0, 0, 0, 0.4), 
    0 0 8px rgba(255, 215, 0, 0.6),
    0 0 0 2px rgba(255, 215, 0, 0.3);
}

/* Custom input number styling to match casino theme */
input[type="number"]::-webkit-outer-spin-button,
input[type="number"]::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type="number"] {
  -moz-appearance: textfield;
}
</file>

<file path="types/react-curved-text.d.ts">
declare module 'react-curved-text' {
  interface ReactCurvedTextProps {
    width: number;
    height: number;
    cx: number;
    cy: number;
    rx: number;
    ry: number;
    startOffset: number;
    reversed?: boolean;
    text: string;
    textProps?: React.SVGProps<SVGTextElement>;
    textPathProps?: React.SVGProps<SVGTextPathElement>;
    [key: string]: any;
  }

  const ReactCurvedText: React.FC<ReactCurvedTextProps>;
  export default ReactCurvedText;
}
</file>

<file path="types/shared.ts">
export interface Deposit {
  id: string;
  user: string;
  token: string;
  amount: number;
  timestamp: Date;
}

export interface TokenRow {
  mint: string;
  amount: number;
  decimals: number;
  symbol: string;
  name: string;
  image: string;
  selected?: boolean;
  selectedAmount?: number;
}

export interface ChatMessage {
  id: string;
  user: string;
  message: string;
  timestamp: string;
  gif?: string;
  messageSegments?: MessageSegment[];
}

export interface MessageSegment {
  type: 'text' | 'emoji';
  content: string;
}
</file>

<file path="types/token.ts">
export interface TokenRow {
    mint: string;
    amount: number;
    decimals: number;
    symbol: string;
    name: string;
    image: string;
    selected?: boolean;
    selectedAmount?: number;
  }
  
  export interface JupiterBalance {
    amount: string;
    uiAmount: number;
    slot: number;
    isFrozen: boolean;
  }
  
  export interface JupiterBalanceResponse {
    [mintAddress: string]: JupiterBalance;
  }
  
  export interface TokenMetadata {
    symbol: string;
    name: string;
    image: string;
  }
  
  export interface HeliusAsset {
    id: string;
    token_info?: { symbol?: string; decimals?: number };
    content?: {
      metadata?: { name?: string; symbol?: string };
      links?: { image?: string };
      files?: Array<{ cdn_uri?: string; uri?: string }>;
    };
  }
  
  export interface TokenSelectorProps {
    selectedTokens: TokenRow[];
    onSelectedTokensChange: (tokens: TokenRow[]) => void;
    delayedExpandToken?: string | null;
    onClearDelayedExpand?: () => void;
  }
</file>

<file path="utils/tokenManagement.ts">
import { TokenRow } from "@/types/token";

export function createTokenSelectors(
  selectedTokens: TokenRow[],
  onSelectedTokensChange: (tokens: TokenRow[]) => void
) {
  const select = (token: TokenRow) => {
    onSelectedTokensChange([
      ...selectedTokens,
      { ...token, selectedAmount: token.amount * 0.5 },
    ]);
  };

  const remove = (mint: string) => {
    onSelectedTokensChange(selectedTokens.filter((t) => t.mint !== mint));
  };

  const update = (mint: string, amount: number) => {
    onSelectedTokensChange(
      selectedTokens.map((t) =>
        t.mint === mint ? { ...t, selectedAmount: amount } : t
      )
    );
  };

  const getAvailableTokens = (allTokens: TokenRow[]) => {
    return allTokens.filter(
      (t) => !selectedTokens.some((s) => s.mint === t.mint)
    );
  };

  return {
    select,
    remove,
    update,
    getAvailableTokens,
  };
}
</file>

<file path="utils/tokenUtils.ts">
export function getTokenDecimals(mint: string): number {
    const map: Record<string, number> = {
      So11111111111111111111111111111111111111112: 9,
      EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: 6,
      Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB: 6,
    };
    return map[mint] ?? 6;
  }
  
  export function formatAmount(amount: number, decimals: number) {
    if (amount === 0) return "0";
    if (amount < 0.000001) return amount.toExponential(Math.min(decimals, 3));
    return amount.toLocaleString(undefined, {
      maximumFractionDigits: Math.min(decimals, 6),
      minimumFractionDigits: 0,
    });
  }
  
  export function formatAmountAbbreviated(amount: number, decimals: number) {
    if (amount === 0) return "0";
    if (amount < 0.000001) return amount.toExponential(Math.min(decimals, 3));
  
    const abs = Math.abs(amount);
    let value: number, suffix: string;
  
    if (abs >= 1_000_000_000) {
      value = amount / 1_000_000_000;
      suffix = "b";
    } else if (abs >= 1_000_000) {
      value = amount / 1_000_000;
      suffix = "m";
    } else if (abs >= 1_000) {
      value = amount / 1_000;
      suffix = "k";
    } else {
      return amount.toLocaleString(undefined, {
        maximumFractionDigits: Math.min(decimals, 6),
        minimumFractionDigits: 0,
      });
    }
  
    // Show up to 2 decimal places, but trim trailing zeros
    let str = value.toLocaleString(undefined, {
      minimumFractionDigits: 0,
      maximumFractionDigits: 2,
    });
  
    // Remove trailing .00 or .0
    str = str.replace(/\.0+$|(\.[0-9]*[1-9])0+$/, "$1");
  
    return str + suffix;
  }
</file>

<file path=".eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: { 
    unoptimized: true,
    domains: ['solana.com', 'www.mysmiley.net']
  },
  // Webpack config - only used when not using Turbopack
  webpack: (config, { isServer }) => {
    // Fix for crypto and buffer polyfills
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        crypto: require.resolve('crypto-browserify'),
        stream: require.resolve('stream-browserify'),
        buffer: require.resolve('buffer'),
        process: require.resolve('process/browser'),
        zlib: require.resolve('browserify-zlib'),
        fs: false,
        net: false,
        tls: false,
      };
    }

    // Optimize bundle splitting
    config.optimization = {
      ...config.optimization,
      splitChunks: {
        chunks: 'all',
        cacheGroups: {
          vendor: {
            test: /[\\/]node_modules[\\/]/,
            name: 'vendors',
            chunks: 'all',
          },
          solana: {
            test: /[\\/]node_modules[\\/]@solana[\\/]/,
            name: 'solana',
            chunks: 'all',
            priority: 10,
          },
        },
      },
    };

    return config;
  },
  transpilePackages: ['@solana/web3.js', '@solana/spl-token'],
};

module.exports = nextConfig;
</file>

<file path="package.json">
{
  "name": "jackpot-solana-lottery",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@next/swc-wasm-nodejs": "13.5.1",
    "@privy-io/react-auth": "^2.13.8",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.2",
    "@solana/spl-token": "^0.4.13",
    "@solana/wallet-adapter-react": "^0.15.38",
    "@solana/web3.js": "^1.98.2",
    "@types/node": "20.6.2",
    "@types/react": "19.1.6",
    "@types/react-dom": "19.1.6",
    "autoprefixer": "10.4.15",
    "browserify-zlib": "^0.2.0",
    "buffer": "^6.0.3",
    "canvas-confetti": "^1.9.3",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "crypto-browserify": "^3.12.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "eslint": "8.49.0",
    "eslint-config-next": "15.3.3",
    "framer-motion": "^11.0.3",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.446.0",
    "motion": "^10.18.0",
    "next": "15.3.3",
    "next-themes": "^0.3.0",
    "postcss": "8.4.30",
    "process": "^0.11.10",
    "react": "18.2.0",
    "react-countup": "^6.5.3",
    "react-curved-text": "^3.0.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "18.2.0",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-use-measure": "^2.1.7",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "stream-browserify": "^3.0.0",
    "swr": "^2.3.3",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "3.3.3",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "5.2.2",
    "vaul": "^0.9.9",
    "zod": "^3.23.8",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@types/canvas-confetti": "^1.6.4"
  },
  "overrides": {
    "@types/react": "19.1.6",
    "@types/react-dom": "19.1.6"
  }
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="README.md">
jack3
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss';

const config: Config = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
};
export default config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    },
    "typeRoots": ["./node_modules/@types", "./types"]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "types/*.d.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
